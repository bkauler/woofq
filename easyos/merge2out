#!/bin/sh
#BK nov. 2011
#111126 do not copy files from woof-distro to woof-out, symlink only.
#111126 fix symlink to compat-distro pkg download directory.
#111127 make sure host linux system has 'printcols' and 'vercmp' utilities.
#111127 also make sure target build will have 'printcols' and 'vercmp'.
#111203 fixes for rerun of this script.
#120503 i left some EMPTYDIRMARKER files inside /dev.
#120512 remove option to create symlinks in working directory.
#120515 build from "gentoo" binary tarballs (refer support/gentoo).
#130306 arch linux: gz now xz.
#130528 change owner:group of symlink instead of what it points to.
#131209 Packages-puppy- files renamed to Packages-pet-
#140117 target now ../builds/quirky-out_*
#140119 fixes for quirky build. 140121
#141011 added note about Ubuntu version numbers.
#141116 support buildroot, plus general handler.
#150708 add note on Wily Werewolf.
#150813 i want the 'source' folder in target. REVERT.
#151103 always want t2 april db-file copied (going to support building with compat:april in a ubuntu build).
#151104 build a real puppy live-cd.
#160425 packages-bz2-april was missing. refer 151103.
#170127 'easy-code' is a copy of 'woof-code' but for building Easy Linux.
#170128 'easy-arch' is a copy of 'woof-arch' but for building Easy Linux.
#170525 fix copying 0pre-* scripts.
#170711 new easy-code/rootfs-skeleton-diffs, only has changes. 
#170730 copy 2createpcskeletonimage-gpt deprecated script. path fix.
#170802 fixes for 170711. 170806 fix.
#170930 new WOOF_VARIANT  171205 fix.
#180512 create folder sd-skeleton-images for easy.
#181121 no longer have woof-arch, woof-code, woof-distro --no longer supporting Quirky!
#181216 'builds' folder moved outside.
#190728 do not append extra DISTRO_TARGETARCH and DISTRO_ARCHDIR_SYMLINKS onto file DISTRO_SPECS
#200128 delete puppy folder before copy.
#200921 a single variable specifying where to write to.
#20210818 lowest level, want to have symlink in source, copy actual file: --dereference
#20210818 DISTRO_SPECS may now have ALT1_DISTRO_* variables.
#20220119 arch linux fix.
#20220120 want to use oe dunfell pkgs in arch linux builds.
#20220131 new build path. separate PKGSPATH from PROJECTPATH
#20230309 use oe kirkstone pkgs in non-oe builds.
#20230326 fix paths now everything on 4TB ssd.
#20230409 EMPTYDIRMARKER files will be in boot/initrd-tree
#20230706 fix removing EMPTYDIRMARKER files in puppy folder.
#20230909 no more puppy folder.
#20250529 use oe scarthgap packages in non-oe builds.

[ ! -d ./easy-arch ] && exit
[ ! -d ./easy-code ] && exit
[ ! -d ./easy-distro ] && exit

#200921 i have mounted /dev/nvme1n1p1 ssd on /mnt/sda1/nvme...
#BUILDSPATH='/mnt/sda1/nvme/woof-builds' ###SET THIS###
BUILDSPATH='/mnt/build/builds/woof' ###SET THIS### 20220131 20230326
[ ! -d $BUILDSPATH ] && exit

CURDIR="`pwd`"
PROJECTPATH="$CURDIR" #200921

PKGSPATH="/mnt/build/bk/projects/woof/woof-pkgs" #20221110 ###SET THIS### 20230326

echo
echo "This script merges easy-arch, easy-code and easy-distro, to:
 ${BUILDSPATH}/easy-out_*.

easy-arch:  architecture-dependent (x86, arm) files, mostly binary executables.
easy-code:  the core of Woof. Mostly scripts.
easy-distro: distro-configuration (Debian, Slackware, etc.) files.

Important: the host architecture is distinct from the target architecture.
The host is the machine you are running Woof on, the target is the machine
in which the EasyOS that you build is going to run. Typically, you will build
on a amd64 machine, and the target may be amd64 or aarch64."
echo

. /etc/DISTRO_SPECS #has DISTRO_TARGETARCH
HOSTARCH="$DISTRO_TARGETARCH"
echo "Host arch: ${HOSTARCH}"
echo

CNT=1
for ONEARCH in `find easy-arch -mindepth 1 -maxdepth 1 -type d | sed -e 's%^easy-arch/%%' | sort | tr '\n' ' '`
do
 echo "$CNT  $ONEARCH"
 CNT=$(($CNT + 1))
done
echo -n 'Type number of target architecture: '
read nTARGETARCH
TARGETARCH="`find easy-arch -mindepth 1 -maxdepth 1 -type d | sed -e 's%^easy-arch/%%' | sort | head -n $nTARGETARCH | tail -n 1`"
echo "...ok, $TARGETARCH"
echo

echo 'Woof builds easyOS based on the binary packages from another distro.
We sometimes refer to this as the "compat-distro".'
echo
CNT=1
taPTN="s%^easy-distro/${TARGETARCH}/%%"
for ONEDISTRO in `find easy-distro/${TARGETARCH} -mindepth 1 -maxdepth 1 -type d | sed -e "${taPTN}" | sort | tr '\n' ' '`
do
 echo "$CNT  $ONEDISTRO"
 CNT=$(($CNT + 1))
done
echo -n 'Type number of compat-distro: '
read nCOMPATDISTRO
COMPATDISTRO="`find easy-distro/${TARGETARCH} -mindepth 1 -maxdepth 1 -type d | sed -e "${taPTN}" | sort | head -n $nCOMPATDISTRO | tail -n 1`"
echo "...ok, $COMPATDISTRO"
echo

echo 'The compat-distro usually has release versions, unless it is a rolling
release system such as Arch Linux. Please choose which release you want to
obtain the binary packages from.'

case $COMPATDISTRO in
 ubuntu)
  echo 'Note: Ubuntu versions:
  18.04 LTS Bionic Beaver,
  16.04 LTS Xenial Xerus, 15.10 Wily Werewolf, 15.04 Vivid Vervet,
  14.10 Utopic Unicorn, 14.04 Trusty Tahr, 12.04 Precise Pangolin'
 ;;
esac

CNT=1
for ONECOMPAT in `find easy-distro/${TARGETARCH}/${COMPATDISTRO} -maxdepth 1 -mindepth 1 -type d | rev | cut -f 1 -d '/' | rev | sort | tr '\n' ' '`
do
 echo "$CNT  $ONECOMPAT"
 CNT=$(($CNT + 1))
done
if [ $CNT -eq 1 ];then
 echo
 echo "Sorry, there are no release directories inside easy-distro/${COMPATDISTRO}."
 echo "At least one is required. Quiting."
 exit
fi
echo -n 'Type number of release: '
read nCOMPATVERSION
COMPATVERSION="`find easy-distro/${TARGETARCH}/${COMPATDISTRO} -maxdepth 1 -mindepth 1 -type d | rev | cut -f 1 -d '/' | rev | sort | head -n $nCOMPATVERSION | tail -n 1`"
echo "...ok, $COMPATVERSION"

echo
echo 'Choices:'
echo "Host architecture:     $HOSTARCH"
echo "Target architecture:   $TARGETARCH"
echo "Compatible-distro:     $COMPATDISTRO"
echo "Compat-distro version: $COMPATVERSION"
echo
echo -n "If these are ok, press ENTER, other CTRL-C to quit: "
read waitforit

echo
echo "Directory '${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}'
will now be created, if not already, and the contents of 'easy-code' copied
into it. Then, these will also be copied into it:
easy-arch/${HOSTARCH}/build
easy-arch/${TARGETARCH}/target
easy-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION} (files all levels)"
echo
echo "Any existing files in '${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}' will be over-ridden."
echo "(Also, if you have any of your own files in folders 'boot',
 'packages-templates', 'rootfs-skeleton' or 'support', they will be deleted.)"
echo -n 'Press ENTER to continue: '
read goforit

#111203 as files/dirs could be removed in future woofs, need to wipe entire target dirs first...
rm -r -f ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/boot  2> /dev/null
rm -r -f ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/packages-templates  2> /dev/null
rm -r -f ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/rootfs-skeleton  2> /dev/null
rm -r -f ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/support  2> /dev/null
sync

mkdir -p ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}
getARCHDIR=""
[ -f ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/DISTRO_SPECS ] && getARCHDIR="`grep '^DISTRO_ARCHDIR' ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/DISTRO_SPECS`" #140119 140121

echo "Copying easy-code/*..."
cp -a -f --remove-destination easy-code/* ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
sync

echo "Copying easy-arch/${HOSTARCH}/build/*..."
cp -a -f --remove-destination easy-arch/${HOSTARCH}/build/* ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
sync
echo "Copying easy-arch/${TARGETARCH}/target/*"
cp -a -f --remove-destination easy-arch/${TARGETARCH}/target/* ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
sync
echo
echo "Copying easy-distro/${COMPATDISTRO}/${COMPATVERSION}/*..."
#copy any top-level files, going down...

DESTTYPE='file'

PARENTDIR="`echo -n "$CURDIR" | rev | cut -f 1 -d '/' | rev`" #ex: woof2
for ONETOP in `find easy-distro -mindepth 1 -maxdepth 1 -type f | tr '\n' ' '`
do
 cp -a -f --remove-destination $ONETOP ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
done
for ONETOP in `find easy-distro/${TARGETARCH} -mindepth 1 -maxdepth 1 -type f | tr '\n' ' '`
do
  cp -f -a --remove-destination $ONETOP ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
done
for ONETOP in `find easy-distro/${TARGETARCH}/${COMPATDISTRO} -mindepth 1 -maxdepth 1 -type f | tr '\n' ' '`
do
  cp -f -a --remove-destination $ONETOP ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
done
#lowest level...
#cp -a -f --remove-destination easy-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION}/* ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
#20210818 want to have symlink in source, copy actual file: --dereference
for ONETOP in `find easy-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION} -mindepth 1 -maxdepth 1 -type f | tr '\n' ' '`
do
 cp -f --preserve=all --dereference --remove-destination $ONETOP ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
done
sync

echo "WOOF_HOSTARCH='$HOSTARCH'
WOOF_TARGETARCH='${TARGETARCH}'
WOOF_COMPATDISTRO='${COMPATDISTRO}'
WOOF_COMPATVERSION='${COMPATVERSION}'" > ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/WOOFMERGEVARS

#170930 171205
echo "WOOF_VARIANT='easy'" >> ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/WOOFMERGEVARS

echo
echo "Now for some housekeeping..."

#work around limitations of a version control system...
echo
echo "Some things are modified inside 'easy-code' to cater for most Version
Control Systems. Typically, a VCS cannot handle most of these:
1. Empty directories
2. Special file/directory permissions/ownership
3. Device nodes
4. Symlinks
5. Special characters (such as [, [[) in file/dir names
6. Binary files

BK's Bones VCS can handle all six. Fossil VCS can do no.4 & no.6 only (in fact,
most VCSs such as SVN, GIT and Mercurial, can handle no.4 & no.6). Woof has
lots of symlinks and binary files, and you must use a VCS that supports them.
No.5 is solved by avoiding usage of such special characters, except we have
workarounds for case of files named '[' and '[['."
echo
echo "Directory 'easy-code' has workarounds for no.1-3 (& partial 5):
1. An empty file named 'EMPTYDIRMARKER' inside all empty directories.
2. A file named VCSMETADATA has permissions/ownerships of special files/dirs.
3. 'dev' directories are converted to '*DEVDIR.tar.gz' tarball files.
5. Files named '[' and '[[' renamed 'LEFTSQBRACKETCHAR' 'DBLLEFTSQBRACKETCHAR'."
echo
echo "These workarounds will now be undone in '${BUILDSPATH}/easy-out_*'..."
echo -n "Press ENTER to continue: "
read goforit

fossil_fixup_func() { #workarounds for VCS...
 #param passed in is directory to fix.
 #5: '[' and '[[' files renamed...
 for FOSSILFIXFILE in `find ${1} -name LEFTSQBRACKETCHAR | tr '\n' ' '`
 do
  DIRFFF="`dirname "$FOSSILFIXFILE"`"
  mv -f $FOSSILFIXFILE $DIRFFF/[
 done
 for FOSSILFIXFILE in `find ${1} -name DBLLEFTSQBRACKETCHAR | tr '\n' ' '`
 do
  DIRFFF="`dirname "$FOSSILFIXFILE"`"
  mv -f $FOSSILFIXFILE $DIRFFF/[[
 done
 #1: empty dirs have file 'EMPTYDIRMARKER' in them...
 for FOSSILFIXFILE in `find ${1} -type f -name EMPTYDIRMARKER | tr '\n' ' '`
 do
  DIRFFF="`dirname "$FOSSILFIXFILE"`"
  rm -f $DIRFFF/EMPTYDIRMARKER
 done
 #3: 'dev' dir made into a tarball and stored in 'easy-arch'...
 for DEVFILE in `find ${1} -type f -name DEVDIRMARKER | tr '\n' ' '`
 do
  xDEVFILE="${CURDIR}/easy-arch/`cat $DEVFILE`"
  DIRFFF="`dirname "$DEVFILE"`"
  cp -f $xDEVFILE ${DIRFFF}/DEVDIR.tar.gz
  FCURRDIR="`pwd`"
  cd $DIRFFF
  tar -zxf DEVDIR.tar.gz
  rm -f DEVDIR.tar.gz
  rm -f DEVDIRMARKER
  #120503 i left some EMPTYDIRMARKER inside /dev...
  for FOSSILFIXFILE in `find dev -type f -name EMPTYDIRMARKER | tr '\n' ' '`
  do
   DIRFFF="`dirname "$FOSSILFIXFILE"`"
   rm -f $DIRFFF/EMPTYDIRMARKER
  done
  cd $FCURRDIR
 done
}

echo
cd ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}
echo "Fixing ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/rootfs-skeleton..."
fossil_fixup_func rootfs-skeleton
echo "Fixing ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/packages-templates..."
fossil_fixup_func packages-templates

#20230409
fossil_fixup_func boot

#2: VCSMETADATA permissions/ownership...
if [ -s VCSMETADATA ];then
 echo "Fixing file/dir permissions/ownership..."
 for ONESPEC in `cat VCSMETADATA | tr '\n' ' '`
 do
  ONEFILE="`echo -n "$ONESPEC" | cut -f 1 -d ':'`"
  [ ! -e $ONEFILE ] && continue
  ONEPERM="`echo -n "$ONESPEC" | cut -f 2 -d ':'`"
  ONEOWNER="`echo -n "$ONESPEC" | cut -f 3 -d ':'`"
  ONEGROUP="`echo -n "$ONESPEC" | cut -f 4 -d ':'`"
  echo -n '.' #echo " $ONEFILE $ONEPERM $ONEOWNER $ONEGROUP"
  chmod $ONEPERM $ONEFILE
  #130528 change owner:group of symlink instead of what it points to...
  [ "$ONEOWNER" != "UNKNOWN" ] && chown -h $ONEOWNER $ONEFILE
  [ "$ONEOWNER" = "UNKNOWN" ] && chown -h root $ONEFILE
  [ "$ONEGROUP" != "UNKNOWN" ] && chgrp -h $ONEGROUP $ONEFILE
  [ "$ONEGROUP" = "UNKNOWN" ] && chgrp -h root $ONEFILE
 done
 echo
fi
sync

cd $PROJECTPATH
#common dir to download pet pkgs to... 20220131 fix...
mkdir -p ${PKGSPATH}/local-repositories/${TARGETARCH}/packages-pet
ln -snfr ${PKGSPATH}/local-repositories/${TARGETARCH}/packages-pet ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/packages-pet

#more links to common download...
if [ -f ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/DISTRO_SPECS ];then

. ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/DISTRO_SPECS

 #111126 code from 2createpackages... also in 1download 20220119 arch fix...
 BINARIES='' #141116
 [ "$DISTRO_BINARY_COMPAT" = "t2" ] && BINARIES="bz2" #get them from packages-bz2-${DISTRO_COMPAT_VERSION}.
 [ "$DISTRO_BINARY_COMPAT" = "slackware" ] && BINARIES="tgz_txz" #download to packages-tgz_txz-${DISTRO_COMPAT_VERSION}.
 [ "$DISTRO_BINARY_COMPAT" = "debian" ] && BINARIES="deb" #download to packages-deb-${DISTRO_COMPAT_VERSION}.
 #[ "$DISTRO_BINARY_COMPAT" = "arch" ] && BINARIES="tar_xz" #download to packages-tar_xz-${DISTRO_COMPAT_VERSION}. 130306
 [ "$DISTRO_BINARY_COMPAT" = "puppy" ] && BINARIES="pet" #built entirely from pet pkgs.
 [ "$DISTRO_BINARY_COMPAT" = "scientific" ] && BINARIES="rpm" #Iguleder: download to packages-rpm-${DISTRO_COMPAT_VERSION}.
 [ "$DISTRO_BINARY_COMPAT" = "mageia" ] && BINARIES="rpm"
 [ "$DISTRO_BINARY_COMPAT" = "gentoo" ] && BINARIES="gentoo" #120515 download to packages-gentoo-gap6
 [ "$DISTRO_BINARY_COMPAT" = "raspbian" ] && BINARIES="deb_raspbian" #download to packages-deb_raspbian-${DISTRO_COMPAT_VERSION}.
 [ "$DISTRO_BINARY_COMPAT" = "ubuntu" ] && BINARIES="deb" #141116 download to packages-deb-${DISTRO_COMPAT_VERSION}.

 #141116 add a general handler...
 [ "$BINARIES" == "" ] && BINARIES="$DISTRO_BINARY_COMPAT" #ex: buildroot

 BINARIES="${BINARIES}-${DISTRO_COMPAT_VERSION}" #ex: download to packages-buildroot-aug2014

 mkdir -p ${PKGSPATH}/local-repositories/${TARGETARCH}/packages-${BINARIES}
 ln -snfr ${PKGSPATH}/local-repositories/${TARGETARCH}/packages-${BINARIES} ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/packages-${BINARIES}
fi

#20210818 DISTRO_SPECS may now have ALT1_DISTRO_* variables...
if [ "$ALT1_DISTRO_COMPAT_VERSION" ];then
 ALT1_BINARIES="${ALT1_DISTRO_BINARY_COMPAT}-${ALT1_DISTRO_COMPAT_VERSION}"
 if [ ! -e ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/packages-${ALT1_BINARIES} ];then #ex: packages-oe-dunfell symlink
  mkdir -p ${PKGSPATH}/local-repositories/${TARGETARCH}/packages-${ALT1_BINARIES}
  ln -snfr ${PKGSPATH}/local-repositories/${TARGETARCH}/packages-${ALT1_BINARIES} ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/packages-${ALT1_BINARIES}
 fi
fi

#111127 make sure host puppy has these...
[ ! -f /usr/sbin/printcols ] && cp -af easy-arch/${HOSTARCH}/build/support/printcols /usr/sbin/ #column manipulator.
[ ! -f /bin/vercmp ] && cp -af easy-arch/${HOSTARCH}/target/boot/vercmp /bin/ #dotted-version compare utility, see boot/vercmp.c

#111127 make sure target has these...
cp -af easy-arch/${TARGETARCH}/build/support/printcols ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/rootfs-skeleton/usr/sbin/
cp -af easy-arch/${TARGETARCH}/target/boot/vercmp ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/rootfs-skeleton/bin/

#151103 want to use t2 pkgs in ubuntu builds...
mkdir -p ${PKGSPATH}/local-repositories/${TARGETARCH}/packages-bz2-april #160425
[ -f easy-distro/${TARGETARCH}/t2/april/Packages-t2-april-official ] && cp -af easy-distro/${TARGETARCH}/t2/april/Packages-t2-april-official ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
[ -f easy-distro/${TARGETARCH}/t2/Packages-t2-april-official ] && cp -af easy-distro/${TARGETARCH}/t2/Packages-t2-april-official ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
[ ! -e ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/packages-bz2-april ] && ln -sr ${PKGSPATH}/local-repositories/${TARGETARCH}/packages-bz2-april ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/packages-bz2-april

#20220120 want to use oe dunfell pkgs in arch linux builds...
mkdir -p ${PKGSPATH}/local-repositories/${TARGETARCH}/packages-oe-dunfell
[ -f easy-distro/${TARGETARCH}/oe/dunfell/Packages-oe-dunfell-official ] && cp -af easy-distro/${TARGETARCH}/oe/dunfell/Packages-oe-dunfell-official ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
[ -f easy-distro/${TARGETARCH}/oe/Packages-oe-dunfell-official ] && cp -af easy-distro/${TARGETARCH}/oe/Packages-oe-dunfell-official ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
[ ! -e ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/packages-oe-dunfell ] && ln -sr ${PKGSPATH}/local-repositories/${TARGETARCH}/packages-oe-dunfell ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/packages-oe-dunfell

#20230309 want to use oe kirkstone pkgs in non-oe builds...
mkdir -p ${PKGSPATH}/local-repositories/${TARGETARCH}/packages-oe-kirkstone
[ -f easy-distro/${TARGETARCH}/oe/kirkstone/Packages-oe-kirkstone-official ] && cp -af easy-distro/${TARGETARCH}/oe/kirkstone/Packages-oe-kirkstone-official ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
[ -f easy-distro/${TARGETARCH}/oe/Packages-oe-kirkstone-official ] && cp -af easy-distro/${TARGETARCH}/oe/Packages-oe-kirkstone-official ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
[ ! -e ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/packages-oe-kirkstone ] && ln -sr ${PKGSPATH}/local-repositories/${TARGETARCH}/packages-oe-kirkstone ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/packages-oe-kirkstone

#20250529 want to use oe scarthgap pkgs in non-oe builds (for devuan excalibur/trixie)...
mkdir -p ${PKGSPATH}/local-repositories/${TARGETARCH}/packages-oe-scarthgap
[ -f easy-distro/${TARGETARCH}/oe/scarthgap/Packages-oe-scarthgap-official ] && cp -af easy-distro/${TARGETARCH}/oe/scarthgap/Packages-oe-scarthgap-official ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
[ -f easy-distro/${TARGETARCH}/oe/Packages-oe-scarthgap-official ] && cp -af easy-distro/${TARGETARCH}/oe/Packages-oe-scarthgap-official ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/
[ ! -e ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/packages-oe-scarthgap ] && ln -sr ${PKGSPATH}/local-repositories/${TARGETARCH}/packages-oe-scarthgap ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/packages-oe-scarthgap


#151104
mkdir -p ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/puppy
rm -rf ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/puppy/* #200128
sync

#20230909 remove...
#cp -a -f ../puppy/* ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/puppy/
#sync

#20230706 moved down 20230909 remove...
#cd ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}
#fossil_fixup_func puppy
cd $PROJECTPATH

#200921
echo "PROJECTPATH='${PROJECTPATH}'
PKGSPATH='${PKGSPATH}'" > ${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}/PROJECTPATH

echo
echo "Directory '${BUILDSPATH}/easy-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}'
is now normal, that is, the workarounds have been removed. Note,
../local-repositories has been created (if not already), to be used as a common
binary package download place. 'packages-pet' and 'packages-${BINARIES}'
have been created that link into it, where pkgs will be downloaded to."


###end###

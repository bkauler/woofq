#!/bin/sh
#(c) Copyright Barry Kauler, 30 January 2017. Licence: GPL v3 (/usr/share/doc/legal).
#simple script in initramfs to boot Easy Linux.
#text colors: 34=blue, 33=yellow, 32=green, 31=red, 35=purple, 36=aquablue, 38=black
#background colors: 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 47=white
#ansi escape codes ref: https://misc.flogisoft.com/bash/tip_colors_and_formatting
#190304 complete rewrite.
#190706 reintroduce support live-cd, and run in zram.
#190713 first bootup, password gui has a back-button to lang/kbd gui.
#190714 run in zram if working-partition not found.
#190716 search for persistent storage.
#190811 redesign to be able to drop capabilities when switch_root. 190812
#190817 copy session to ram, and disable partition mounting. 190818
#190820 fix determine BASELANG for non-english.
#190821 debian xorg fbdev does not work, have alternative from pyro.
#190828 verify cp of vmlinuz, initrd, easy.sfs to wkg partition.
#190901 cannot choose "Copy session to RAM & disable drives" at first bootup.
#190913 the inbuilt easy container has label pyro or buster, fix upgrading older versions easyos.
#190914 remove more desktop icons and menu entries. copying session to ram, also load extra sfs files.
#190915 fix 190913
#190923 rc.sysinit needs login pw to run and unlock gnome-keyring. 191005 removed (archived input536).
#191101 modify error msg if BOOT_DEV not found.
#191219 add  "lockdown=confidentiality" to boot menu.
#191224 if easy.sfs mounted on /tro (via loop0), rollback fails (easy.sfs seems to delete, but isn't), hence moved rollback below unmount /tnew
#200218 use hwclock to set system time.
#200301 optional chroot instead of switch_root ***NOT USING***
#200302 run fstrim on ssd that supports TRIM.
#200303 $DATE variable, read in fscheck.
#200319 busybox fdisk faulty with my 8TB hdd, using full fdisk.
#200621 ref 200302, now have full 'hdparm' utility, can check usb drives.
#200621 ext4 journal default commit interval is 5 seconds, change to 30.
#200623 change from static /dev to devtmpfs, due to awful nvme node assignments when 2+ drives.
#200623 log stuff to /root/.initrd-debug in main f.s.
#200624 fix 200621 if ext4 does not have a journal. 200715 fix again.
#200719 xWKG_DEV override for "Copy session to RAM & unmount working-partition".
#200720 pickup "qfix=NEW"
#200726 boot- and wkg-partition the same, fsck does not work, as fscheck script cannot unmount.
#200727 revert 200719. new "qfix=lock1" for "Copy session to RAM & unmount working-partition"
#200801 new exit_to_initrd(), qfix=dropout<n> to drop out to console.
#200802 new 'nnn' file manager. /.debug.flg written by /usr/sbin/debug-initrd
#200803 user-requested lockdown, file /.lockdown.flg
#200804 revert 191219.  200805 fixes for running in ram.
#200806 .lockdown.flg cannot be in .session folder, requires pw to unencrypt.
# nor can it be in wkg-partition as it is zram0 after bootup. put it in boot-part. ref: /usr/sbin/lockdown-ram
#200807 improve exit funcs, add shfm.
#200809 fix for "job control turned off". qfix=normal to remove permanent lockdown.
#200809 lockdown: new "save" icon on desktop, replace "update" icon.
#200820 mount securityfs. enable lockdown, no longer done as kernel boot param.
#200820 also want BOOT_UUID in /etc/rc.d/PUPSTATE. do not hard-code "save" coords.
#200822 save origWKG_DIR in PUPSTATE. 200823 save BOOT_LOCK in PUPSTATE. 200824 fixes.
#200826 running in ram, mimic sfs files to same path in zram. copy all sfs's. 200827 copy more.
#200828 nearly all cp need -a param.
#200830 remove globicons file when version update. xdg fix. cp fix.
#200830 run mknod here, in case lock#2.
#20201109 "uk" keyboard layout renamed to "gb".
#20201130 make sure ext2 f.s. in zram0 block size is 4096!
#20201201 set TZ timezone variable. note, it will be corrected later after .session mounted.
#20201204 do not delete globicons file when version update (revert 200830).
#20201206 test /sys/kernel/security exists.
#20201211 copy session to ram & disable drives: power-down disabled drives using hdparm.
#20201211 /usr/share/sss/initrd_strings/initd_strings* has translation for "save", but don't assume anything for "update"...
#20201213 lockdown: if kernel patched cap_sys_mount separated from cap_sys_admin, drop latter.
#20201223 do not do 20201223 if kernel less than 5.10 (Xorg does not work).
#20210113 rpi does not have a hardware clock, set it to something sane at 1st bootup.
#20210407 hidepid=1 when mount /proc. maybe only useful in a multiuser situation. ref: kernel docs filesystems/proc.txt. see also: start-container
#20210423 modified cp for xorg alternative that runs in initrd.
#20210423 dunfell oe, xorg not working in initrd, don't use.
#20210424 display word-wrapped text blocks, in coloured rectangle. fix.
#20210524 change from "save-folder" to "save-file". 20210525 fix. 20210526 modify. revert.
#20210530 sparse-file save-file has performance penalty, restrict to WKG_FS=ntfs only.
#20210608 do not like gtk gui for ask pw.
#20210611 paragon ntfs driver needs "-t ntfs3" mount option.
#20210912 group id 118 is "fscryptgrp", using this for enabling fscrypt when login to clients (such as spot).
#20210919 /clients is now /home, home is now files. 20211006 fix.
#20211014 qfix=vid to fix broken video, need to run xorgwizard.
#20211015 hardware-profiling for /etc/modprobe.d
#20211023 cat /proc/fb to /root/.initrd-debug/proc-fb
#20211111 delete container if no longer valid. 20211122 fix.
#20211111 check that symlink to extra sfs still valid (loading on main desktop). 20211122 fix.
#20211205 /files is now in easy.sfs (rootfs-skeleton), as well as boot/initrd-tree/skeleton
#20211206 group id 122 is "filesgrp", set all in /files
#20211207 relocate 20211205 and 20211206 to version-upgrade code section.
#20211208 /mnt/zram0/containers does not exist, append 2>/dev/null
#20211210 /mnt/wkg/files must be 770 permissions.
#20211212 new /mnt/${WKG_DEV}/${WKG_DIR}data
#20220123 2nd partition may be 640 or 768MB. 20220125 resize2fs fix?
#20220206 if no /dev/fb0 then clear screen.
#20220211 if icon-free desktop, icons are in jwm tray. 20220212 fix.
#20220304 increase ext4 commit=30 to 1800 (30min). ref: https://bkhome.org/news/202203/ext4-with-or-without-journal-on-flash-stick.html
#20220511 1st partition may be 767MB, 2nd 4MB
#20220511 ext4 4M too small for a journal. instead of doing it in 3buildeasydistro, do here after resize.
#20220515 recompress easy.sfs from xz to lz4 (LZ4_HC). in fact, do it for all mksquashfs operations.
#20220517 reduce usage of easy.sfs mounted on tnew. warning easy.sfs copy time.
#20220521 tnew, BASELANG, removed completely.
#20220521 aufs top-level now zram. 20220522 no internal journal.
#20220522 the kernel gets rotational right for internal nvme ssd, wrong for usb flash.
#20220522 revert 20220304
#20220523 if EOS_TOP_LEVEL_ZRAM==1 do not mount tmpfs on /tmp
#20220524 rename mnt/easy_ro to mnt/.easy_ro, ditto easy_rw ref: easy-remaster, easy-containers, rc.shutdown
#20220525 EOS_SUPPORT_CONTAINERS==0 do not support containers.
#20220526 hdparm only works on sata drives.
#20220526 lockdown bootup, do not use top-level zram1.
#20220527 when top-level zram, mount wkg-part with noatime
#20220527 /mnt/${WKG_DEV}/${WKG_DIR}.session-transit exists, then merge to .session  see: ask-save-zram1  20220530
#20220528 message recommend password.
#20220529 top-level-zram1 mount a subfolder in aufs, so will be able to share zram with containers.
#20220601 lockdown, remove zram1 "save" icon.
#20220601 desktop icons have changed layout, so erase previous PuppyPin
#20220603 override EOS_TOP_LEVEL_ZRAM, kernel param zramtl=1|0 or a file .zramtl.flg
#20220603 replace DB_* with SFS_DB_* in sfs .specs files.
#20220609 tweak whether copy easy.sfs to ram.
#20220611 pass working-drive speed test to PUPSTATE, as variable WKGDRV_SPEED
#20220613 easy.sfs now in ${WKG_DEV}/${WKG_DIR}, not in boot-partition.
#         initrd now has /etc/DISTRO_SPECS
#20220614 >=4.0 force always easy.sfs in working-partition. 20220615 fixes. 20220618 fix.
#20220621 .lockdown.flg, .debug.flg, .zramtl.flg, .BOOT_SPECS, .easyos-bootcnt move from boot- to wkg-partition.
#20220622 totally remove BOOT_DEV and BOOT_DIR. remove BOOT_SPECS file.
#20220622 ask enable ext4 encrypt. boot menu.
#20220623 some choices in menu_func cannot be implemented until after pw entered.
#20220624 /easy_rw only mounted if EOS_TOP_LEVEL_ZRAM==1
#20220624 more entries in boot menu.
#20220626 offer boot menu when no pw. 20220627 fix. 20220629
#20220730 EOS_* fallback fix.
#20220801 fix wait for resize2fs to finish. support dd in coreutils.
#20220801 move /.fsckme.flg to /mnt/${WKG_DEV}/${WKG_DIR}
#20220802 top-level-zram doesn't work properly if not enough ram
#20220907 do not have /var symlink. do not have /root/.var or /root/.var0 see also: rc.sysinit, erase-exceptions, fixlayers
#20220911 skeleton img may now have 832MiB wkg-partition.
#20220922 fix set pw for zeus.
#20220928 move /.brokenvideo to /mnt/${WKG_DEV}/${WKG_DIR}
#20220929 remove meaningless widescreen detect.
#20221015 version update, exclude some files&folders from rw-*sfs
#20221016 check valid library path.
#20221030 support EOS_LOGIN_ZEUS, /mnt/wkg/.loginzeus.flg can override.
#20221102 remove support EOS_LOGIN_ZEUS
#20221118 playing with new logo.
#20221226 support skeleton wkg partition 672MiB.
#20230104 /mnt/${WKG_DEV}/${WKG_DIR}.session/.rollback.flg moved to /mnt/${WKG_DEV}/${WKG_DIR}.rollback.flg
#20230112 option pass "qlang=nn" where nn is two-letter language, ex: fr
#20230112 separate strings to file /nls/init.str.en
#20230113 load font for country code.
#20230123 removed SESSIONSFSflag. it is an old idea from 2017, not used.
#20230123 bring back tnew; gtk apps run in initrd
#20230124 choose from two splash images in tnew. apply default gtk2 theme.
#20230131 for sfs exceeding releases max-depth, do not delete if used in container.
#20230210 always load .str.en, in case non-english is incomplete.
#20230211 .str files folder hierarchy reorganized.
#20230220 3buildeasydistro copies build-choices into initrd, so don't do it here.
#20230221 oh, busybox ash does not support ${QLANG^^} capitalization
#20230302 new wallpaper logo.
#20230304 support distro name other than "EasyOS" and "Easy".
#20230405 always change root pw. create signed-key-pair.
#20230406 WKG_DIR must be root:filesgrp and 770 (flatpak save). 20230407 revert.
#20230409 /files reverts to a symlink to /mnt/wkg/files
#20230409 /mnt/${WKG_DEV}/${WKG_DIR}data is no longer encrypted.
#20230414 not sure if busybox hwclock accepts "--localtime" use "-l"
#20230423 revert 20220601 do not delete PuppyPin.
#20230425 maybe compressed 'gpg' 'mksquashfs'
#20230429 fix workingdir when mount overlay fs. /build-choices has EOS_ variables.
#20230429 /build-choices has EOS_FSCRYPT_VER value 1 or 2
#20230430 64 byte hash generated from password.
#20230503 fscrypt v1 to v2 update.
#20230507 hash generated from password used for gpg.
#20230522 new zap psfu font, do not run load_font, load_font_country.
#20230616 modify check perms under /files
#20230622 new tr console keyboard layout.
#20230718 fix for /etc/xdg/rox.sourceforge.net erased when update.
#20230910 now have usr-merge, may have to fix old .session folder. 20230911 20230912
#20230913 pre-usrmerge .session may now have circular symlink.
#20231108 version update, conditionally load sfs's from previous version.
#20231109 hack for nvidia sfs. NO, reverted. check nvidia major version.
#20231111 fix history depth detection.
#20231124 for nvidia.sfs check that nvidia gpu exists.
#20231125 moved up reading sfs/settings/initrd/CONFIG; want to read KEYMAP further down even if no fscrypt.
#20231125 keyboard hardware profile, as need to detect if kb changed. 20231126 fix.
#20231128 fix 20231124
#20231203 usr-merge: may also have to fix kirkstone container.
#20240113 support skeleton with 920MiB wkg-partition. 20240116 880MiB wkg-part.
#20240128 keyboard layout: try fix background color.
#20240308 make sure .session/root has 700 perms.
#20240428 copy some static utilities.
#20240430 improve timezone.
#20240512 :-english for vars
#20240512 spacebar disable menu timeout.
#20240512 add rollback to last version in menu.
#20240517 snapshot exclusion handle if $WKG_DIR is empty or deeper, fix typo.
#20240518 initrd menu prev version have to change kernel at bootup.
#20240610 handle change chromium to builtin -- handle in /sbin/fixlayers
#20240612 support skeleton 896MiB wkg-part.
#20240618 pass prevCOMPAT to fixlayers
#20240623 xarchive may change folders to root group. ref: https://forum.puppylinux.com/viewtopic.php?p=123982#p123982
#20240626 Caramel: missing $
#20240712 support skeleton 912MiB wkg-part. 20240715 944MiB wkg-part.
#20240909 fix /etc/profile $LANG
#20240920 992MiB wkg-part, removed 880
#20241011 support eqv builtin container. --optional
#20241112 fix delete etc/xdg  ref: https://forum.puppylinux.com/viewtopic.php?p=135542#p135542
#20250124 make sure version-history-depth exists.
#20250127 discard_granularity not work. ref: https://forum.puppylinux.com/viewtopic.php?t=13709
#20250128 hdparm detect and CONFIG_USB_UAS kernel now maybe can run fstrim.
#20250128 only exclude part of /var (ref: /etc/rc.d/rw-merge and easy-version-control). 20250131 fix.
#20250203 read KERNVER in fixlayers
#20250203 /usr/sbin/easy-update should be /usr/bin/easy-update
#20250206 probe TRIM support with sg_vpd if hdparm fail.
#20250206 if WKG_UUID not on kernel cmdline (it is WKG_LABEL) then get it.

#20230429
. /build-choices #3buildeasydistro copies it here.
[ ! "$EOS_TOP_LEVEL_ZRAM" ] && EOS_TOP_LEVEL_ZRAM='1'
[ ! "$EOS_SUPPORT_CONTAINERS" ] && EOS_SUPPORT_CONTAINERS='1'
EOS_LOGIN_ZEUS='0' #no longer supporting this.
[ ! "$EOS_FSCRYPT_VER" ] && EOS_FSCRYPT_VER='1'

export EOS_SUPPORT_CONTAINERS #20220529 read in /sbin/rw-merge

mount -o hidepid=1,gid=118 -t proc none /proc #20210407 20210912
mount -t sysfs none /sys
mount -t rootfs -o remount,rw rootfs /
ln -s /proc/mounts /etc/mtab 2> /dev/null
export PATH="/bin:/sbin"
mount -t devtmpfs devtmpfs /dev #200623

export TZ='XXX-23' #20201201 imaginary place right around the world east of Greenwich.
#...i think that this will give the most delayed time, so any file operations
#will not result in a future date after the correct time is set in the main f.s.
#ref: http://www.gnu.org/s/libc/manual/html_node/TZ-Variable.html

KERNVER="$(uname -r)" #20210524
export KERNVER #20250203
CR='
'

cat /sys/class/zram-control/hot_add >/dev/null #20220517 creates /dev/zram1
cat /sys/class/zram-control/hot_add >/dev/null #20220517 creates /dev/zram2

create_top_level_zram1() { #20220521
 FREEK=`grep '^MemFree:' /proc/meminfo | tr -s ' ' | cut -f 2 -d ' '`
 #allocate 3/4 of free ram times 2 (as compression is approx 2:1)...
 HALFK=$(($FREEK/2))
 QTRK=$(($HALFK/2))
 USEK=$(($HALFK+$QTRK)) #3/4
 ALLOCK=$(($USEK*2))
 echo "${ALLOCK}K" > /sys/block/zram1/disksize
 #echo "${USEK}K" > /sys/block/zram1/mem_limit
 busybox mke2fs -L "TOPLEVELZRAM" -m 0 -b 4096 /dev/zram1 > /dev/null
}

create_savefile_func() { #20210524
 #ref: https://bkhome.org/news/202105/automatic-resizing-of-save-file-for-puppy.html
 echo -e "\\033[1;35m${S001:-Creating save-file easysave.ext4...}\\033[0;39m" #purple
 #create a sparse file, size of free space in WKG_DEV...
 #20210526 no, make it real big. this will reduce fragmentation. mem tray applet can warn running out
 # of space on WKG_DEV. cut 2 (size of partition) instead of 4...
 #W0=$(df -k /dev/${WKG_DEV} | grep "^/dev/" | tr -s ' ' | cut -f 2 -d ' ')
 #SPARSEK=$(($W0 * 2)) #allow 2MB slack. 20210526 no, double it!
 #...not sure about this, reverting...
 W0=$(df -k /dev/${WKG_DEV} | grep "^/dev/" | tr -s ' ' | cut -f 2 -d ' ')
 SPARSEK=$(($W0 - 2048)) #allow 2MB slack.
 dd if=/dev/null bs=1 seek=${SPARSEK}K of=/mnt/${WKG_DEV}/${WKG_DIR}easysave.ext4 > /dev/null 2>&1
 #create a ext4 f.s....
 LOOPavail="$(losetup -f)"
 losetup ${LOOPavail} /mnt/${WKG_DEV}/${WKG_DIR}easysave.ext4
 echo -n ' '
 echo "#!/bin/ash
 mke2fs -q -t ext4 -L \"EASYSAVE\" -m 0 -b 4096 -O encrypt,^64bit ${LOOPavail} > /dev/null 2>&1 #have the full mke2fs.
 echo -n \"\$?\" > /tmp/retvalflg
 sync" > /mke2fs.sh
 chmod 755 /mke2fs.sh
 /mke2fs.sh &
 while pidof mke2fs.sh >/dev/null;do
  sleep 1
  echo -n '.'
 done
 RETVAL="$(cat /tmp/retvalflg)"
 echo ''
 losetup -d ${LOOPavail}
 return $RETVAL
}

exit_to_initrd() {
 [ ! "${1}" ] && set -- " Have exited from init script at this line number"
 echo -e '\033[1;31m' #bright red
 echo -n "${S002:-Line} "
 grep -n -o "${1}" ${0}
 #echo -en '\033[0;39m' #reset foreground color to default.
 echo -en '\033[1;35m' #1;35 foreground bright magenta
 echo "${S003:-Note 1: Type \"exit\", the init script will attempt to continue.}"
 echo "${S004:-Note 2: On some PCs the keyboard does not work at this stage of bootup.}"
 echo "${S005:-Note 3: if \"ctrl-alt-del\" not work, hold down power button to poweroff.}"
 echo "${S006:-Note 4: Console text editor \"mp\" is available.}"
 echo "${S007:-Note 5: Console file manager \"shfm\": Navigate with arrow keys, \"!\" to spawn}"
 echo "${S008:-        a shell, \"?\" popup help, \"q\" to quit. Help file is \"/shfm.txt\"}"
 if [ -f /bin/nnn ];then
  echo "${S009:-Note 6: Console file manager \"nnn\": Same keys. Help file \"/nnn.txt\"}"
  if [ ! -f /bin/nnn.bin ];then
   mv -f /bin/nnn /bin/nnn.bin
   echo -e '#!/bin/sh\nexec nnn.bin -c -d' > /bin/nnn
   chmod 755 /bin/nnn
  fi
  export XDG_CONFIG_HOME=/etc/nnn
  #note, i think if append /etc/nnn/plugins to $PATH, then can just have "simple" here...
  export NNN_OPEN=/etc/nnn/plugins/simple
 fi
 echo -en '\033[0;39m' #reset foreground color to default.
 export EDITOR=mp
 export SHFM_OPENER=/sbin/xdg-open #200807 for shfm file manager.
 #/bin/sh
 setsid cttyhack sh #200809 fixes "job control turned off"
}

err_exit() { #200807 call exit_to_initrd()
 echo -en '\033[1;31m' #bright red
 echo -e "${S010:-ERROR:} ${1}" #red
 echo "${S011:-Have now dropped into a shell in the initramfs.}"
 echo "${S012:-Please hit key combination CTRL-ALT-DEL to reboot,}"
 echo "${S013:-or HOLD DOWN THE POWER BUTTON TO SHUTDOWN}"
 echo
 echo -en '\033[1;35m' #1;35 foreground bright magenta
 echo "${S014:-The following instructions are for developers only:}"
 echo -en '\033[0;39m' #reset foreground color to default.
 exit_to_initrd "$1"
}


ask_kb() { #181010
 KEYMAP=us
 #now ask for KEYMAP... 20230622 new tr (turkey)...  20240128 try fix background color...
 echo -e '\e[1;;45m 1 azerty 2 be-latin1  3 br-abnt2  4 br-abnt   5 br-latin1-abnt2 6 br-latin1-us
 7 by     8 cf         9 croat      10 cz        11 de            12 de-latin1 
 13 dk    14 dvorak    15 dvorak-l  16 dvorak-r  17 es            18 et        
 19 fi    20 fr        21 gb        22 gr        23 hu101         24 hu        
 25 il    26 it        27 jp106     28 la-latin1 29 lt            30 mk        
 31 nl    32 no        33 pl        34 pt-latin1 35 ro            36 ru        
 37 se    38 sg        39 sk-qwerty 40 sk-qwertz 41 slovene       42 srp       
 43 sv-latin1  44 tr   45 us        46 wangbe                                  \e[0;;m'
 
 #20210424 want word-wrapped text block in background colour rectangle...
 #S015='Please enter the number corresponding to your keyboard layout.'
 echo -n -e '\033[1;;44m'
 while read aLINE
 do
  echo -n '                                                                       '
  echo -n -e '\033[1G' #move cursor back to col 1.
  echo " ${aLINE}"
 done << EOT
$(echo " ${S015:-Please enter the number corresponding to your keyboard layout.}")
$(echo "${S016:-Choose the closest match, there will be an opportunity to fine-tune the layout after the desktop has loaded. Press ENTER only for US.}" | fold -s -w 70)
EOT
 echo -n -e '\033[0;;m'
 echo -n -e '\033[1;30;43m'
 while read aLINE
 do
  echo -n '                                                                       '
  echo -n -e '\033[1G' #move cursor back to col 1.
  echo " ${aLINE}"
 done << EOT
$(echo "${S017:-Note: on some PCs the keyboard does not work at this stage of bootup. In that case, wait 5 minutes for bootup.}" | fold -s -w 70)
EOT
 echo -n -e '\033[0;;m'
 
 echo -n " ${S018:-Keyboard layout:} " #S018='Keyboard layout:'
 read -r -t 300 KBnum
 [ $? -ne 0 ] && return 1 #timed out
 KBnum=$(echo -n "$KBnum" | sed -e 's%[^0-9]%%g')
 [ ! $KBnum ] && KBnum=45 #20230622
 [ $KBnum -gt 46 ] && KBnum=45 #20230622
 [ $KBnum -eq 0 ] && KBnum=45  #20230622
 KEYMAP="$(ls -1 /lib/keymaps | head -n ${KBnum} | tail -n 1 | sed -e 's%\.gz%%')"
 echo " ${S019:-...ok, keymap chosen:} ${KEYMAP}" #S019='...ok, keymap chosen:'
 return 0
}

#20220622 no longer offering boot options in boot-manager, offer here... 20220624 more entries
menu_func() {
 CNTm=1
 if [ "$1" != "nopw" ];then #20220626
  echo "QUIT ${CNTm} ${S020:-Do nothing, go back to enter password}" > /menulist
  CNTm=$(($CNTm+1))
 fi
 if [ "$LOCKkeep" == "1" ];then
  echo "LOCKREM ${CNTm} ${S021:-Remove lockdown, restore normal bootup}" >> /menulist
  CNTm=$(($CNTm+1))
 fi
 echo "NOX ${CNTm} ${S022:-Bootup to commandline only, no X}" >> /menulist
 CNTm=$(($CNTm+1))
 echo "RBSAVED ${CNTm} ${S023:-Rollback to last saved session}" >> /menulist
 CNTm=$(($CNTm+1))
 echo "RBPRISTINE ${CNTm} ${S024:-Rollback to pristine first-boot}" >> /menulist
 CNTm=$(($CNTm+1))
 echo "RBPREVVER ${CNTm} ${S451:-Rollback to previous version}" >> /menulist
 CNTm=$(($CNTm+1))
 echo "FSCHECK ${CNTm} ${S025:-Filesystem check of working-partition}" >> /menulist
 CNTm=$(($CNTm+1))
#20221102 remove...
# echo "LOGZEUS ${CNTm} Flip login as user root or zeus WARNING EXPERIMENTAL" >> /menulist
# CNTm=$(($CNTm+1))
 echo
 echo -e -n "\\e[1;38;43m" #38=black text, 43=yellow background. ...um, getting bright-white text, black bg.
 if [ "$1" == "nopw" ];then #20220626 20220627
  echo "${S026:-Press ENTER key or wait 15 seconds for normal bootup}"
  echo "${S409:-(Hit the SPACEBAR to disable 15 second timeout)}" #20240512
 fi
 #this pads the lines with spaces to column 41...
 cut -f 2- -d ' ' /menulist | xargs -I STR printf "%-41s\n" STR
 echo -e -n "\\e[0;;m"
 if [ "$1" == "nopw" ];then #20220627 20220629
  echo -n "${S027:-Type a number from the left column:} "
  #20240512 disable timeout...
  IFS= read -t 15 -n 1 menuchoice
  if [ "$menuchoice" == " " ];then
   clear
   echo
   echo "Timeout disabled. Press ENTER key for normal bootup"
   echo -e -n "\\e[1;38;43m" #bright-white text, black bg.
   cut -f 2- -d ' ' /menulist | xargs -I STR printf "%-41s\n" STR
   echo -e -n "\\e[0;;m"
   echo -n "${S027:-Type a number from the left column:} "
   read -n 1 menuchoice
  fi
 else
  echo -n "${S027:-Type a number from the left column:} "
  read -n 1 menuchoice
 fi
 if [ "$menuchoice" ];then #20220626
  MENUVAR="$(grep " ${menuchoice} " /menulist | cut -f 1 -d ' ')"
 else
  MENUVAR=''
 fi
 case "$MENUVAR" in
  LOCKREM)
   #LOCKkeep='0'
   rm -f /mnt/${WKG_DEV}/${WKG_DIR}.lockdown.flg
   echo "${S028:-...you have chosen to restore normal bootup; however,}"
   echo "\\033[1;31m   ${S029:-normal bootup will be restored on the NEXT bootup}\\033[0;39m" #red
  ;;
  NOX)
   #delayed, see menu_delay_func...
   #mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}.session/root
   #touch /mnt/${WKG_DEV}/${WKG_DIR}.session/root/bootcnt.txt #see /root/.profile
   echo "${S030:-...will bootup to commandline, no X}"
  ;;
  RBSAVED)
   echo "${S031:-...will rollback to last saved session}"
  ;;
  RBPRISTINE)
   echo "${S032:-...will rollback to pristine first-boot}"
  ;;
  RBPREVVER) #20240512
   echo "${S450:-...will rollback to last snapshot of previous version}"
  ;;
  FSCHECK)
   echo "${S033:-...will perform filesystem check}"
  ;;
#  LOGZEUS) #20221030 20221102 remove
#   echo "...will flip login as user root or zeus"
#  ;;
 esac
 echo
}

#20220623 some choices in menu_func cannot be implemented until after pw entered.
menu_delay_func() {
 case "$MENUVAR" in
  NOX)
   mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}.session/root
   touch /mnt/${WKG_DEV}/${WKG_DIR}.session/root/bootcnt.txt #see /root/.profile
  ;;
  RBSAVED)
   echo -n ",last" > /mnt/${WKG_DEV}/${WKG_DIR}.rollback.flg #20230104
  ;;
  RBPRISTINE)
   echo -n ",erase" > /mnt/${WKG_DEV}/${WKG_DIR}.rollback.flg #20230104
  ;;
  RBPREVVER) #20240512 see also easy-version-control
   VERS="$(find /mnt/${WKG_DEV}/${WKG_DIR}releases -mindepth 1 -maxdepth 1 -type d -name 'easy-*' | rev | cut -f 1 -d '-' | rev)"
   revsortedVERS="$(echo "$VERS" | busybox sort -t. -k 1,1nr -k 2,2nr -k 3,3nr -k 4,4nr)" #highest to lowest.
   echo "${revsortedVERS}" > /revsortedVERS
   #this will return the next line after current version...
   backEASYver="$(grep -A 1 -F -x "${INIT_DISTRO_VERSION}" /revsortedVERS | grep -v -F -x "${INIT_DISTRO_VERSION}")"
   if [ -d /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${backEASYver} ];then
    #a catch, need the last snapshot, which is actually first in current version...
    backDATEver="$(date -r /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/rw-${INIT_DISTRO_VERSION}.sfs +%Y%m%d%H%M)" #ex: 202404261949
    if [ ! -e /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${backEASYver}/rw-${backDATEver}.sfs ];then
     cp -a -f /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/rw-${INIT_DISTRO_VERSION}.sfs /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${backEASYver}/rw-${backDATEver}.sfs
    fi
    KERNELNAME=vmlinuz
    [ -n "$INIT_DISTRO_KERNEL_NAME" ] && KERNELNAME="$INIT_DISTRO_KERNEL_NAME" #ex: rpi4: kernel8.img
    cp -a -f /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${backEASYver}/${KERNELNAME} /mnt/${WKG_DEV}/${WKG_DIR}
    cp -a -f /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${backEASYver}/initrd /mnt/${WKG_DEV}/${WKG_DIR} #200729 do not change this file.
    cp -a -f /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${backEASYver}/configuration-${backEASYver} /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${backEASYver}/configuration 2>/dev/null
    sync
    echo -n "${backEASYver},${backDATEver}" > /mnt/${WKG_DEV}/${WKG_DIR}.rollback.flg
   else #precaution.
    echo "\\033[1;31m ${S452:-ERROR there is no earlier version, cannot rollback.} \\033[0;39m" #red
   fi
  ;;
  FSCHECK)
   echo -n "${WKG_DEV},${WKG_FS},REQUEST" > /mnt/${WKG_DEV}/${WKG_DIR}.fsckme.flg #20220801
  ;;
#  LOGZEUS) #20221030 20221102 remove
#   xEOS_LOGIN_ZEUS="$(cat /mnt/${WKG_DEV}/${WKG_DIR}.loginzeus.flg 2>/dev/null)"
#   if [ "$xEOS_LOGIN_ZEUS" == "1" ];then
#    echo -n '0' > /mnt/${WKG_DEV}/${WKG_DIR}.loginzeus.flg
#    EOS_LOGIN_ZEUS=0
#    echo "  ...will login as root. This is remembered for future boots."
#   else
#    echo -n '1' > /mnt/${WKG_DEV}/${WKG_DIR}.loginzeus.flg
#    EOS_LOGIN_ZEUS=1
#    echo "  ...will login as zeus. This is remembered for future boots."
#   fi
#  ;;
 esac
}

ask_root_pw() { #20230405
 echo -en "\\033[1;31m" #red foreground.
 echo -n "${S300:-You chose not to enter a password to encrypt folders in the working-partition; however, you should, at least, enter a password for the root user.}${CR}${S301:-Note1: at future bootups, the password will not be required to login.}${CR}${S302:-Note2: if the keyboard does not work this early in bootup, there will be a timeout in 300 seconds.}${CR}${S303:-Please type a password, with characters a-z, A-Z, 0-9, minimum 6 characters, that you will remember.}" | fold -s -w 69
 echo -e "\\033[0;39m"
 rootPW=''
 while [ 1 ];do
  echo -n " ${S037:-Password:} " #'Password:'
  read -r -t 300 rootPW
  [ $? -ne 0 ] && echo #timed out
  if [ "$rootPW" != "" ];then
   xPW="$(echo -n "$rootPW" | sed -e 's%[^a-zA-Z0-9]%%g')"
   if [ "$rootPW" != "$xPW" ];then
    echo "\\033[1;31m ${S038:-Sorry, only a-z, A-Z, 0-9 characters allowed, try again} \\033[0;39m" #red text.
    continue
   fi
  fi
  break
 done
}

ask_pw() { #180604
 if [ "$1" == "0" ];then
  
  #20210424 want word-wrapped text block in background colour rectangle...
  echo -n -e '\033[1;;44m'
  while read aLINE
  do
   echo -n '                                                                    '
   echo -n -e '\033[1G' #move cursor back to col 1.
   echo " ${aLINE}"
  done << EOT
$(echo "${S034:-Please enter a password, any characters a-z, A-Z, 0-9, any length. The password will encrypt parts of the working-partition, and must be remembered, as it will have to be entered at every bootup.}" | fold -s -w 69)
$(echo " ${S035:-Or, just press ENTER key for no password.}")
EOT
  echo -n -e '\033[0;;m'
  echo -e " \\033[1;31m${S036:-For your security, a password is recommended}\\033[0;39m" #35=purple, 31=red 20220528
  while [ 1 ];do #181109
   echo -n " ${S037:-Password:} "
   read -r -t 300 PW
   [ $? -ne 0 ] && echo #timed out
   if [ "$PW" != "" ];then
    xPW="$(echo -n "$PW" | sed -e 's%[^a-zA-Z0-9]%%g')"
    if [ "$PW" != "$xPW" ];then
     echo "\\033[1;31m ${S038:-Sorry, only a-z, A-Z, 0-9 characters allowed, try again} \\033[0;39m" #red text.
     continue
    fi
   fi
   break
  done
#  if [ ! "$PW" ];then
#   PW="$(< /dev/urandom tr -dc 'a-zA-Z0-9' | head -c10)"
#   echo " The auto-generated password is: ${PW}"
#   echo " Pausing for 60 seconds, please write it down now!!!!"
#   sleep 60
#  fi
 else
  #20220622 no longer have menu choices in the boot-manager, so offer some choices here...
  while [ 1 ];do
   echo -e "\\e[1;;44m ${S039:-Please enter password to decrypt the working-partition} \\e[0;;m" #
   echo -e "\\e[1;;43m ${S040:-OR just press ENTER to bring up a menu of boot options} \\e[0;;m" #43=yellow background.
   echo -n " ${S041:-Password:} "
   #read PW
   PW=''
   while [ 1 ];do #echo * for each char entered...
    read -r -s -n1 pw1
    if [[ -z $pw1 ]];then
     echo; break
    else
     echo -n '*'; PW="${PW}${pw1}"
    fi
   done
   if [ "$PW" == "" ];then
    menu_func
    continue
   fi
   break
  done
 fi
 
 return 0 #190713
}

#load_font() {  #20230522 no longer used.
# #2-char keymap is passed in
# case "$1" in
#  az|be|br|by|cr|de|dk|es|fi|fr|gr|hu|it|nl|no|pt|ro|ru|se|sk|sl) #all european languages
#   loadfont < /lib/consolefonts/LatGrkCyr-8x16.psfu
#  ;;
#  il) #arabic, hebrew. il=israel
#   loadfont < /lib/consolefonts/LatArCyrHeb-16.psfu
#  ;;
# esac 
#}

##20230113 load font based on the 2-letter country code...
#load_font_country() {  #20230522 no longer used.
# case "$1" in
#  az|be|br|by|cr|de|dk|es|fi|fr|gr|hu|it|nl|no|pt|ro|ru|se|sk|sl)
#   #all european languages
#   loadfont < /lib/consolefonts/LatGrkCyr-8x16.psfu
#  ;;
#  il|dz|bh|td|km|dj|eg|iq|jo|kw|lb|ly|mr|ma|om|qa|sa|so|sd|sy|tn|ae|ye)
#   #arabic, hebrew. il=israel arab countries: dz bh td km dj eg iq jo kw lb ly mr ma om qa sa so sd sy tn ae ye
#   loadfont < /lib/consolefonts/LatArCyrHeb-16.psfu
#  ;;
# esac
#}

###temporary mount easy.sfs###20230123
mount_tnew() {
 mkdir tro trw tnew
 mount -t squashfs -o loop,noatime /mnt/${WKG_DEV}/${WKG_DIR}easy.sfs tro
 [ $? -ne 0 ] && err_exit "FAILED: mount -t squashfs -o loop,noatime /mnt/${WKG_DEV}/${WKG_DIR}easy.sfs tro"
 if [ "$LAYERFS" == "aufs" ];then
  mount -t aufs -o br=trw=rw:tro=ro aufs tnew
  [ $? -ne 0 ] && err_exit "FAILED: mount -t aufs -o br=trw=rw:sro=ro aufs tnew"
 else
  mkdir twork
  mount -t overlay -o lowerdir=tro,upperdir=trw,workdir=twork overlay tnew
  [ $? -ne 0 ] && err_exit "FAILED: mount -t overlay -o lowerdir=tro,upperdir=trw,workdir=twork overlay tnew"
 fi
 mount -o bind /dev tnew/dev
 mount -o bind /proc tnew/proc
 cp -a /etc/mtab tnew/etc/
 mkdir -p tnew/dev/pts
 mount -t devpts devpts tnew/dev/pts #need this to run xterm.
 #configure so can run X...
 cp -a -f tnew/etc/X11/xorg.conf.d/10-evdev-puppy.conf / #coz need it later.
 rm -f tnew/etc/X11/xorg.conf.d/*
 rm -f tnew/usr/share/X11/xorg.conf.d/* 2>/dev/null
 rm -f tnew/etc/X11/Xsession.d/*
 cp -f /xorg.conf tnew/etc/X11/
 cp -f ask-country-x tnew/
 cp -f ask-pw-x tnew/
 cp -f startx tnew/
 cp -f xinitrc tnew/
 cp -f logo800x600.png tnew/       #20230124
 cp -f logo1920x1440.png tnew/     # "
 cp -f tnew/root/.gtkrc-2.0 tnew/  # "
 if [ -d tnew/usr/lib/xorg-fb ];then #alternative xorg runs on framebuffer.
  rm -rf tnew/usr/lib/xorg/modules
  cp -a -f tnew/usr/lib/xorg-fb/modules tnew/usr/lib/xorg/
  cp -a -f tnew/usr/lib/xorg-fb/Xorg tnew/usr/lib/xorg/
  cp -a -f tnew/usr/lib/xorg-fb/Xorg tnew/usr/bin/
 fi
 sed -e 's%^DISTRO_%INIT_DISTRO_%' tnew/etc/DISTRO_SPECS > /INIT_DISTRO_SPECS
. /INIT_DISTRO_SPECS
}

#190828 try to recover if cp fails...
cp_verify_func() {
 #passed params: source destination
 fsync ${2}
 cmp -s ${1} ${2}
 if [ $? -ne 0 ];then
  echo -e "\\033[1;31m${S042:-This copy failed:}\\033[0;39m" #red
  echo "  cp ${1} ${2}"
  echo "  ${S043:-It is possible that the drive is failing.}"
  echo "  ${S044:-Attempting to copy again...}"
  rm -f ${2} 2>/dev/null
  cp -a -f ${1} ${2}
  fsync ${2}
  cmp -s ${1} ${2}
  if [ $? -ne 0 ];then
   if [ "$prevVER" ];then
    echo "  ${S045:-Second attempt failed. Attempt recovery by restoring}"
    echo "  ${S046:-vmlinuz, initrd and easy.sfs of previous version.}"
   fi
   err_exit "${S047:-Second attempt to copy file failed. Maybe drive is failing.}"
  else
   echo "  ${S048:-Second attempt succeeded, but warning drive might be failing.}"
  fi
 fi
}

#20220622 taken out as a func, as call from two places...
mnt_wkg_ext4_func() {
 #rw,relatime,data=ordered are the defaults anyway...  20220304 commit=30 to 1800... 20220522 revert
 if [ $EOS_TOP_LEVEL_ZRAM -eq 1 ];then #20220527
  mount -t ${WKG_FS} -o commit=30,rw,noatime,data=ordered /dev/${WKG_DEV} /mnt/${WKG_DEV} 2>/dev/null
 else
  mount -t ${WKG_FS} -o commit=30,rw,relatime,data=ordered /dev/${WKG_DEV} /mnt/${WKG_DEV} 2>/dev/null
 fi
 RET=$? #200715 it was going to err_exit, need this $RET...
 if [ $RET -ne 0 ];then
  if [ $EOS_TOP_LEVEL_ZRAM -eq 1 ];then #20220527
   mount -t ${WKG_FS} -o noatime /dev/${WKG_DEV} /mnt/${WKG_DEV} #200624 fallback if no journal
  else
   mount -t ${WKG_FS} /dev/${WKG_DEV} /mnt/${WKG_DEV} #200624 fallback if no journal
  fi
  RET=$?
 fi
 return $RET
}

#20230112
if [ "$qlang" ];then
 QLANG="$qlang"
fi
. /nls/en/init.str #20230210 20230211
if [ "$QLANG" ];then
 if [ -e /nls/${QLANG}/init.str -a "$QLANG" != "en" ];then
. /nls/${QLANG}/init.str
  export QLANG
  #load_font_country ${QLANG} #20230113  20230522
 fi
fi

#190307 display logo, -f = reduces to fit screen. 20220929
#20221118 playing with new logo... 20230119... 20230124...
fbX='800'
if [ -e /dev/fb0 ];then
 if [ -s /sys/class/graphics/fb0/virtual_size ];then
  fbRES="$(cat /sys/class/graphics/fb0/virtual_size)"
  fbX="${fbRES/,*/}"
 fi
 idump -f logo1920x1440.png 2>/dev/null
 #idump -f logo1920x1080.png 2>/dev/null #20230302
 [ $? -ne 0 ] && rm -f /dev/fb0 #190313
else
 clear #20220206 no logo, just clear the screen.
fi
export fbX #want in tnew

#optional WKG_DEV passed in as kernel boot param...
[ "$wkg_dev" ] && WKG_DEV="$wkg_dev" #ex: zram0
#also allow override WKG_DIR...
[ "$wkg_dir" ] && zWKG_DIR="$wkg_dir"
[ "$WKG_DIR" ] && zWKG_DIR="$WKG_DIR"
#190710 also WKG_UUID, WKG_LABEL...
[ "$wkg_uuid" ] && zWKG_UUID="$wkg_uuid"
[ "$WKG_UUID" ] && zWKG_UUID="$WKG_UUID"
[ "$wkg_label" ] && zWKG_LABEL="$wkg_label"
[ "$WKG_LABEL" ] && zWKG_LABEL="$WKG_LABEL"

[ "$zWKG_DIR" ] && [ "${zWKG_DIR##*/}" ] && zWKG_DIR="${zWKG_DIR}/" #must have trailing slash.

# ...optional/alternative WKG_LABEL
#190706 set to something if not defined...
[ ! "$WKG_UUID" ] && WKG_UUID='wkguuidunknown'
[ ! "$WKG_LABEL" ] && WKG_LABEL='wkglabelunknown'
#kernel boot parameter overrides...
[ "$zWKG_DIR" ] && WKG_DIR="$zWKG_DIR"
[ "$zWKG_UUID" ] && WKG_UUID="$zWKG_UUID" && WKG_DEV="" && WKG_LABEL=""
[ "$zWKG_LABEL" ] && WKG_LABEL="$zWKG_LABEL" && WKG_DEV="" && WKG_UUID=""

export LANG=C

#170206 reintroducing aufs in the kernel:
if grep -qw aufs /proc/filesystems; then
 LAYERFS='aufs'
 RO='=ro'
else
 LAYERFS='overlay'
 RO=''
fi

SALT="aprilandvincent" #190308 previously used $WKG_DISKID

#now have DISTRO_SPECS in initrd... 20220615  20220629 moved up.
[ ! -f /etc/DISTRO_SPECS ] && err_exit "/etc/DISTRO_SPECS is missing from initrd"
sed -e 's%^DISTRO_%INIT_DISTRO_%' /etc/DISTRO_SPECS > /INIT_DISTRO_SPECS
. /INIT_DISTRO_SPECS

#20230304 support names other than "EasyOS" and "Easy", see DISTRO_SPECS
if [ ! "$INIT_DISTRO_NAME_LONG" ];then
 INIT_DISTRO_NAME_LONG="$INIT_DISTRO_NAME"
else
 INIT_DISTRO_NAME="$INIT_DISTRO_NAME_LONG" #coz deprecated in DISTRO_SPECS
fi
if [ ! "$INIT_DISTRO_NAME_NORMAL" ];then
 INIT_DISTRO_NAME_NORMAL='EasyOS'
fi
if [ ! "$INIT_DISTRO_NAME_SHORT" ];then
 INIT_DISTRO_NAME_SHORT='Easy'
fi

###display info### #20220629 20230304
loadfont < /lib/consolefonts/zap-ext-vga16.psfu #20230522
echo -n -e "\\033[1;32m${INIT_DISTRO_NAME_LONG}, version ${INIT_DISTRO_VERSION}\\033[0;39m\n" #bright green
echo

###find drives###
#find the drive we are booting on (has vmlinuz, initrd, easy.sfs), and working drv...
#180601 users may forget to put a trailing slash... a leading slash is not allowed...
[ "$WKG_DIR" ] && [ "${WKG_DIR##*/}" ] && WKG_DIR="${WKG_DIR}/"
[ "$WKG_DIR" ] && [ "${WKG_DIR:0:1}" == "/" ] && WKG_DIR="${WKG_DIR:1:99}"

echo -n -e "\\033[1;35m${S100:-Finding drives}\\033[0;39m\n " #purple
CNT=0; Pb=0; Pw=0
[ "$WKG_LABEL" == "EASYOSZRAM" ] && WKG_DEV="zram0" #190706 200822
[ -e /dev/scd0 ] && rm -f /dev/scd* #190706 static dev nodes, these duplicate sr* nodes.
while [ $CNT -lt 20 ];do #drives may take couple seconds to become available. 180415 increase 8 to 20.
 sleep 1
 echo -n '.'
 CNT=$(($CNT+1))
 #190718 iso written to usb-stick has (ex:) /dev/sdd and dev/sdd1 both LABEL="EASYOSOPTICAL", filter-out former...
 BLKIDS="$(blkid | grep -v '[a-z]: ')"
 #ex line: /dev/sda2: LABEL="intern1p2" UUID="cd5ef69b-883d-4744-bc1d-551154131db2" TYPE="ext4"
 [ ! "$WKG_DEV" ] && WKG_DEV="$(echo "${BLKIDS}" | grep -E "\"${WKG_UUID}\"|\"${WKG_LABEL}\"" | cut -f 1 -d ':' | cut -f 3 -d '/')"
 [ "$WKG_DEV" ] && break
done
[ ! "$WKG_DEV" ] && WKG_DEV="zram0" #190714

#20250206 if WKG_UUID not on kernel cmdline (it is WKG_LABEL) then get it...
if [ "$WKG_UUID" == "wkguuidunknown" ];then
 yWKG_UUID="$(echo "$BLKIDS" | grep "^/dev/${WKG_DEV}:" | grep -o ' UUID="[^"]*' | cut -f 2 -d '"')"
 if [ -n "$yWKG_UUID" ];then WKG_UUID="$yWKG_UUID"; fi
fi
echo -n "${WKG_UUID}" > /WKG_UUID

Wdevs=$(echo -n "$WKG_DEV" | tr '\n' ' ' | wc -w) #precaution.
[ $Wdevs -gt 1 ] && err_exit "${Wdevs} ${S101:-partitions have conflicting id} ${WKG_UUID} ${WKG_LABEL}"

#20201223 only allow drop CAP_SYS_ADMIN if have CAP_SYS_MOUNT patch and kernel >=5.10
CSAdrop=0
capsh --supports=cap_sys_mount 2>/dev/null #20201213
if [ $? -eq 0 ];then #kernel has cap_sys_mount separated from cap_sys_admin
 if vercmp $KERNVER ge 5.10 ;then #20210524
  CSAdrop=1
 fi
fi

#190817 parsing QFIX moved up, also repeated further down...
#ref: http://man7.org/linux/man-pages/man7/capabilities.7.html
CAPS_DROP='' #190812
xWKG_DEV='' #190817 200719 comment-out. 200727 restore.
DROPOUT='' #200801
LOCKDOWN='' #200803
NORMAL=0 #200809
BROKENVID=0 #20211014
ZRAMTL='' #20220603 override EOS_TOP_LEVEL_ZRAM
[ "$qfix" ] && QFIX=$qfix #kernel boot param
if [ "$QFIX" ];then
 for ONEFIX in `echo -n "$QFIX" | tr ',' ' '`
 do
  case $ONEFIX in
   #cap1|CAP1) CAPS_DROP='cap_sys_mount,cap_dac_override,cap_chown,cap_fowner,cap_mknod,cap_setfcap,cap_setpcap' ;; #190812
   #cap2|CAP2) CAPS_DROP='cap_sys_mount,cap_dac_override,cap_chown,cap_fowner,cap_mknod,cap_setfcap,cap_setpcap'; xWKG_DEV='zram0' ;; #190817 copy to ram
   #cap1|CAP1) CAPS_DROP='cap_sys_mount,cap_mknod' ;; #190812 190818
   #cap2|CAP2) CAPS_DROP='cap_sys_mount,cap_mknod'; xWKG_DEV='zram0' ;; #190817 copy to ram. 190818
   cap2|CAP2) CAPS_DROP='cap_mknod'; xWKG_DEV='zram0'; LOCKDOWN='2' ;; #190818 200803 deprecated.
   lock*|LOCK*) LOCKDOWN="${ONEFIX:4:1}" ;; #200803 extract the number. note, "cap2" is deprecated.
   dropout*|DROPOUT*) DROPOUT="${ONEFIX:7:1}" ;; #200801 extract the number
   normal|NORMAL) NORMAL=1 ;; #200809 to remove permanent lockdown.
   vid|VID) BROKENVID=1 ;; #20211014
   zramtl*|ZRAMTL*) ZRAMTL=${ONEFIX:6:1} #20220603 zramtl0 disable, zramtl1 enable.
  esac
 done
fi
case "$LOCKDOWN" in #200803 note, see also .lockdown.flg further down script.
 1) xWKG_DEV='zram0' ;;   #"Copy session to RAM, unmount partitions"
 2) #"Copy session to RAM, disable drives"
  if [ $CSAdrop -eq 1 ];then
   CAPS_DROP='cap_mknod,cap_sys_admin'
  else
   CAPS_DROP='cap_mknod'
  fi
  xWKG_DEV='zram0'
 ;;
esac
if [ "$LOCKDOWN" ];then #190901 200803
 LOCKkeep='0' #200805 once-only
 #cannot do this at first bootup, as not yet a session to copy to ram.
 #20220123 may have a bigger 2nd partition...  20220511 2nd partition may be smaller, 4MB...
 WKGSIZEflg="$(fdisk -l /dev/${WKG_DEV} | grep -oE ' 640 MB| 640 MiB| 4 MB| 4 MiB')" #200319 full fdisk "640 MiB"
 if [ "$WKGSIZEflg" ];then
  echo -e "\\033[1;31m${S102:-NOTICE: NO! You do not yet have a session, doing a normal bootup}\\033[0;39m" #red
  CAPS_DROP=''
  xWKG_DEV=''
  LOCKDOWN='' #200803
 fi
fi
if [ "$ZRAMTL" ];then #20220603
 EOS_TOP_LEVEL_ZRAM=${ZRAMTL} #override.
fi

[ "$DROPOUT" == "0" ] && exit_to_initrd " ${S103:-Exited from init script early, nothing yet mounted.}" #200801

###check if user has requested lockdown###
#200803 ref: /usr/sbin/lockdown-ram
#200806 .lockdown.flg cannot be in .session folder, put into boot-part... 20220621 wkg-part...
touch /TRIMwkg; touch /TRIMnotwkg #20250206
mkdir -p /mnt/${WKG_DEV}
WKG_FS="$(echo "$BLKIDS" | grep "^/dev/${WKG_DEV}:" | grep -o 'TYPE="[a-z0-9]*"' | cut -f 2 -d '"')" #200803 moved up.
if [ "$LOCKDOWN" == "" -o "$DROPOUT" == "" ];then
 #temporarily mount WKG_DEV...
 if grep -q 'ntfs3' /proc/filesystems;then #20210611 has paragon ntfs3 driver.
  mount -t ${WKG_FS/ntfs/ntfs3} /dev/${WKG_DEV} /mnt/${WKG_DEV}
 else
  mount -t ${WKG_FS} /dev/${WKG_DEV} /mnt/${WKG_DEV}
 fi
 if [ $? -eq 0 ];then
  [ $NORMAL -eq 1 ] && rm -f /mnt/${WKG_DEV}/${WKG_DIR}.lockdown.flg 2>/dev/null #200809
  if [ "$LOCKDOWN" == "" ];then #that is, not done at kernel boot param.
   if [ -s /mnt/${WKG_DEV}/${WKG_DIR}.lockdown.flg ];then
    grep -q '^lock[0-9]:[0-9]' /mnt/${WKG_DEV}/${WKG_DIR}.lockdown.flg
    if [ $? -eq 0 ];then
     #.lockdown.flg has "lock[1|2]:[0|1]" -- :0 once-only, :1 permanent
     LOCKspecs="$(cat /mnt/${WKG_DEV}/${WKG_DIR}.lockdown.flg)"
     LOCKkeep="${LOCKspecs:6:1}"
     LOCKDOWN="${LOCKspecs:4:1}"
     case "$LOCKDOWN" in #200803 note, see above, kernel param "qfix=lock[1|2]"
      1) xWKG_DEV='zram0' ;;        #"Copy session to RAM, unmount partitions"
      2) #"Copy session to RAM, disable drives"
       if [ $CSAdrop -eq 1 ];then
        CAPS_DROP='cap_mknod,cap_sys_admin'
       else
        CAPS_DROP='cap_mknod'
       fi
       xWKG_DEV='zram0'
      ;;
     esac
     if [ "$LOCKkeep" != "1" ];then
      rm -f /mnt/${WKG_DEV}/${WKG_DIR}.lockdown.flg
      sync
     fi
    fi
   fi
  fi
  if [ "$DROPOUT" == "" ];then #that is, not a kernel boot param
   #200802 ref: /usr/sbin/debug-initrd  200806 .debug.flg also in boot-part... 20220621 wkg-part...
   if [ -s /mnt/${WKG_DEV}/${WKG_DIR}.debug.flg ];then
    grep -q '^dropout' /mnt/${WKG_DEV}/${WKG_DIR}.debug.flg
    if [ $? -eq 0 ];then
     DROPOUT="$(cat /mnt/${WKG_DEV}/${WKG_DIR}.debug.flg)"
     DROPOUT="${DROPOUT:7:1}"
     rm -f /mnt/${WKG_DEV}/${WKG_DIR}.debug.flg
     sync
    fi
   fi
  fi
  if [ "$ZRAMTL" == "" ];then #20220603 that is, not a kernel param. 20220621 now in wkg-part...
   if [ -s /mnt/${WKG_DEV}/${WKG_DIR}.zramtl.flg ];then
    EOS_TOP_LEVEL_ZRAM=$(cat /mnt/${WKG_DEV}/${WKG_DIR}.zramtl.flg) #1 or 0
   fi
  fi
  
  #20230113 choose language 2-letter code... 20230123
  if [ ! "$QLANG" ];then #set if kernel param.
   if [ ! -f /mnt/${WKG_DEV}/${WKG_DIR}.qlang ];then
    #ask language code...
    EXIT='bad'
    #20230221 abandon gtk ask-country-x ...
    #if [ -e /dev/fb0 ];then
    # mount_tnew #aufs temporary mount easy.sfs
    # #cp -f tnew/root/.packages/build-choices build-choices #20230210 used in /sbin/ask-language 20230220
    # chroot tnew /bin/busybox ash -c "/startx ask-country-x"
    # touch tnew/RETASKCOUNTRY
    # if grep -q '^EXIT="OK"' tnew/RETASKCOUNTRY; then
    #  KEYMAP="$(grep '^COMBO_KEYBOARD.*' tnew/RETASKCOUNTRY | cut -f 2 -d '"' | cut -f 1 -d ' ')" #ex: de
    #  BASELANG="$(grep '^COMBO_LOCALE.*' tnew/RETASKCOUNTRY | cut -f 2 -d '"' | cut -f 1 -d ' ')" #ex: de_DE
    #  BASELANG="${BASELANG/@*/}" #@euro chopped.
    #  QLANG="${BASELANG/_*/}"
    #  EXIT='OK'
    # fi
    # #umount temporary easy.sfs
    # sync
    # umount tnew/dev/pts
    # umount tnew/proc
    # umount tnew/dev
    # umount tnew
    # umount tro
    #fi
    #if [ "$EXIT" != "OK" ];then #fallback...
     /sbin/ask-language #currently using dialog so don't need /dev/fb0
     QLANG="$(cat /qlang)"        #ex: fr
     BASELANG="$(cat /DEFLANG12)" #ex: fr_FR
    #fi
    echo -n "$QLANG" > /mnt/${WKG_DEV}/${WKG_DIR}.qlang
   else
    QLANG="$(cat /mnt/${WKG_DEV}/${WKG_DIR}.qlang)"
   fi
   if [ -e /nls/${QLANG}/init.str -a "$QLANG" != "en" ];then #20230110
.   /nls/${QLANG}/init.str
    #load_font_country ${QLANG}  #20230522
   fi
   export QLANG
  fi

  #20250206 further down this script test if drive support trim.
  #gets saved this file so don't have to test again...
  #file .trim-wkg has f.s. uuids in drives that support trim...
  if [ -s /mnt/${WKG_DEV}/${WKG_DIR}.trim-wkg ];then
   cp -f /mnt/${WKG_DEV}/${WKG_DIR}.trim-wkg /TRIMwkg
  fi
  if [ -s /mnt/${WKG_DEV}/${WKG_DIR}.trim-not-wkg ];then
   cp -f /mnt/${WKG_DEV}/${WKG_DIR}.trim-not-wkg /TRIMnotwkg
  fi
  
  sync
  umount /mnt/${WKG_DEV}
 fi
fi

###very low ram###
#20220802 top-level-zram doesn't work properly if not enough ram
FREEK=`grep '^MemFree:' /proc/meminfo | tr -s ' ' | cut -f 2 -d ' '`
if [ $FREEK -lt 1200000 ];then #1.2GB
 EOS_TOP_LEVEL_ZRAM=0
fi
#also disable lockdown...
if [ "$LOCKDOWN" ];then
 if [ $FREEK -lt 3700000 ];then #3.7GB
  echo -e "\\033[1;31m${S110:-NOTICE: Lockdown disabled, insufficient RAM}\\033[0;39m" #red
  LOCKDOWN=''
  xWKG_DEV=''
  CAPS_DROP=''
  #keep this, in case usb-stick boots on another pc...
  #rm -f /mnt/${WKG_DEV}/${WKG_DIR}.lockdown.flg 2>/dev/null
 fi
fi

#20220526 hope no conflict
if [ "$LOCKDOWN" ];then
 #disable the extra zram1 top layer...
 EOS_TOP_LEVEL_ZRAM=0
fi

if [ "$WKG_DEV" == "zram0" -o "$xWKG_DEV" == "zram0" ];then #190706 190817
 echo ''
 if [ "$WKG_DEV" == "zram0" ];then
  echo -e "\\033[1;31m${S111:-NOTICE: EasyOS will run totally in RAM, no persistent storage}\\033[0;39m" #red
  WKG_DRV='zram0'
  WKG_FS='ext2'
 else
  echo -e "\\033[1;31m${S112:-NOTICE: The session will be copied to RAM and EasyOS will run in RAM}\\033[0;39m" #red
 fi
 xWKG_FS='ext2'
 #allocate 3/4 of free ram times 2 (as compression is approx 2:1)...
 HALFK=$(($FREEK/2))
 QTRK=$(($HALFK/2))
 USEK=$(($HALFK+$QTRK)) #3/4
 ALLOCK=$(($USEK*2))
 echo "  ${S113:-Creating compressed zram. RAM allocated:} ${USEK}K"
 echo "${ALLOCK}K" > /sys/block/zram0/disksize
 echo "${USEK}K" > /sys/block/zram0/mem_limit
 busybox mke2fs -L "EASYOSZRAM" -m 0 -b 4096 /dev/zram0 > /dev/null #20201130 make sure block size is 4096!
 #...has to be ext2, so won't ask for password etc.
fi
if [ "$WKG_DEV" != "zram0" ];then #190817
 WKG_PARTNUM="${WKG_DEV/*[a-z]/}"
 #WKG_DRV="${WKG_DEV%%[^a-z][0-9]*}"
 WKG_DRV="${WKG_DEV%[0-9]}"
 WKG_DRV="${WKG_DRV%[0-9]}"
 [ "${WKG_DRV:0:3}" == "mmc" ] && Pw=1
 [ "${WKG_DRV:0:3}" == "nvm" ] && Pw=1
 [ $Pw -eq 1 ] && WKG_DRV="${WKG_DRV%p}"
 WKG_FS="$(echo "$BLKIDS" | grep "^/dev/${WKG_DEV}:" | grep -o 'TYPE="[a-z0-9]*"' | cut -f 2 -d '"')" #200803 moved up.
fi
#coz later on, $WKG_DEV may get changed to zram0...
origWKG_DEV="$WKG_DEV"
origWKG_FS="$WKG_FS"
origWKG_UUID="$WKG_UUID" #200809
origWKG_DIR="$WKG_DIR"   #200822

export WKG_FS

#20210526 think what needed to allow save-file instead of save-folder...
# WKG_FS=ntfs: kernel >= 5.10.39 has paragon ntfs3 driver,
# WKG_FS must support sparse files. yes: ntfs ext2/3/4 f2fs reaiserfs xfs zfs btrfs squashfs  no: exfat fat16/32 iso9660
SFchk=0
case "$WKG_FS" in
 ntfs) #20210530 restrict to ntfs only, due to performance hit.
 #ext*|reiser*|f2fs|ntfs*|xfs|zfs|btrfs)
  SFchk=1
 ;;
esac

echo -e "\n  ${S114:-Working-partition:} ${WKG_DEV}"

###performance measurements###
FREEK=`grep '^MemFree:' /proc/meminfo | tr -s ' ' | cut -f 2 -d ' '` #free RAM
#echo 3 > /proc/sys/vm/drop_caches #clear memory caches. note, could use "hdparm -t ..." but it is slower.
#20220801 dd in coreutils has different output, "s" instead of "seconds"...
if [ "$WKG_DEV" == "zram0" ];then #190706 20220527 change 1048576 (1MiB) to 536870912 (512MiB)  20220621 1610612736 (1.5GiB)
 TIMEs="$(dd if=/dev/zram0 of=/dev/null bs=1024 count=64 iflag=skip_bytes skip=1610612736 2>&1 | grep -o '[0-9.]* [second]*s,' | cut -f 1 -d ' ')" #read speed.
else
 TIMEs="$(dd if=/dev/${WKG_DRV} of=/dev/null bs=1024 count=64 iflag=skip_bytes skip=1610612736 2>&1 | grep -o '[0-9.]* [second]*s,' | cut -f 1 -d ' ')" #read speed.
 #...sata hdd: 0.018864, usb3.0 ssd: 0.003258, pcie nvme ssd: 0.001403, cheap emtec usb2 flash stick: 0.013006, sandisk ultra usb3.0 flash stick: 0.004393, usb3.0 hdd: 0.035629
fi
TIME10k=$(dc -e"${TIMEs} 10000 * p" | cut -f 1 -d '.') #cheap flash stick: usb2=140 usb3=77, be usb3=41, sandisk-extreme usb3=42, internal eMMC: 
echo "${S115:-Working drive read speed test (lower the better):} ${TIME10k}"

###execute TRIM on ssd###
TRIMflg=''; yTRIMflg=''
if [ "$WKG_FS" == "ext4" ];then #200302  200621 now have full hdparm.
 #20250206 see if already tested...
 if grep -q "$WKG_UUID" /TRIMwkg;then yTRIMflg=1; fi
 if grep -q "$WKG_UUID" /TRIMnotwkg;then yTRIMflg=0; fi
 
 #HDDflg="$(cat /sys/block/${WKG_DRV}/queue/rotational)" #20220612
 #20220526 hdparm only works on sata drives...
 #if [ "$HDDflg" != "0" ];then #0 it is an SSD
 # #20220522 bugger, the kernel gets it right for internal nvme ssd, wrong for usb flash...
 # hdparm -I /dev/${WKG_DRV} | grep -q 'Solid State Device'
 # [ $? -eq 0 ] && HDDflg="0"
 #fi
 #if [ "$HDDflg" == "0" ];then #0 it is an SSD
 # #unfortunately, busybox hdparm will only read ata drives, not usb...
 # TRIMflg="$(hdparm -I /dev/${WKG_DRV} 2>/dev/null | grep -o 'TRIM' | head -n 1)"
 # #run 'fstrim' after $WKG_DEV mounted, every 20th bootup...
 #fi
 #20250127 discard_granularity not work 6.12.x kernel...
 #TESTdiscard="$(cat /sys/block/${WKG_DRV}/queue/discard_granularity 2>/dev/null)"
 TESTdiscard="$(cat /sys/block/${WKG_DRV}/queue/discard_max_bytes 2>/dev/null)"
 if [ -n "$TESTdiscard" ];then
  if [ "$TESTdiscard" != "0" ];then
   TRIMflg='1'
  fi
 fi
 #20250128 hdparm detect and CONFIG_USB_UAS kernel now maybe can run fstrim...
 if [ "$TESTdiscard" == "0" ];then
  #20250206 restrict further probe to usb drives...
  readlink /sys/block/${WKG_DRV} | grep -q '/usb[0-9]'
  if [ $? -eq 0 ];then
   #20250206 avoid running hdparm and/or sg_vpd every bootup...
   if [ -z "$yTRIMflg" ];then
    hdparm -I /dev/${WKG_DRV} 2>/dev/null | grep -qF 'Data Set Management TRIM supported'
    RET1=$?
    if [ $RET1 -ne 0 ];then
     #for nvme ssd in usb caddy, this is a fallback test...
     sg_vpd -p bl /dev/${WKG_DRV} | grep -q 'Maximum unmap LBA count: 0x[^0]'
     if [ $? -eq 0 ];then
      sg_vpd -p lbpv /dev/${WKG_DRV} | grep -qF 'LBPU=1'
      RET1=$?
     fi
    fi
   elif [ "$yTRIMflg" == "1" ];then
    RET1=0
   else
    RET1=1
   fi
   if [ $RET1 -eq 0 ];then
    #fstrim may still not work, depends if usb interface supports usb-attached-scsi
    #ref: https://askubuntu.com/questions/860618/fstrim-on-external-ssd-drives-dont-work
    #ref: https://www.jeffgeerling.com/blog/2020/enabling-trim-on-external-ssd-on-raspberry-pi
    #this matches scsi number to drive:
    T1="$(ls -d -1 /sys/bus/scsi/drivers/sd/*/block/${WKG_DRV} | head -n 1)"
    #ex: /sys/bus/scsi/drivers/sd/6:0:0:0/block/sdb
    if [ -n "$T1" ];then
     T2="$(echo -n "$T1" | rev | cut -f 3 -d '/' | rev)" #ex: 6:0:0:0
     T3="$(find /sys/devices/ -path "*/scsi_disk/${T2}/*" -name provisioning_mode)"
     #ex: /sys/devices/pci0000:00/0000:00:14.0/usb2/2-4/2-4:1.0/host6/target6:0:0/6:0:0:0/scsi_disk/6:0:0:0/provisioning_mode
     if [ -n "$T3" ];then
      T4="$(cat "$T3")"
      if [ "$T4" == "full" ];then
       echo unmap > $T3
       #ex: this changes /sys/block/sdb/queue/discard_max_bytes from 0 to 4294966784
      fi
      #test again...
      sleep 0.01
      TESTdiscard="$(cat /sys/block/${WKG_DRV}/queue/discard_max_bytes 2>/dev/null)"
      if [ "$TESTdiscard" != "0" ];then
       TRIMflg='1'
      fi
     fi
    fi
   fi
  fi
 fi
 #20250206
 if [ "$TRIMflg" == "1" ];then
  grep -qF "${WKG_UUID}" /TRIMwkg
  if [ $? -ne 0 ];then
   echo "$WKG_UUID" >> /TRIMwkg
  fi
 else
  grep -qF "${WKG_UUID}" /TRIMnotwkg
  if [ $? -ne 0 ];then
   echo "$WKG_UUID" >> /TRIMnotwkg
  fi
 fi
fi
export TRIMflg #read in /sbin/fscheck

###setup and mount working partition###
PW=''; ALLOW_ASK_PW=''; Bmntd=0; Tmntd=0 #20220517

#maybe resize working partition to fill drive... hmmm, /proc/partitions not working...
#Wsize=$(grep ' ${WKG_DEV}$' /proc/partitions | tr -s ' ' | rev | cut -f 2 -d ' ' | rev)
Wsize="$(fdisk -u -l /dev/${WKG_DRV} | grep "^/dev/${WKG_DEV} " | tr -s ' ' | rev | cut -f 3 -d ' ' | rev)"
#20220621 new skeleton 7MiB 1st, 816MiB 2nd, Wstart=16384
#20220911 for easy bookworm, bumped wkg-part to 848MiB. 20221226 kirkstone 672MiB
#20240113 easyvoid, skeleton wkg-part now 920MiB. 20240116 now 880MiB 20240612 896MiB  20240712 912MiB  20240715 944MiB  20240920 992miB
if [ "$Wsize" == "912M" -o "$Wsize" == "944M" -o "$Wsize" == "896M" -o "$Wsize" == "992M" ];then #current skeleton.
 #starting sector of wkg partition...
 Wstart="$(fdisk -u -l /dev/${WKG_DRV} | grep "^/dev/${WKG_DEV} " | tr -s ' ' | rev | cut -f 6 -d ' ' | rev)"
 #need to be paranoid here, to get this right, restrict to my skeletons...
 if [ "$Wstart" == "16384" ];then
  #this has to be done with all partitions in WKG_DRV unmounted...
  echo -n -e "\\033[1;35m${S120:-Resizing working-partition to fill drive}\\033[0;39m\n " #purple
  echo -e "d\n${WKG_PARTNUM}\nn\np\n${WKG_PARTNUM}\n${Wstart}\n\nw" | fdisk -u /dev/${WKG_DRV} > /dev/null 2>&1
  #fdisk should have informed kernel to rescan partition table, however precaution...
  partprobe /dev/${WKG_DRV}
  Wnewsize="$(fdisk -u -l /dev/${WKG_DRV} | grep "^/dev/${WKG_DEV} " | tr -s ' ' | rev | cut -f 3 -d ' ' | rev)"
  if [ "$Wnewsize" == "912M" -o "$Wnewsize" == "944M" -o "$Wnewsize" == "896M" -o "$Wnewsize" == "992M" ];then
   echo -e "\\033[1;31m ${S121:-ERROR: unable to resize working-partition}\\033[0;39m" #red.
   Wbad=1 #20220511
  else
   Wbad=0
   echo " ${S122:-Resizing ext4 filesystem to fill working-partition, size:} ${Wnewsize}"
   echo "#!/bin/ash
resize2fs -f /dev/${WKG_DEV} > /resize2fs.log 2>&1
if [ \$? -ne 0 ];then
 touch /BAD-RESIZE
 exit 1
fi
#tune2fs -O has_journal /dev/${WKG_DEV} > /tune2fs.log 2>&1
" > /resizeX
   chmod 755 /resizeX
   echo "#!/bin/ash
 /resizeX &
 echo -n '  .'
 sleep 1 #20220801
 while pidof resizeX >/dev/null;do
  sleep 1
  echo -n '.'
 done
 echo" > /resize.sh
   chmod 755 /resize.sh
   /resize.sh
   if [ -e /BAD-RESIZE ];then Wbad=1; fi #20220517
   if grep 'Nothing to do' /resize2fs.log >/dev/null; then Wbad=1; fi
   if grep 'missing' /resize2fs.log >/dev/null; then Wbad=1; fi
   if grep 'Error' /resize2fs.log >/dev/null; then Wbad=1; fi
   [ ! -s /resize2fs.log ] && Wbad=1
   if [ $Wbad -eq 1 ];then
    echo -e "\\033[1;31m  ${S123:-ERROR: unable to resize ext4 filesystem to fill working-partition, size:} ${Wnewsize}\\033[0;39m" #red
   fi
  fi
  if [ $Wbad -eq 1 ];then #20220511
   err_exit "${S124:-Unable to resize working-partition. Unsafe to continue}"
  fi
 fi
fi
if [ "${WKG_FS}" == "ext4" ];then
 
 mnt_wkg_ext4_func #20220622
 RET=$?

else
 if grep -q 'ntfs3' /proc/filesystems;then #20210611 has paragon ntfs3 driver.
  mount -t ${WKG_FS/ntfs/ntfs3} /dev/${WKG_DEV} /mnt/${WKG_DEV}
 else
  mount -t ${WKG_FS} /dev/${WKG_DEV} /mnt/${WKG_DEV}
 fi
 RET=$?
fi
[ $RET -ne 0 ] && err_exit "${S125:-Unable to mount working-partition:} ${WKG_DEV}"

[ "$DROPOUT" == "1" ] && exit_to_initrd " ${S126:-Exited from init script, wkg partition mounted.}"

###create $WKG_DIR and folders###
[ "${WKG_DIR}" ] && [ ! -d /mnt/${WKG_DEV}/${WKG_DIR%/} ] && mkdir -p /mnt/${WKG_DEV}/${WKG_DIR%/} #just in case path is missing.
WKG_LOOP=''
if [ $SFchk -eq 1 ];then #20210524 20210526
 if [ ! -d /mnt/${WKG_DEV}/${WKG_DIR}.session ];then #check if already have save-folder installation.
  if [ ! -f /mnt/${WKG_DEV}/${WKG_DIR}easysave.ext4 ];then
   #for new installations, create a save-file instead of a save-folder...
   create_savefile_func
  else
   true
  fi
  if [ $? -eq 0 ];then
   WKG_LOOP="$(losetup -f | sed -e 's%^/dev/%%')"
   losetup /dev/${WKG_LOOP} /mnt/${WKG_DEV}/${WKG_DIR}easysave.ext4
   #20220304 commit=30 to 1800... 20220522 revert
   mount -t ext4 -o discard,commit=30,rw,relatime,data=ordered /dev/${WKG_LOOP} /mnt/${WKG_DEV}/${WKG_DIR%/}
  fi
 fi
fi

#20230503 fscrypt v1 to v2 update...
if [ -d /mnt/${WKG_DEV}/${WKG_DIR}v1tov2 ];then #created by easy-update script.
 rm -rf /mnt/${WKG_DEV}/${WKG_DIR}containers
 rm -rf /mnt/${WKG_DEV}/${WKG_DIR}files
 rm -rf /mnt/${WKG_DEV}/${WKG_DIR}releases
 rm -rf /mnt/${WKG_DEV}/${WKG_DIR}.session
 rm -rf /mnt/${WKG_DEV}/${WKG_DIR}data
 rm -rf /mnt/${WKG_DEV}/${WKG_DIR}.tempwork
 sync
fi

###keyboard hw profile###
#20231125 keyboard hardware profile, as need to detect if kb changed...
#keyboard detection based upon existence of *::capslock folder... 20231126...
NEW_KB_HW_PROFILE="$(ls -1 -d /sys/class/input/*/*::capslock 2>/dev/null | cut -f 1-5 -d '/' | xargs -I XXX cat XXX/name | tr -d '\n'| sed -e 's%[^0-9a-zA-Z]%%g' | cut -c 1-60)"

###handle 1st or subsequent bootup###
if [ ! -d /mnt/${WKG_DEV}/${WKG_DIR}.session ];then
 for aDIR in containers releases files sfs .tempwork data #sanity check  20210919 20211212
 do
  [ "$EOS_SUPPORT_CONTAINERS" == "0" ] && continue #20220525
  [ -e /mnt/${WKG_DEV}/${WKG_DIR}${aDIR} ] && err_exit "/mnt/${WKG_DEV}/${WKG_DIR}${aDIR} ${S130:-already exists}"
 done
 [ "$EOS_SUPPORT_CONTAINERS" != "0" ] && mkdir /mnt/${WKG_DEV}/${WKG_DIR}containers
 mkdir /mnt/${WKG_DEV}/${WKG_DIR}releases
 mkdir /mnt/${WKG_DEV}/${WKG_DIR}files
 mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}sfs
 mkdir /mnt/${WKG_DEV}/${WKG_DIR}.session
 mkdir /mnt/${WKG_DEV}/${WKG_DIR}.tempwork
 mkdir /mnt/${WKG_DEV}/${WKG_DIR}data #20211212
 
 #190713...
 while [ 1 ];do
  if [ "$KEYMAP" ];then #20230123 already set by ask-country-x
   true
  else
   ask_kb #sets $KEYMAP
  fi
  if [ $? -eq 0 ];then
   #if [ ! "$QLANG" ];then #20230113 20230522
   # load_font ${KEYMAP:0:2}
   #fi
   gunzip -c /lib/keymaps/${KEYMAP}.gz | loadkmap
   if [ "$WKG_FS" == "ext4" -o "$WKG_LOOP" ];then #20210524 $WKG_LOOP set if have save-file
    ask_pw 0 #sets $PW
    [ $? -eq 1 ] && continue #back button pressed.
   fi
  fi
  break
 done
 
 echo
 if [ "$PW" ];then
  
  #20220622 bit naughty doing this, better ask first...
  if [ "$WKG_LOOP" == "" ];then #check not a save-file.
   ENCflg="$(tune2fs -l /dev/${WKG_DEV} | grep '^Filesystem features: .* encrypt')"
   if [ "$ENCflg" == "" ];then
    echo -e "\\033[1;31m ${S131:-The working-partition does not have ext4 encrypt feature enabled.}
${S132:-This feature is required to encrypt folders. Recommended for your security.}
${S133:-If you decline, future bootups will not ask for a password.}\\033[0;39m" #red.
    echo -e "\\033[1;41m ${S134:-WARNING: old bootloaders such as GRUB v1, GRUB4DOS, and GRUB v2 prior to }
 ${S135:-version 2.0.4 (released 2019), do not  recognize modern ext4 features    }
 ${S136:-such as folder encryption, and will no longer work with the partition    }
 ${S137:-if you enable encrypt (the partition will no longer be recognized).      }\\033[0;39m" #red background.
    echo "${S138:-Press ENTER key to enable encrypt, any other key not to:} "
    read wantencrypt
    if [ "$wantencrypt" == "" ];then
     echo "${S139:-Enabling ext4 folder encryption...}"
     sync
     umount /mnt/${WKG_DEV}
     tune2fs -O encrypt /dev/${WKG_DEV}
     if [ $? -ne 0 ];then
      echo -e "\\033[1;31m${S140:-Sorry, enabling folder encryption failed.}\\033[0;39m" #red
     else
      echo "${S141:-...encrypt enabled.}"
      echo "${S142:-Note, if for some reason you want to turn it off, remove the EasyOS installation. Then, there are instructions on the Internet to turn off encrypt.}" | fold -s -w 69
     fi
     sync
     mnt_wkg_ext4_func
     if [ $? -ne 0 ];then
      err_exit "${S143:-Mounting the working-partition has failed.}"
     fi
    else
     echo "${S144:-Folder encrypt support not enabled.}"
    fi
   fi
  fi
  
  if [ "$EOS_FSCRYPT_VER" == "1" ];then #20230429
   POLICY="$(echo "$PW" | e4crypt add_key -S "s:${SALT}" | tail -n 1 | cut -f 2 -d '[' | cut -f 1 -d ']')" #190308
   #need to check that ext4 f.s. is able to have encrypted folders...
   e4crypt set_policy ${POLICY} /mnt/${WKG_DEV}/${WKG_DIR}.session > e4crypt.log 2>&1
   if ! grep '^Error ' e4crypt.log >/dev/null; then
    ALLOW_ASK_PW='yes'
    cat e4crypt.log
    [ "$EOS_SUPPORT_CONTAINERS" != "0" ] && e4crypt set_policy ${POLICY} /mnt/${WKG_DEV}/${WKG_DIR}containers
    e4crypt set_policy ${POLICY} /mnt/${WKG_DEV}/${WKG_DIR}releases
    e4crypt set_policy ${POLICY} /mnt/${WKG_DEV}/${WKG_DIR}files
    #e4crypt set_policy ${POLICY} /mnt/${WKG_DEV}/${WKG_DIR}data #20211212  20230409 no longer encrypted.
   else
    echo "${S145:-Sorry, the folders in the working partition cannot be encrypted. The password will only be set for root login.}"
   fi
  else #20230429 v2
   PASSPHRASE="$(echo -n ${PW}xxxx | argon2 ${SALT} -l 32 -r)" #20230430 64 byte hash generated from password.
   echo -n "$PASSPHRASE" > /PASSPHRASE
   fscryptctl add_key /mnt/${WKG_DEV} < /PASSPHRASE > /FSKEYID
   if [ $? -eq 0 ];then
    ALLOW_ASK_PW='yes'
    FSKEYID="$(cat /FSKEYID)"
    if [ "$EOS_SUPPORT_CONTAINERS" != "0" ];then
     fscryptctl set_policy ${FSKEYID} /mnt/${WKG_DEV}/${WKG_DIR}containers
    fi
    fscryptctl set_policy ${FSKEYID} /mnt/${WKG_DEV}/${WKG_DIR}releases
    fscryptctl set_policy ${FSKEYID} /mnt/${WKG_DEV}/${WKG_DIR}files
    fscryptctl set_policy ${FSKEYID} /mnt/${WKG_DEV}/${WKG_DIR}.session
   else
    echo "${S145:-Sorry, the folders in the working partition cannot be encrypted. The password will only be set for root login.}"
   fi
  fi
 fi
 
 if [ "$EOS_SUPPORT_CONTAINERS" != "0" ];then
  cp -a -f /skeleton/containers /mnt/${WKG_DEV}/${WKG_DIR}
  #populate .session folders...
  for aCONT in `ls -1 /skeleton/containers`
  do
   cp -a -f /skeleton/containers/${aCONT}/.sessionSKEL/* /mnt/${WKG_DEV}/${WKG_DIR}containers/${aCONT}/.session/
   [ -d /skeleton/containers/${aCONT}/.sessionSKEL/.control ] && cp -a -f /skeleton/containers/${aCONT}/.sessionSKEL/.control /mnt/${WKG_DEV}/${WKG_DIR}containers/${aCONT}/.session/ #181121
  done
 fi
 cp -a -f /skeleton/releases /mnt/${WKG_DEV}/${WKG_DIR}
 cp -a -f /skeleton/files /mnt/${WKG_DEV}/${WKG_DIR}
 cp -a -f /skeleton/sfs /mnt/${WKG_DEV}/${WKG_DIR}
 echo "KEYMAP='${KEYMAP}'" > /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/CONFIG
 echo "ALLOW_ASK_PW='${ALLOW_ASK_PW}'" >> /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/CONFIG
 echo "KB_HW_PROFILE='${NEW_KB_HW_PROFILE}'" >> /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/CONFIG #20231125
 echo -n "${KEYMAP}" > /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/keymap.${NEW_KB_HW_PROFILE} #20231126

 if [ -d /mnt/${WKG_DEV}/${WKG_DIR}v1tov2 ];then #20230503
  cp -a -f /mnt/${WKG_DEV}/${WKG_DIR}v1tov2/containers/* /mnt/${WKG_DEV}/${WKG_DIR}containers/
  cp -a -f /mnt/${WKG_DEV}/${WKG_DIR}v1tov2/files/* /mnt/${WKG_DEV}/${WKG_DIR}files/
  cp -a -f /mnt/${WKG_DEV}/${WKG_DIR}v1tov2/session/* /mnt/${WKG_DEV}/${WKG_DIR}.session/
  sync
  if [ -d /mnt/${WKG_DEV}/${WKG_DIR}v1tov2/flatpak ];then
   mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}.session/home
   cp -a -f /mnt/${WKG_DEV}/${WKG_DIR}v1tov2/flatpak/* /mnt/${WKG_DEV}/${WKG_DIR}.session/home/
   sync
  fi
  rm -rf /mnt/${WKG_DEV}/${WKG_DIR}v1tov2
 fi
 
 #20240308 make sure this has 700 perms...
 mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}.session/root
 chmod 700 /mnt/${WKG_DEV}/${WKG_DIR}.session/root
else
 #20211006 crap, if updating to 3.0+, have 'home' folder, not 'files'. here test 'releases' instead...
 if [ "$EOS_FSCRYPT_VER" == "1" ];then #20230429
  POLICYflg="$(e4crypt get_policy /mnt/${WKG_DEV}/${WKG_DIR}releases | grep -o '^Error')" #"Error" if no encryption.
 else
  fscryptctl get_policy /mnt/${WKG_DEV}/${WKG_DIR}releases >/dev/null 2>&1
  if [ $? -eq 0 ];then
   POLICYflg=''
  else
   POLICYflg='xxx'
  fi
 fi
 
 #20231125 moved up; want to read KEYMAP further down even if no fscrypt...
 touch /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/CONFIG
 . /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/CONFIG #has KEYMAP, ALLOW_ASK_PW
 #20231125 keyboard hardware profiling... 20231126 fix...
 if [ ! "$KB_HW_PROFILE" ];then #for easy versions <5.6.4
  echo "KB_HW_PROFILE='${NEW_KB_HW_PROFILE}'" >> /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/CONFIG
  echo -n "$KEYMAP" > /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/keymap.${NEW_KB_HW_PROFILE} #20231126
  KB_HW_PROFILE="${NEW_KB_HW_PROFILE}"
 fi
 if [ ! -f /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/keymap.${NEW_KB_HW_PROFILE} ];then
  ask_kb
  echo -n "$KEYMAP" > /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/keymap.${NEW_KB_HW_PROFILE}
  sed -i -e "s%^KEYMAP=.*%KEYMAP='${KEYMAP}'%" /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/CONFIG
  sed -i -e "s%^KB_HW_PROFILE.*%KB_HW_PROFILE='${NEW_KB_HW_PROFILE}'%" /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/CONFIG
  . /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/CONFIG
 fi
 if [ "$KB_HW_PROFILE" != "$NEW_KB_HW_PROFILE" ];then
  KEYMAP="$(cat /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/keymap.${NEW_KB_HW_PROFILE})"
  sed -i -e "s%^KEYMAP=.*%KEYMAP='${KEYMAP}'%" /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/CONFIG
  sed -i -e "s%^KB_HW_PROFILE.*%KB_HW_PROFILE='${NEW_KB_HW_PROFILE}'%" /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/CONFIG
  . /mnt/${WKG_DEV}/${WKG_DIR}sfs/settings/initrd/CONFIG
 fi
 [ "$KEYMAP" != "us" ] && gunzip -c /lib/keymaps/${KEYMAP}.gz | loadkmap
 
 if [ "$POLICYflg" == "" ];then
  #folder has fscrypt enabled.
  echo
  if [ "$ALLOW_ASK_PW" == "yes" ];then
   while [ 1 ];do
    ask_pw 1 #sets $PW
    if [ "$EOS_FSCRYPT_VER" == "1" ];then #20230429
     POLICY="$(echo "$PW" | e4crypt add_key -S "s:${SALT}" | tail -n 1 | cut -f 2 -d '[' | cut -f 1 -d ']')"
     if [  -d /mnt/${WKG_DEV}/${WKG_DIR}files/downloads ];then
      break
     fi
    else #v2
     PASSPHRASE="$(echo -n ${PW}xxxx | argon2 ${SALT} -l 32 -r)" #20230430 64 byte hash generated from password.
     echo -n "$PASSPHRASE" > /PASSPHRASE
     fscryptctl add_key /mnt/${WKG_DEV} < /PASSPHRASE > /FSKEYID
     if [  -d /mnt/${WKG_DEV}/${WKG_DIR}files/downloads ];then
      break
     else
      FSKEYID="$(cat /FSKEYID)"
      fscryptctl remove_key ${FSKEYID} /mnt/${WKG_DEV}
     fi
    fi
    echo -e "\n\\e[1;30;43m ${S146:-Password incorrect. Try again} \\e[0;;m"
   done
   menu_delay_func #20220623 ask_pw calls menu_func, but some operations have to be done after pw entry.
   echo
  fi
 else #20220626 20220627
  menu_func nopw
  menu_delay_func
 fi
 #20231125  20231126...
 mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}.session/etc
 #echo -n "$KEYMAP" > /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/keymap.${NEW_KB_HW_PROFILE}
 echo -n "$KEYMAP" > /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/keymap
 
 #20211212 problem if update from <3.1.14 data folder not exist...
 if [ ! -d /mnt/${WKG_DEV}/${WKG_DIR}data ];then
  mkdir /mnt/${WKG_DEV}/${WKG_DIR}data
  #20230409 no longer encrypted...
  #if [ "$ALLOW_ASK_PW" == "yes" ];then
  # e4crypt set_policy ${POLICY} /mnt/${WKG_DEV}/${WKG_DIR}data
  #fi
 fi
fi

#20220527 session save deferred. see: /usr/sbin/ask-save-zram1
if [ -d /mnt/${WKG_DEV}/${WKG_DIR}.session-transit ];then
 echo -e "\\033[1;35m${S147:-Deferred saving last session, please wait...}\\033[0;39m\n " #purple
 /sbin/rw-merge "$WKG_DEV" "$WKG_DIR"
 #rm -rf /mnt/${WKG_DEV}/${WKG_DIR}.session-transit  20220530 remove in rw-merge.
fi

#20230911 now have usr-merge, may have to fix old .session... ***remove at later date***
#20231203 may also have to fix kirkstone container...
for aSESSION in .session containers/${INIT_DISTRO_COMPAT_VERSION}/.session
do
 mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}${aSESSION}/usr/bin
 mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}${aSESSION}/usr/lib
 for aD in bin sbin usr/sbin
 do
  if [ -d /mnt/${WKG_DEV}/${WKG_DIR}${aSESSION}/${aD} ];then
   if [ ! -h /mnt/${WKG_DEV}/${WKG_DIR}${aSESSION}/${aD} ];then
    cp -a --remove-destination /mnt/${WKG_DEV}/${WKG_DIR}${aSESSION}/${aD}/* /mnt/${WKG_DEV}/${WKG_DIR}${aSESSION}/usr/bin/ 2>/dev/null
    rm -rf /mnt/${WKG_DEV}/${WKG_DIR}${aSESSION}/${aD}
   else
    rm -f /mnt/${WKG_DEV}/${WKG_DIR}${aSESSION}/${aD}
   fi
  fi
 done
 for aD in lib lib64 usr/lib64 usr/lib/x86_64-linux-gnu usr/lib/aarch64-linux-gnu
 do
  if [ -d /mnt/${WKG_DEV}/${WKG_DIR}${aSESSION}/${aD} ];then
   if [ ! -h /mnt/${WKG_DEV}/${WKG_DIR}${aSESSION}/${aD} ];then
    cp -a --remove-destination /mnt/${WKG_DEV}/${WKG_DIR}${aSESSION}/${aD}/* /mnt/${WKG_DEV}/${WKG_DIR}${aSESSION}/usr/lib/ 2>/dev/null
    rm -rf /mnt/${WKG_DEV}/${WKG_DIR}${aSESSION}/${aD}
   else
    rm -f /mnt/${WKG_DEV}/${WKG_DIR}${aSESSION}/${aD}
   fi
  fi
 done
done

#20230912 update from 5.4.10 i had this symlink, get rid of it....
if [ -e /mnt/${WKG_DEV}/${WKG_DIR}.session/usr/lib/ld-linux-x86-64.so.2 ];then
 rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/usr/lib/ld-linux-x86-64.so.2
fi
if [ -e /mnt/${WKG_DEV}/${WKG_DIR}.session/usr/lib/ld-linux-aarch64.so.2 ];then
 rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/usr/lib/ld-linux-aarch64.so.2
fi

#20210919 hack for versions prior to easyos 3.0
if [ -h /mnt/${WKG_DEV}/${WKG_DIR}.session/home ];then #was symlink to /mnt/wkg/home
 rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/home
fi
if [ -d /mnt/${WKG_DEV}/${WKG_DIR}home ];then
 mv -f /mnt/${WKG_DEV}/${WKG_DIR}home /mnt/${WKG_DEV}/${WKG_DIR}files #20211006 fix.
 #chgrp -R 118 /mnt/${WKG_DEV}/${WKG_DIR}files #20211205 group is fscryptgrp
 chgrp -R 122 /mnt/${WKG_DEV}/${WKG_DIR}files #20211205 group is filesgrp
fi
#if [ -d /mnt/${WKG_DEV}/${WKG_DIR}.session/clients ];then
# mv -f /mnt/${WKG_DEV}/${WKG_DIR}.session/clients /mnt/${WKG_DEV}/${WKG_DIR}.session/home
#fi

###preset country settings for after switch_root###
#20231125 note, this already done above. um, but not on 1st bootup. keep as precaution...
#20231126 fix...
if [ "$KEYMAP" ];then
 if [ ! -s /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/keymap ];then
  mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}.session/etc
  echo -n "$KEYMAP" > /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/keymap
  #echo -n "$KEYMAP" > /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/keymap.${NEW_KB_HW_PROFILE}
 fi
fi

###set date and time###
#20201201 see TZ set early in script.
#could read .session/etc/clock and run hwclock, but for now this probably good enough (refer: rc.shutdown)...
#200218 fixed /dev/rtc0 and symlink /dev/rtc for modern kernels, replacing old /dev/rtc
#       also have rtc drivers builtin to kernel >=5.4.20. can now use hwclock...
#20240320 settimeofday() error, see: https://bkhome.org/news/202402/hwclock-fail-in-easyvoid-603.html
# getting this error in initrd. now have static hwclock with old musl
# ...it does not accept -l requires --localtime
CLKflg=1
if [ -e /sys/class/rtc/rtc0 ];then
 #20240430 get timezone...
 if [ -e /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/localtime ];then
  NEWTZ="$(readlink /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/localtime)" #ex: /usr/share/zoneinfo/Etc/GMT-8
  mkdir -p ${NEWTZ%/*}
  cp -a ${NEWTZ} ${NEWTZ%/*}/
  cp -a /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/localtime /etc/
  unset TZ #otherwise it will override /etc/localtime
  export TZ
 fi
 if [ -s /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/clock ];then
. /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/clock #has HWCLOCKTIME=localtime or utc
  case "$HWCLOCKTIME" in
   localtime) hwclock -s --localtime -f /dev/rtc0; CLKflg=$? ;;
   utc)       hwclock -s -u -f /dev/rtc0; CLKflg=$? ;;
  esac
 else #first bootup, assume hw clock is localtime...
  hwclock -s --localtime -f /dev/rtc0
 fi
fi
if [ $CLKflg -ne 0 ];then
 if [ -s /mnt/${WKG_DEV}/${WKG_DIR}.session/var/local/shutdown_date_saved ];then
  date -s "`cat /mnt/${WKG_DEV}/${WKG_DIR}.session/var/local/shutdown_date_saved`" > /dev/null
 fi
fi
#20210113 rpi does not have a hardware clock, set it to something sane at 1st bootup...
YEAR=$(date +%Y) #ex: 1970
if [ $YEAR -lt 2020 ];then
 #set date same as DISTRO_SPECS file...
 fDATE="$(stat -c %y /etc/DISTRO_SPECS | cut -f 1,2 -d ':')"
 DATE="$(date -s "$fDATE")"
else
 DATE="$(date)"
fi
export DATE #ex: Tue Mar  3 07:09:34 +08 2020


###TRIM###
#20250206 record success or fail of trim test...
if [ "$yTRIMflg" != "" ];then
 cp -f /TRIMnotwkg /mnt/${WKG_DEV}/${WKG_DIR}.trim-not-wkg
 cp -f /TRIMwkg /mnt/${WKG_DEV}/${WKG_DIR}.trim-wkg
fi

if [ "$TRIMflg" ];then #200302  20220621 now in wkg-part...
 [ ! -f /mnt/${WKG_DEV}/${WKG_DIR}.easyos-bootcnt ] && echo -n '0' > /mnt/${WKG_DEV}/${WKG_DIR}.easyos-bootcnt
 BOOTCNT=$(cat /mnt/${WKG_DEV}/${WKG_DIR}.easyos-bootcnt)
 BOOTCNT=$(($BOOTCNT+1))
 if [ $BOOTCNT -gt 20 ];then
  BOOTCNT=0
  echo -e "\\033[1;35m${S150:-Executing fstrim on SSD working-partition...}\\033[0;39m\n " #purple
  fstrim -v /mnt/${WKG_DEV}
 fi
 echo -n "$BOOTCNT" > /mnt/${WKG_DEV}/${WKG_DIR}.easyos-bootcnt
fi

[ "$DROPOUT" == "2" ] && exit_to_initrd " ${S151:-Exited from init script, before recovery {S151} maintenance operations.}"

###recovery, maintenance###
KERNELNAME=vmlinuz
[ "$INIT_DISTRO_KERNEL_NAME" ] && KERNELNAME="$INIT_DISTRO_KERNEL_NAME" #20220621 ex: rpi4: kernel8.img
export KERNELNAME
if [ "$QFIX" ];then #190817 see similar code above.
 for ONEFIX in `echo -n "$QFIX" | tr ',' ' '`
 do
  case $ONEFIX in
   fsck|FSCK) echo -n "${WKG_DEV},${WKG_FS},REQUEST" > /mnt/${WKG_DEV}/${WKG_DIR}.fsckme.flg ;; #20220801
   back|bak|BACK|BAK) echo -n ",last" > /mnt/${WKG_DEV}/${WKG_DIR}.rollback.flg ;; #20230104
   new|NEW) echo -n ",erase" > /mnt/${WKG_DEV}/${WKG_DIR}.rollback.flg ;; #181009 200720 20230104
  esac
 done
fi

#191224 if easy.sfs mounted on /tro (via loop0), rollback fails (easy.sfs seems to delete, but isn't), hence moved rollback below unmount /tnew
if [ -s /mnt/${WKG_DEV}/${WKG_DIR}.rollback.flg ];then
 rollback "${WKG_DRV}" "${WKG_DEV}" "${WKG_DIR}" #20230104
 if [ -s /backVER ];then #20240514
  INIT_DISTRO_VERSION=$(cat /backVER) #have rolled back/forward to a different version.
  #20240518...
  if [ "$MENUVAR" == "RBPREVVER" ];then
   #chose to rollback to previous version from initrd menu.
   #let's be pre-emptive and fix DISTRO_SPECS. have not yet loaded easy.sfs, so do a hack...
   sed -i -e "s%^DISTRO_VERSION=.*%DISTRO_VERSION=${INIT_DISTRO_VERSION}%" /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/DISTRO_SPECS
   sync
   umount /mnt/${WKG_DEV}
   #currently booting with the wrong kernel. have to change kernels!
   echo -e "\\033[1;35m" #purple
   echo "${S460:-You have chosen to rollback to the previous version via the initrd menu. However, the current Linux kernel is loaded. It is required to change to the kernel of the previous version. To achieve this, hold down the power button to power-off the computer. Then start it up again, this time just accept the normal bootup. Do not choose any options from the initrd menu. Then you should be in the previous version after bootup.}" | fold -s -w 69
   echo -n -e "\\033[0;39m"
   echo -n "${S461:-Waiting for you to power-off the computer...}"
   sleep infinity
  fi
 fi
fi

#200726 if boot- and wkg-partition the same, cannot unmount wkg-partition and fscheck
#fails, coz of temporary easy.sfs mounted on tro. moved down...
if [ -s /mnt/${WKG_DEV}/${WKG_DIR}.fsckme.flg ];then #20220801
 #200726 fscheck modified to not use e2fsck in easy.sfs...
 fscheck "${WKG_DRV}" "${WKG_DEV}" "${WKG_DIR}" "${WKG_FS}" #ex: improper shutdown
 [ $? -ne 0 ] && err_exit "${S160:-Fatal error when filesystem check}"
fi

[ "$DROPOUT" == "3" ] && exit_to_initrd " ${S161:-Exited from init script, before version control.}"

###version control###
prevVER="" #170919
prevCOMPAT='' #20240618
if [ ! -d /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION} ];then
 
 echo -e "\\033[1;35m${S170:-One-time only operation, creating a snapshot of EasyOS}\\033[0;39m"
 echo "  ${S171:-This will allow future rollback with the Easy Version Control Manager}"
 echo "  ${S172:-Populating:} /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}"
 mkdir /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}
 
 #20230913 pre-usrmerge .session may now have circular symlink (see #20230911)...
 FNDall="$(find /mnt/${WKG_DEV}/${WKG_DIR}.session -mindepth 1 -maxdepth 4 -type d 2>/dev/null | xargs -I ZZZ find ZZZ -mindepth 1 -maxdepth 1 -follow 2>&1)"
 #ex: usr/lib/ld-linux-x86-64.so.2 symlink to ../../lib/ld-linux-x86-64.so.2
 # busybox find: find: /mnt/sdb2/easyos/.session/usr/lib/ld-linux-x86-64.so.2: Symbolic link loop
 # full find: find: ‘/mnt/sdb2/easyos/.session/usr/lib/ld-linux-x86-64.so.2’: Too many levels of symbolic links
 LNKcirc="$(echo "$FNDall" | grep 'Symbolic link loop' | cut -f 2 -d ' ' | cut -f 1 -d ':' | tr '\n' ' ')"
 for aLNK in $LNKcirc
 do
  rm -f ${aLNK}
 done
 
 #170816 there is a limit on history...
 #20250124 want it to exist...
 if [ ! -e /mnt/${WKG_DEV}/${WKG_DIR}.session/var/local/version-history-depth ];then
  mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}.session/var/local
  echo -n '5' > /mnt/${WKG_DEV}/${WKG_DIR}.session/var/local/version-history-depth
 fi
 if [ -s /mnt/${WKG_DEV}/${WKG_DIR}.session/var/local/version-history-depth ];then
  DEPTH_MAX="$(cat /mnt/${WKG_DEV}/${WKG_DIR}.session/var/local/version-history-depth)"
  VERS="$(ls -l -d /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-* | rev | cut -f 1 -d '-' | rev)" #181218 fix.
  sortedVERS="$(echo "$VERS" | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n)" #lowest to highest.
  for ADEL in `echo "$sortedVERS" | head -n -${DEPTH_MAX} | tr '\n' ' '`
  do
   if [ -d /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${ADEL} ];then
    MSGdel="${S173:-Warning, deleting old version:}"
    echo -e "  \\033[1;31m${MSGdel} easy-${ADEL}\\033[0;39m" #red
    #181205 remove sfs files symlinked to sfs folder...
    #20230231 however, not if sfs in use in a container...
    realpath /mnt/${WKG_DEV}/${WKG_DIR}containers/*/*.sfs 2>/dev/null >/sfss-in-use
    for aSL in `realpath /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${ADEL}/*.sfs | grep -vF '*' | tr '\n' ' '` #20231111
    do
     if [ -s /sfss-in-use ];then #20230131
      echo -n "$aSL" >/sfs-want-del
      grep -qFx -f /sfss-in-use /sfs-want-del
      if [ $? -eq 0 ];then
       continue
      fi
     fi
     aMAIN="${aSL/.sfs/}"
     rm -f ${aSL} 2>/dev/null
     [ -f ${aMAIN}.specs ] && rm -f ${aMAIN}.specs 2>/dev/null
    done
    rm -rf /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${ADEL}
   fi
  done
 fi

 if [ -f /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/DISTRO_SPECS ];then
  prevVER="$(grep '^DISTRO_VERSION=' /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/DISTRO_SPECS | cut -f 2 -d '=' | cut -f 1 -d ' ')"
  prevCOMPAT="$(grep '^DISTRO_COMPAT_VERSION=' /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/DISTRO_SPECS | cut -f 2 -d "'")" #20240618
  touch /mnt/${WKG_DEV}/${WKG_DIR}.session/.delayedrun_version_upgrade #see /usr/sbin/delayedrun
 else
  prevVER=""
  prevCOMPAT="" #20240618
 fi
 if [ "$WKG_DEV" != "zram0" ];then #181203 200824
  if [ -f /mnt/${WKG_DEV}/${WKG_DIR}initrd ];then #190130
   echo -n '  initrd'
   cp -a -f /mnt/${WKG_DEV}/${WKG_DIR}initrd /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/ #181130 renamed initrd.q to initrd. 200828 -a
   #190828 verify...
   cp_verify_func /mnt/${WKG_DEV}/${WKG_DIR}initrd /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/initrd
  fi
  echo -n " ${KERNELNAME}"
  cp -a -f /mnt/${WKG_DEV}/${WKG_DIR}${KERNELNAME} /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/ #200828 -a
  #190828 verify...
  cp_verify_func /mnt/${WKG_DEV}/${WKG_DIR}${KERNELNAME} /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/${KERNELNAME}
 fi
 #181029 all .sfs files are now in /mnt/wkg/sfs, with symlinks (to avoid being encrypted)...
 mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION} #ex: oe/pyro
 echo ' easy.sfs' 
 if [ -f /mnt/${WKG_DEV}/${WKG_DIR}easy.sfs ];then #20220615
  mv -f /mnt/${WKG_DEV}/${WKG_DIR}easy.sfs /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION}/easy_${INIT_DISTRO_VERSION}_${INIT_DISTRO_TARGETARCH}.sfs
 else
  err_exit "${S174:-Cannot find easy.sfs}"
 fi
 ln -s ../../sfs/easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION}/easy_${INIT_DISTRO_VERSION}_${INIT_DISTRO_TARGETARCH}.sfs /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/easy.sfs
 
 #190123 need some meta-data for easy.sfs...  20230304
 #190913 change SFS_DB_install from 'terminal' to 'desk'...
 #also need easy.png here, done in 3buildeasydistro (see #190123)
 ESUM="$(sha256sum /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION}/easy_${INIT_DISTRO_VERSION}_${INIT_DISTRO_TARGETARCH}.sfs | cut -f 1 -d ' ')"
 echo "#created in initrd, script init
SFS_DB_pkgname='easy_${INIT_DISTRO_VERSION}'
SFS_DB_nameonly='easy'
SFS_DB_version='${INIT_DISTRO_VERSION}'
SFS_DB_revision=''
SFS_DB_arch='${INIT_DISTRO_TARGETARCH}'
SFS_DB_categories='Utility'
SFS_DB_size='1537668'
SFS_DB_fullfilename='easy_${INIT_DISTRO_VERSION}_${INIT_DISTRO_TARGETARCH}.sfs'
SFS_DB_dependencies=''
SFS_DB_description='${INIT_DISTRO_NAME_NORMAL} base SFS'
SFS_DB_description_long='This is the complete ${INIT_DISTRO_NAME_NORMAL} filesystem.'
SFS_DB_compileddistro='${INIT_DISTRO_BINARY_COMPAT}'
SFS_DB_compiledrelease='${INIT_DISTRO_COMPAT_VERSION}'
SFS_DB_path='easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION}'
SFS_DB_apps='easy'
SFS_DB_icons='easy'
SFS_DB_install='desk'
SFS_DB_hash='${ESUM}'" > /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION}/easy_${INIT_DISTRO_VERSION}_${INIT_DISTRO_TARGETARCH}.specs
 
 rm -rf /mnt/${WKG_DEV}/${WKG_DIR}.session/.[a-z]* 2>/dev/null #precaution.
 ##170919 delete *all* whiteout files (see also /sbin/fixlayers)...
 #find /mnt/${WKG_DEV}/${WKG_DIR}.session -mindepth 1 -type f -name '.wh.*' -delete 2>/dev/null

 if [ "$EOS_SUPPORT_CONTAINERS" != "0" ];then
  ###upgrade hacks###
  #190913 the inbuilt easy container has label pyro or buster, need to fix older versions of easyos...
  #old version has label "easy". this fix is for when do a version upgrade...
  #problem only for upgrading easy pyro <1.2.3 and buster <2.1.3
  if [ -f /mnt/${WKG_DEV}/${WKG_DIR}.session/root/Choices/ROX-Filer/PuppyPin ];then
   if grep '"easy"' /mnt/${WKG_DEV}/${WKG_DIR}.session/root/Choices/ROX-Filer/PuppyPin > /dev/null; then
    #there is a desktop icon labeled "easy"
    sed -i '/"easy"/d' /mnt/${WKG_DEV}/${WKG_DIR}.session/root/Choices/ROX-Filer/PuppyPin
    [ -f /mnt/${WKG_DEV}/${WKG_DIR}.session/root/Choices/ROX-Filer/PuppyPinBACKUP ] && sed -i '/"easy"/d' /mnt/${WKG_DEV}/${WKG_DIR}.session/root/Choices/ROX-Filer/PuppyPinBACKUP
    [ -d /mnt/${WKG_DEV}/${WKG_DIR}containers/easy ] && rm -rf /mnt/${WKG_DEV}/${WKG_DIR}containers/easy
    #190915 create pyro or buster container...
    for aCONT in `ls -1 /skeleton/containers`
    do
     [ -d /mnt/${WKG_DEV}/${WKG_DIR}containers/${aCONT} ] && continue
     cp -a /skeleton/containers/${aCONT} /mnt/${WKG_DEV}/${WKG_DIR}containers/
     cp -a -f /skeleton/containers/${aCONT}/.sessionSKEL/* /mnt/${WKG_DEV}/${WKG_DIR}containers/${aCONT}/.session/
     [ -d /skeleton/containers/${aCONT}/.sessionSKEL/.control ] && cp -a -f /skeleton/containers/${aCONT}/.sessionSKEL/.control /mnt/${WKG_DEV}/${WKG_DIR}containers/${aCONT}/.session/
    done
   fi
  fi
 fi
  
 mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}.session/etc
 
 #20201204 do not remove, users may have created their own desktop icons...
 ##200830 this may have invalid icons, delete it, will get copied from root/Choices/ROX-Filer/globicons ...
 #[ -f /mnt/${WKG_DEV}/${WKG_DIR}.session/root/.config/rox.sourceforge.net/ROX-Filer/globicons ] && rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/root/.config/rox.sourceforge.net/ROX-Filer/globicons
 
 #20230423 remove...
 ##20220601 desktop icons have changed layout, so erase previous...
 ## "update" icon is now on the second row (and for top-level-zram1 bootup have a "save" icon)...
 #grep -q grep '"32".*easy\-update' /mnt/${WKG_DEV}/${WKG_DIR}.session/root/Choices/ROX-Filer/PuppyPin 2>/dev/null
 #if [ $? -eq 0 ];then
 # rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/root/.config/rox.sourceforge.net/ROX-Filer/globicons 2>/dev/null
 # rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/root/Choices/ROX-Filer/globicons 2>/dev/null
 # rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/root/Choices/ROX-Filer/PuppyPin
 # rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/root/Choices/ROX-Filer/PuppyPinBACKUP 2>/dev/null
 #fi
 
 #200830 this folder must always be pristine...
 #20230718 this also erases etc/xdg/rox.sourceforge.net which has right-click menu for user-installed apps,
 # so have put code into /etc/rc.d/rc.update to run build-rox-sendto after switch_root...
 #20241112 a kde pkg installs /etc/xdg/menus/kf5-applications.menu, need to retain...
 #[ -d /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/xdg ] && rm -rf /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/xdg
 if [ -d /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/xdg ];then
  for aD in autostart rox.sourceforge.net templates Xwayland-session.d
  do
   if [ -d /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/xdg/${aD} ];then
    rm -rf /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/xdg/${aD}
   fi
  done
  if [ -d /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/xdg/menus ];then
   for aF in archived-cascading archived-inline
   do
    if [ -d /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/xdg/menus/${aF} ];then
     rm -rf /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/xdg/menus/${aF}
    fi
   done
   for aF in applications.menu hierarchy preferences.menu puppy-business.menu puppy-calculate.menu puppy-desktop.menu puppy-document.menu puppy-filesystem.menu puppy-fun.menu puppy-graphic.menu puppy-internet.menu puppy-multimedia.menu puppy-network.menu puppy-personal.menu puppy-setup.menu puppy-system.menu puppy-utility.menu settings.menu
   do
    if [ -f /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/xdg/menus/${aF} ];then
     rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/xdg/menus/${aF}
    fi
   done
  fi
 fi
 
 #20230409 /files reverted, now a symlink. see further down.
 ##20211207 relocated here.
 ##20211205 upgrading from easyos <3.1.13
 ## no longer have /files symlink. rc.sysinit will do a "mount --bind" onto /files
 #if [ -h /mnt/${WKG_DEV}/${WKG_DIR}.session/files ];then
 # rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/files
 #fi
 
 #files folder, everything must belong to 'fscryptgrp' group. 20211206 now 'filesgrp'
 FGRP="$(stat -c %g /mnt/${WKG_DEV}/${WKG_DIR}files)"
 #20230616 check deeper...
 FGRP2="$(stat -c %g /mnt/${WKG_DEV}/${WKG_DIR}files/media/images)"
 if [ "$FGRP" != "122" -o "$FGRP2" != "122" ];then
  #20230616 only folders...
  #chgrp -R 122 /mnt/${WKG_DEV}/${WKG_DIR}files
  chgrp 122 /mnt/${WKG_DEV}/${WKG_DIR}files
  find /mnt/${WKG_DEV}/${WKG_DIR}files -mindepth 1 -maxdepth 5 -type d | xargs -I STR chgrp 122 STR
 fi
 #20211210... 20230528 setgid now is set...
 FPERM="$(stat -c %a /mnt/${WKG_DEV}/${WKG_DIR}files)"
 #20230616 check deeper...
 FPERM2="$(stat -c %a /mnt/${WKG_DEV}/${WKG_DIR}files/media/images)"
 if [ "$FPERM" != "2770" -o "$FPERM2" != "2770" ];then
  chmod 2770 /mnt/${WKG_DEV}/${WKG_DIR}files
  #chmod 2770 $(find /mnt/${WKG_DEV}/${WKG_DIR}files -mindepth 1 -type d | tr '\n' ' ')
  #20230528 do it this way in case too many folders...
  find /mnt/${WKG_DEV}/${WKG_DIR}files -mindepth 1 -maxdepth 5 -type d | xargs -I STR chmod 2770 STR
  #20230528 folders for each app need to be invisible to other apps...
  chmod 2700 $(find /mnt/${WKG_DEV}/${WKG_DIR}files/apps -mindepth 1 -maxdepth 1 -type d | tr '\n' ' ')
 fi
 ##20230406 testing openshot flatpak, needs this to save here... 20230407 revert.
 #chgrp 122 /mnt/${WKG_DEV}/${WKG_DIR}
 #chmod 770 /mnt/${WKG_DEV}/${WKG_DIR}
 #these must be symlinks... 20211207 no, delete Downloads folders. create user-dirs.dirs
 for aDL in $(find /mnt/${WKG_DEV}/${WKG_DIR}.session/home -mindepth 2 -maxdepth 2 -type d -name Downloads 2>/dev/null | tr '\n' ' ')
 do
  rm -rf "$aDL"
  #aAPP="$(echo -n "$aDL" | rev | cut -f 2 -d '/' | rev)"
  #ln -s /mnt/${WKG_DEV}/${WKG_DIR}files/downloads $aDL
  bDL="$(dirname $aDL)"
  mkdir -p ${bDL}/.config #20211208 -p as already exists.
  echo 'XDG_DESKTOP_DIR="/files"
XDG_DOCUMENTS_DIR="/files/documents"
XDG_DOWNLOAD_DIR="/files/downloads"
XDG_MUSIC_DIR="/files/media"
XDG_PICTURES_DIR="/files/media"
XDG_PUBLICSHARE_DIR="/files/shared"
XDG_TEMPLATES_DIR="/files"
XDG_VIDEOS_DIR="/files/media"' > ${bDL}/.config/user-dirs.dirs
 done
 if [ -e /mnt/${WKG_DEV}/${WKG_DIR}.session/root/Downloads ];then
  #if [ ! -h /mnt/${WKG_DEV}/${WKG_DIR}.session/root/Downloads ];then
   rm -rf /mnt/${WKG_DEV}/${WKG_DIR}.session/root/Downloads
   #note, it is now a hyperlink in easy.sfs  20211207 no longer in easy.sfs
  #fi
 fi
 if [ "$EOS_SUPPORT_CONTAINERS" != "0" ];then
  #also kill these in containers:
  # /mnt/${WKG_DEV}/${WKG_DIR}containers/${EXE}/container/mnt/wkg
  for aCN in /mnt/${WKG_DEV}/${WKG_DIR}containers/*
  do
   if [ -d ${aCN}/.session/mnt ];then
    rm -rf ${aCN}/.session/mnt
   fi
   if [ -h ${aCN}/.session/files ];then
    rm -f ${aCN}/.session/files
   fi
  done
 fi
   
 #20221015 code from easy-version-control...
 #20250128 only exclude part of /var... 20250131 fix...
 if [ -h /mnt/${WKG_DEV}/${WKG_DIR}.session/var ];then
  echo -e 'dev\nmnt\nproc\nrun\nsys\ntmp\nvar\n.fsckme.flg\nlost+found\nroot/.XLOADED\n.control' > exclusions1
 else
  echo -e 'dev\nmnt\nproc\nrun\nsys\ntmp\nvar/lock\nvar/lib/flatpak\nvar/cache\nvar/run\n.fsckme.flg\nlost+found\nroot/.XLOADED\n.control' > exclusions1
 fi
 if [ -d /mnt/${WKG_DEV}/${WKG_DIR}.session/root/.ccache ];then #does oe create this? huge, 6.8GB
  echo 'root/.ccache' >> exclusions1
 fi
 #20240517 handle if $WKG_DIR is empty or deeper, fix typo...
 DOTC="$(find /mnt/${WKG_DEV}/${WKG_DIR}.session -maxdepth 3 -type d -name '.cache' | sed -e 's%.*\.session/%%' | tr '\n' ' ')" #ex: home/firefox/.cache
 for aDOTC in $DOTC
 do
  echo "$aDOTC" >> exclusions1
 done
 if [ -f /bin/mksquashfs.gz ];then #20230425
  cd /bin
  gunzip mksquashfs.gz
  chmod 755 mksquashfs
  cd ..
 fi
 mksquashfs /mnt/${WKG_DEV}/${WKG_DIR}.session /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/rw-${INIT_DISTRO_VERSION}.sfs -ef exclusions1 -comp lz4 -Xhc #>/dev/null
 
 if [ "$EOS_SUPPORT_CONTAINERS" != "0" ];then
  #also save any container sessions:
  for EXE in `ls -1 /mnt/${WKG_DEV}/${WKG_DIR}containers | tr '\n' ' '`
  do
   [ ! -d /mnt/${WKG_DEV}/${WKG_DIR}containers/${EXE}/.session ] && continue
   #echo -n " ec-${EXE}"; mksquashfs /mnt/${WKG_DEV}/${WKG_DIR}containers/${EXE}/.session /mnt/${WKG_DEV}/${WKG_DIR}containers/${EXE}/rw-${prevVER}.sfs -comp gzip >/dev/null
   cp -a -f /mnt/${WKG_DEV}/${WKG_DIR}containers/${EXE}/configuration /mnt/${WKG_DEV}/${WKG_DIR}containers/${EXE}/configuration-${INIT_DISTRO_VERSION} #200828 -a
  done
 fi
 echo
 touch /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/configuration
 touch /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/configuration-${INIT_DISTRO_VERSION}
 
 #20230622 update from before 5.4.2 this does not exist...
 if [ ! -d /mnt/${WKG_DEV}/${WKG_DIR}files/database ];then
  cp -a /skeleton/files/database /mnt/${WKG_DEV}/${WKG_DIR}files/
 fi
 
 #20230913 fix for older containers created before easy 5.5 (usr-merge)...
 # ref: /usr/local/easy_containers/ec-fix-desktop (called from .xinitrc)
 for aDESK in `ls -1 /mnt/${WKG_DEV}/${WKG_DIR}containers/*/desktop 2>/dev/null`
 do
  [ ! "$aDESK" ] && continue
  sed -i -e 's%/usr/sbin%/usr/bin%' ${aDESK}
 done
 
else #20220613
 if [ -f /mnt/${WKG_DEV}/${WKG_DIR}easy.sfs ];then #20220615
  #should only exist when do update, and easy.sfs gets moved into releases folder.
  echo -e "\\033[1;31m/mnt/${WKG_DEV}/${WKG_DIR}easy.sfs ${S180:-Why does this file exist? Removing it.}\\033[0;39m" #red
  rm -f /mnt/${WKG_DEV}/${WKG_DIR}easy.sfs
 fi
fi

#20230409 from easy 5.2.2 onward...
#note: easy.sfs still has /files with sub-directories, for containers.
if [ -d /mnt/${WKG_DEV}/${WKG_DIR}.session/files ];then
 rm -rf /mnt/${WKG_DEV}/${WKG_DIR}.session/files
fi
#20240623 xarchive may change folders to root group. ref: https://forum.puppylinux.com/viewtopic.php?p=123982#p123982
# make sure stays as filesgrp (122)...
chgrp 122 /mnt/${WKG_DEV}/${WKG_DIR}files
chgrp 122 /mnt/${WKG_DEV}/${WKG_DIR}files/downloads
#could have symlinked to /mnt/wkg, but do this every bootup...
ln -snf /mnt/${WKG_DEV}/${WKG_DIR}files /mnt/${WKG_DEV}/${WKG_DIR}.session/files

###recompress easy.sfs### improve operating speed, recompress easy.sfs (refer quicksetup)
if [ -s /mnt/${WKG_DEV}/${WKG_DIR}.session/.qsfs.flg ];then #181029 now in sfs folder...
 echo -e "\\033[1;35mRecompressing easy.sfs, xz to gz, please wait\\033[0;39m" #purple
 mkdir /mntsfs
 mount -r -t squashfs -o loop,noatime /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION}/easy_${INIT_DISTRO_VERSION}_${INIT_DISTRO_TARGETARCH}.sfs /mntsfs
 if [ -f /bin/mksquashfs.gz ];then #20230425
  cd /bin
  gunzip mksquashfs.gz
  chmod 755 mksquashfs
  cd ..
 fi
 mksquashfs /mntsfs /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION}/easy-gz.sfs -comp lz4 -Xhc #>/dev/null 180604
 sync
 umount /mntsfs
 mv -f /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION}/easy-gz.sfs /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION}/easy_${INIT_DISTRO_VERSION}_${INIT_DISTRO_TARGETARCH}.sfs
 sync
 if [ -f /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION}/easy_${INIT_DISTRO_VERSION}_${INIT_DISTRO_TARGETARCH}.specs ];then #190314
  HASHnew="$(sha256sum /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION}/easy_${INIT_DISTRO_VERSION}_${INIT_DISTRO_TARGETARCH}.sfs | cut -f 1 -d ' ')"
  sed -i -e "s%^SFS_DB_hash=.*%SFS_DB_hash='${HASHnew}'%" /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION}/easy_${INIT_DISTRO_VERSION}_${INIT_DISTRO_TARGETARCH}.specs
  sync
 fi
 rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/.qsfs.flg
fi

[ "$DROPOUT" == "4" ] && exit_to_initrd " ${S181:-Exited from init script, before setting up SFS layers.}"

###setup bottom ro layer, with easy.sfs###
echo -e "\\033[1;35m${S190:-Mounting read-only layer of layered filesystem}\\033[0;39m" #purple
QSFSbytes0=`stat -L -c %s /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/easy.sfs` #181029
if [ "$xWKG_DEV" ];then #190914 allocate more space in zram if extra sfss
 for eSFS in `grep '^EASY_LAYER_RO' /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/configuration | cut -f 2 -d '=' | tr '\n' ' '`
 do
  [ "$eSFS" == "devx.sfs" ] && continue
  [ "$eSFS" == "kernel.sfs" ] && continue
  eSFSbytes=`stat -L -c %s /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/${eSFS}`
  QSFSbytes0=$(($QSFSbytes0+$eSFSbytes))
 done
fi
QSFSbytes1=$(($QSFSbytes0+500000))
mount -t tmpfs -o size=${QSFSbytes1} tmpfs /easy_ro
mkdir /easy_ro/easy_sfs
#decide whether to copy easy.sfs to RAM, or not...
CPYflg=0
[ $FREEK -gt 3100000 ] && CPYflg=1 #>1GB ram then copy. 20220609 >3GB
[ $TIME10k -lt 100 ] && CPYflg=0   #but fast drive so don't copy.
[ $FREEK -gt 6100000 ] && CPYflg=1 #but heaps of ram, so copy. 181120 restore. 20220609
[ $TIME10k -lt 15 ] && CPYflg=0    #181120 but super-fast drive so don't copy. 200827 was 30 now 10. 20220607 now 15.
[ "$xWKG_DEV" ] && CPYflg=1        #190817 will be running totally in ram.
if [ $CPYflg -eq 0 ];then
 #do not copy easy.sfs into ram, mount where it is...
 echo "  ${S191:-Mounting squashfs file easy.sfs}"
 QSFS_PATH="/mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/" #need this for setting up containers.
 mount -r -t squashfs -o noatime,loop /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/easy.sfs /easy_ro/easy_sfs
else
 echo "  ${S192:-Copying easy.sfs to RAM, then mounting}"
 [ ! -f /easy_ro/easy.sfs ] && cp -L -p /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/easy.sfs /easy_ro/ #181029 200830 -p
 QSFS_PATH="/mnt/.easy_ro/" #need this for setting up containers. 20220524
 mount -r -t squashfs -o noatime,loop /easy_ro/easy.sfs /easy_ro/easy_sfs
fi
[ $? -ne 0 ] && err_exit "${S193:-Failed to mount easy.sfs}"
mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}.session/etc #170927 missing if have erased session.
cp -a -f /easy_ro/easy_sfs/etc/DISTRO_SPECS /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/ #need to be sure correct one is on top. 200828 -a
EXTRASFS=""; sessionSFS=""; NEWEXTRASFSLIST=""
#precaution...
. /easy_ro/easy_sfs/etc/DISTRO_SPECS
[ "$DISTRO_VERSION" != "$INIT_DISTRO_VERSION" ] && echo -e "\\033[1;31m${S194:-WARNING, versions do not match.} initrd: ${INIT_DISTRO_VERSION}, easy.sfs: ${DISTRO_VERSION}\\033[0;39m" #red

###carry-over load sfs from previous version###
#20231108
if [ "$prevVER" ];then
 prevSFSS="$(grep '^EASY_LAYER_RO' /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${prevVER}/configuration | tr '\n' ' ')"
 for aprevSFS in $prevSFSS
 do
  anameSFS="${aprevSFS/*=/}" #ex: devx.sfs
  [ ! -e /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${prevVER}/${anameSFS} ] && continue
  case "$anameSFS" in
   easy*|rw-*|devx*) continue ;;
   kernel*|nvidia*)
    arealSFS="$(realpath /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${prevVER}/${anameSFS})" #a relative link.
    [ ! -e "$arealSFS" ] && continue
    echo -n "$arealSFS" | grep -qF "_${KERNVER}-"
    if [ $? -eq 0 ];then
     sed -i "/${aprevSFS/=*/}/d" /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/configuration #precaution
     echo "$aprevSFS" >> /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/configuration
     cp -a -f --remove-destination /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${prevVER}/${anameSFS} /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/
    else
     #check if easy-update has downloaded an update nvidia sfs... 20231109
     NVmajorver="$(echo -n "$aprevSFS" | cut -f 2 -d '_' | cut -f 2 -d '-' | cut -f 1 -d '.')" #ex: get 525 out of nvidia_5.15.137-525.147.05_amd64.sfs
     newNVSFS="$(find /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${DISTRO_BINARY_COMPAT}/${DISTRO_COMPAT_VERSION} -maxdepth 1 -type f -name "nvidia_${KERNVER}-${NVmajorver}.*sfs" | head -n 1)"
     if [ "$newNVSFS" ];then
      sed -i "/${aprevSFS/=*/}/d" /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/configuration #precaution
      echo "$aprevSFS" >> /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/configuration #ex: EASY_LAYER_RO1=nvidia.sfs
      ln -srnf ${newNVSFS} /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/nvidia.sfs
     fi
    fi
   ;;
   *)
    #any others, carry them over...
    arealSFS="$(realpath /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${prevVER}/${anameSFS})"
    [ ! -e "$arealSFS" ] && continue
    sed -i "/${aprevSFS/=*/}/d" /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/configuration #precaution
    echo "$aprevSFS" >> /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/configuration
    cp -a -f --remove-destination /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${prevVER}/${anameSFS} /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/
   ;;
  esac
 done
fi

###load extra sfs on ro layer###
#the configuration file defines any more sfs files to load. easy.sfs is always loaded
# (on bottom), and session.sfs on top of ro layers.
. /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/configuration
#if [ "$xWKG_DEV" == "" ];then #190817 190914
 for NUM in 4 3 2 1
 do
  eval "ROsfs=\$EASY_LAYER_RO${NUM}" #implements indirection. EASY_LAYER_RO1=devx.sfs in configuration file, will assign 'devx.sfs' to ROsfs. 170320 170523
  if [ "$ROsfs" ];then
   #170523 check file exists...
   #181029 no longer have glob wildcard. ex: devx.sfs which is a symlink into 'sfs' folder...
   #20211122 if $ROsfs is a broken symlink, still want to detect it (see 20211111 below)...
   #FNDSFSS="$(ls -1 /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/${ROsfs} | tr '\n' ' ')"
   FNDSFSS="$(find /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION} -mindepth 1 -maxdepth 1 -name "${ROsfs}" | tr '\n' ' ')"
   for FNDSFS in $FNDSFSS
   do
    ANAME="$(basename $FNDSFS .sfs)" #ex: devx
    NAMEONLY="${ANAME/_*/}" #181029 precaution.
    #181029 all .sfs files must be under sfs folder, to avoid encryption (except for rw-*.sfs)...
    # this is a precaution, should already be done...
    if [ "$ANAME" != "$NAMEONLY" ];then
     mv -f /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/${ANAME}.sfs /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION}/
     ln -snf ../../sfs/easyos/${INIT_DISTRO_BINARY_COMPAT}/${INIT_DISTRO_COMPAT_VERSION}/${ANAME}.sfs /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/${NAMEONLY}.sfs
     ANAME="$NAMEONLY"
    fi
    
    #20211111 check sfs still exists... need full readlink from coreutils
    readlink -e /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/${ANAME}.sfs >/dev/null
    if [ $? -ne 0 ];then
     #not there.
     rm -f /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/${ANAME}.sfs
     sed -i "/EASY_LAYER_RO${NUM}/d" /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/configuration
     sed -i "/EASY_LAYER_RO${NUM}/d" /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/configuration-${INIT_DISTRO_VERSION} 2>/dev/null
     echo "  ${ANAME}.sfs ${S195:-extra squashfs file does not exist, removed from load-list.}" #S195='extra squashfs file does not exist, removed from load-list.'
     continue
    fi
    
    #20231124 for nvidia.sfs check that nvidia gpu exists... 20231118 fix...
    case "$ANAME" in
     nvidia*)
      lspci | grep -qF 'Class 0300: 10de:' #note, requires busybox lspci
      if [ $? -ne 0 ];then
       echo -e "\\033[1;31m${S400:-No NVIDIA GPU detected, so will not load NVIDIA SFS}\\033[0;39m" #red 'No NVIDIA GPU detected, so will not load NVIDIA SFS'
       continue
      fi
     ;;
    esac
    
    mkdir /easy_ro/$ANAME
    if [ "$xWKG_DEV" ];then #190914 copying session to ram.
     [ "$ANAME" == "devx" ] && continue
     [ "$ANAME" == "kernel" ] && continue
     echo "  ${S196:-Copying to RAM and mounting extra squashfs file:} ${ANAME}.sfs"
     cp -L -p -f /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/${ANAME}.sfs /easy_ro/ #200830 -p
     mount -r -t squashfs -o noatime,loop /easy_ro/${ANAME}.sfs /easy_ro/${ANAME}
    else
     echo "  ${S197:-Mounting extra squashfs file:} ${ANAME}.sfs"
     mount -r -t squashfs -o noatime,loop /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/${ANAME}.sfs /easy_ro/${ANAME}
    fi
    
    #20230910 now have usr-merge, check valid paths...
    #20221016 check valid library path...
    BADextra=0
    #if [ -h /easy_ro/easy_sfs/usr/lib64 ];then
    # if [ -e /easy_ro/${ANAME}/usr/lib64 ];then
    #  BADextra=1
    #  echo -e "\\033[1;31m${S198:-ERROR: /usr/lib64 incorrect path in SFS:} ${ANAME}.sfs\n${S199:-THIS SFS WILL NOT BE LOADED}\\033[0;39m" #red S198='ERROR: /usr/lib64 incorrect path in SFS:'
    # fi
    #fi
    #if [ -h /easy_ro/easy_sfs/usr/lib/x86_64-linux-gnu ];then
    # if [ -e /easy_ro/${ANAME}/usr/lib/x86_64-linux-gnu ];then
    #  BADextra=1
    #  echo -e "\\033[1;31m${S200:-ERROR: SFS does not have usr-merge folders:} ${ANAME}.sfs\n${S199:-THIS SFS WILL NOT BE LOADED}\\033[0;39m" #red S199='THIS SFS WILL NOT BE LOADED' S200='ERROR: /usr/lib/x86_64-linux-gnu incorrect path in SFS:'
    # fi
    #fi
    for aD in lib lib64 usr/lib/x86_64-linux-gnu usr/lib/aarch64-linux-gnu bin usr/sbin
    do
     if [ -e /easy_ro/${ANAME}/${aD} ];then
      if [ ! -h /easy_ro/${ANAME}/${aD} ];then
       BADextra=1
      fi
     fi
    done
    if [ $BADextra -eq 1 ];then
     echo -e "\\033[1;31m${S200:-ERROR: SFS does not have usr-merge folders:} ${ANAME}.sfs\n${S199:-THIS SFS WILL NOT BE LOADED}\\033[0;39m" #red S199='THIS SFS WILL NOT BE LOADED' S200='ERROR: SFS does not have usr-merge folders:'
     umount /easy_ro/${ANAME}
     if [ -f /easy_ro/${ANAME}.sfs ];then
      rm -f /easy_ro/${ANAME}.sfs
     fi
     continue
    fi
    
    #20231109 hack for nvidia sfs. NO, my sfs now has separate /etc/modprobe.d/nvidia.conf
    #case "$ANAME" in
    # nvidia*)
    #  #my sfs has nouveau in SKIPLIST, but user may have edited MODULESCONFIG...
    #  if [ -f /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/rc.d/MODULESCONFIG ];then
    #   grep -q ' nouveau ' /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/rc.d/MODULESCONFIG
    #   if [ $? -ne 0 ];then
    #    sed -i -e 's%^SKIPLIST=" %SKIPLIST=" nouveau %' /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/rc.d/MODULESCONFIG
    #   fi
    #  fi
    # ;;
    #esac
    
    EXTRASFS="/easy_ro/${ANAME}${RO}:${EXTRASFS}" #170206
    NEWEXTRASFSLIST="${ANAME}:${NEWEXTRASFSLIST}" #170919
   done
  fi
 done
#fi

#20230405
if [ ! -f /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/shadow ];then
 rootPW=''
 if [ "$PW" ];then
  rootPW="$PW"
 else
  ask_root_pw
 fi
 if [ "$rootPW" ];then
  #180612 set password for zeus... 180811 also root... 20220922 fix...
  echo -e "\\033[1;35m${S201:-First-bootup security setup...}\\033[0;39m" #purple
  echo "  ${S202:-Setting same password for users zeus and root}"
  ePW="$(cryptpw -m SHA512 ${rootPW})" #note: busybox mkpasswd is an alias for cryptpw
  mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}.session/etc #20241011
  grep -v -E '^zeus|^root' /easy_ro/easy_sfs/etc/shadow > /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/shadow
  echo "zeus:${ePW}:17693:0:99999:7:::
root:${ePW}:17693:0:99999:7:::" >> /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/shadow
  if [ "$EOS_SUPPORT_CONTAINERS" != "0" ];then
   for aCONT in `ls -1 /mnt/${WKG_DEV}/${WKG_DIR}containers` #desk console eqv ssh0 www
   do
    mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}containers/${aCONT}/.session/etc #20241011
    cp -a -f /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/shadow /mnt/${WKG_DEV}/${WKG_DIR}containers/${aCONT}/.session/etc/
   done
  fi
 fi
fi

#20230405
if [ ! -f /mnt/${WKG_DEV}/${WKG_DIR}.session/root/.gnupg/pubring.gpg ];then
 if [ -f /bin/gpg.gz ];then #20230425
  cd /bin
  gunzip gpg.gz
  chmod 755 gpg
  cd ..
 fi
 echo
 echo "${S304:-Creating gnupg signed key pair, at /root/.gnupg}"
 #20230507 generate hash from password...
 PASSPHRASE="$(echo -n ${rootPW}xxxx | argon2 ${SALT} -l 32 -r)" #64 byte hash.
 mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}.session/root/.gnupg
 chmod 700 /mnt/${WKG_DEV}/${WKG_DIR}.session/root/.gnupg
 cat >foo <<EOF
Key-Type: RSA
Key-Length: 2048
Subkey-Type: RSA
Subkey-Length: 2048
Name-Real: EasyOS user ${RANDOM}
Name-Comment: passphrase is hash from password
Name-Email: noone@nowhere.com
Expire-Date: 0
Passphrase: ${PASSPHRASE}
%commit
%echo done
EOF
 GNUPGHOME="/mnt/${WKG_DEV}/${WKG_DIR}.session/root/.gnupg" gpg --batch --gen-key foo
fi

###fix layers change###
OLDEXTRASFSLIST="$(grep '^EXTRASFSLIST=' /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/rc.d/PUPSTATE 2>/dev/null | cut -f 2 -d "'")"
[ -s /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/rc.d/PUPSTATE ] && [ "$NEWEXTRASFSLIST" != "$OLDEXTRASFSLIST" -o "$prevVER" != "" ] && /sbin/fixlayers "${WKG_DRV}" "${WKG_DEV}" "${NEWEXTRASFSLIST}" "${prevVER}" "${WKG_DIR}" "${prevCOMPAT}" #20240618

###hardware profiling###
#20211015 want hardware-profiling for /etc/modprobe.d ...
ModprobeHardwareProfile=''
mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d
#class ids are: 0300 video controller, 0403 audio device, 0106 sata controller, 0c03 usb controller, 0600 host bridge
#note, must use busybox lspci...
newModprobeHardwareProfile="$(lspci | grep -E 'Class 0300:|Class 0403:' | cut -f 4 -d ' ' | tr '\n' '+')" #ex: 8086:3e91+8086:3e91+
if [ "$newModprobeHardwareProfile" ];then
 if [ -f  /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d/ModprobeHardwareProfile ];then
  . /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d/ModprobeHardwareProfile
  if [ ! -d /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d.${ModprobeHardwareProfile} ];then
   cp -a /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d.${ModprobeHardwareProfile}
  fi
 fi
 if [ "$ModprobeHardwareProfile" != "$newModprobeHardwareProfile" ];then #20240626
  if [ -d /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d.${newModprobeHardwareProfile} ];then
   rm -rf /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d
   cp -a /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d.${newModprobeHardwareProfile} /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d
  else
   rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d/*
  fi
 fi
 #make sure they are synced...
 echo "ModprobeHardwareProfile='${newModprobeHardwareProfile}'" > /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d/ModprobeHardwareProfile
 rm -rf /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d.${newModprobeHardwareProfile}
 cp -a /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d.${newModprobeHardwareProfile}
fi

###broken video###
#20211014 kernel boot "qfix=vid nomodeset"
# ...see refind.conf and syslinux.conf, generated by 3buildeasydistro
if [ $BROKENVID -eq 1 ];then
 #prevent kernel drm gpu modules from loading...
 #instead of modeprobe.blacklist=nouveau modeprobe.blacklist=i915 modeprobe.blacklist=radeon modeprobe.blacklist=amdgpu modeprobe.blacklist=gma500_gfx
 echo 'blacklist amdgpu
blacklist gma500_gfx
blacklist i915
blacklist nouveau
blacklist radeon' > /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/modprobe.d/gpu.conf
 # so whatever framebuffer currently active, run xorgwizard-cli...
 # firstly, get rid of previous settings...
 mkdir -p /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/X11
 rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/X11/xorg.conf 2>/dev/null
 rm -rf /mnt/${WKG_DEV}/${WKG_DIR}.session/etc/xorg.conf.d 2>/dev/null
 # now set a flag, /root/.profile will run xorgwizard-cli...
 touch /mnt/${WKG_DEV}/${WKG_DIR}.brokenvideo
fi

###maybe copy session to zram###
#190817 see qfix=lock2 boot param.
if [ "$xWKG_DEV" ];then
 echo -e "\\033[1;35m${S210:-Copying last working session to RAM}\\033[0;39m"
 #note: won't work for overlayfs, need somewhere for the workingdir.
 mkdir -p /xram
 mount -t $xWKG_FS /dev/zram0 /xram
 #now copy stuff...
 cp -a /skeleton/* /xram/
 mkdir /xram/.session
 cp -a /mnt/${WKG_DEV}/${WKG_DIR}.session/* /xram/.session/
 cp -a /mnt/${WKG_DEV}/${WKG_DIR}.session/.wh..wh* /xram/.session/ 2>/dev/null #? 191211
 #we cannot have containers, maybe...
 #if [ "$CAPS_DROP" ];then #190818 see also further down. 200824 remove if
 [ "$EOS_SUPPORT_CONTAINERS" != "0" ] && rm -rf /xram/containers/*
 #fi
 #200824 copy files that are outside .session. 200827 INIT_DISTRO_VERSION instead of DISTRO_VERSION...
 #20211205 note, /files is now in easy.sfs
 #20211208 problem is, files folder could get very large. only copy /files/shared...
 mkdir -p /xram/files
 chmod 770 /xram/files
 chgrp 122 /xram/files
 #cp -a /mnt/${WKG_DEV}/${WKG_DIR}files/* /xram/files/
 cp -a /mnt/${WKG_DEV}/${WKG_DIR}files/shared /xram/files/
 mkdir -p /xram/releases/easy-${INIT_DISTRO_VERSION}
 cp -a /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/configuration /xram/releases/easy-${INIT_DISTRO_VERSION}/
 cp -a /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/configuration-${INIT_DISTRO_VERSION} /xram/releases/easy-${INIT_DISTRO_VERSION}/
 mkdir -p /xram/sfs/easyos/${DISTRO_BINARY_COMPAT}/${DISTRO_COMPAT_VERSION} #note, sfss already copied into ram if loaded.
 #200826 mimic same path in zram for sfs files, with link (cannot have hard link)...
 yEXTRASFSS="$(echo "$NEWEXTRASFSLIST" | tr ':' ' ')"
 for aSFS in easy $yEXTRASFSS
 do
  aFULL="$(readlink -n /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${INIT_DISTRO_VERSION}/${aSFS}.sfs | rev | cut -f 1 -d '/' | rev)" #ex: easy_2.4_amd64.sfs.sfs
  #links will be valid after bootup...
  ln -s /mnt/.easy_ro/${aSFS}.sfs /xram/sfs/easyos/${DISTRO_BINARY_COMPAT}/${DISTRO_COMPAT_VERSION}/${aFULL} #20220524
  ln -s ../../sfs/easyos/${DISTRO_BINARY_COMPAT}/${DISTRO_COMPAT_VERSION}/${aFULL} /xram/releases/easy-${INIT_DISTRO_VERSION}/${aSFS}.sfs
 done
 #200827 also copy the .png and .specs files... 20250203 hide err...
 cp -a -u /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${DISTRO_BINARY_COMPAT}/${DISTRO_COMPAT_VERSION}/*.specs /xram/sfs/easyos/${DISTRO_BINARY_COMPAT}/${DISTRO_COMPAT_VERSION}/ 2>/dev/null
 cp -a -u /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${DISTRO_BINARY_COMPAT}/${DISTRO_COMPAT_VERSION}/*.png /xram/sfs/easyos/${DISTRO_BINARY_COMPAT}/${DISTRO_COMPAT_VERSION}/ 2>/dev/null
 sync
 WKG_DEV='zram0'
 WKG_FS="$xWKG_FS"
 WKG_DIR=''
 SESSIONHOME="/xram/.session"
else
 SESSIONHOME="/mnt/${WKG_DEV}/${WKG_DIR}.session"
fi

if [ "$EOS_SUPPORT_CONTAINERS" != "0" ];then
 #20211111 delete container if no longer valid... 20211208 /mnt/zram0/containers does not exist...
 ECnames="$(find /mnt/${WKG_DEV}/${WKG_DIR}containers -mindepth 1 -maxdepth 1 -type d 2>/dev/null | rev | cut -f 1 -d '/' | rev | tr '\n' ' ')"
 for aECname in ${ECnames}
 do
  if [ -d /mnt/${WKG_DEV}/${WKG_DIR}containers/${aECname} ];then #precaution
   #20211122 -e test won't see it if broken symlink...
   #if [ -e /mnt/${WKG_DEV}/${WKG_DIR}containers/${aECname}/${aECname}.sfs ];then
   aECsfs="$(find /mnt/${WKG_DEV}/${WKG_DIR}containers/${aECname} -mindepth 1 -maxdepth 1 -name "${aECname}.sfs")"
   if [ "${aECsfs}" ];then
    #need full readlink from coreutils...
    readlink -e /mnt/${WKG_DEV}/${WKG_DIR}containers/${aECname}/${aECname}.sfs >/dev/null
    if [ $? -ne 0 ];then
     rm -rf /mnt/${WKG_DEV}/${WKG_DIR}containers/${aECname}
     rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/usr/sbin/ec-chroot-${aECname} 2>/dev/null
     rm -f /mnt/${WKG_DEV}/${WKG_DIR}.session/usr/share/applications/ec-${aECname}.desktop 2>/dev/null
     sed -i "/ec-chroot-${aECname}/d" /mnt/${WKG_DEV}/${WKG_DIR}.session/root/Choices/ROX-Filer/PuppyPin 2>/dev/null
     sed -i "/ec-chroot-${aECname}/d" /mnt/${WKG_DEV}/${WKG_DIR}.session/root/Choices/ROX-Filer/PuppyPinBACKUP 2>/dev/null
    fi
   fi
  fi
 done
fi


###the big moment, create layered f.s.###
#echo -e "\\033[1;35mCreating layered filesystem, with read-write folder: /mnt/${WKG_DEV}/.session\\033[0;39m"
if [ $EOS_TOP_LEVEL_ZRAM -eq 1 ];then #20220521
 create_top_level_zram1
 mount -t ext2 /dev/zram1 /easy_rw
 mkdir /easy_rw/mainrw #20220529 mainrw will be the aufs top-level layer.
 if [ "$EOS_SUPPORT_CONTAINERS" != "0" ];then #20220529
  #these will be the rw layer for containers...
  mkdir /easy_rw/www
  mkdir /easy_rw/console
  mkdir /easy_rw/ssh0
  mkdir /easy_rw/${INIT_DISTRO_COMPAT_VERSION} #ex: dunfell, bookworm
  #mkdir /easy_rw/eqv #20241011
 fi
 rmdir /easy_rw/lost+found #20220615
fi
sync
echo -e "\\033[1;35m${S220:-Creating layered filesystem, type:} ${LAYERFS}\\033[0;39m"
if [ "$LAYERFS" == "aufs" ];then #170525 20220521
 if [ $EOS_TOP_LEVEL_ZRAM -eq 1 ];then #20220521 20220529
  mount -t aufs -o br=/easy_rw/mainrw=rw:${SESSIONHOME}=ro+wh:${sessionSFS}${EXTRASFS}/easy_ro/easy_sfs=ro aufs /easy_new
 else
  mount -t aufs -o br=${SESSIONHOME}=rw:${sessionSFS}${EXTRASFS}/easy_ro/easy_sfs=ro aufs /easy_new
 fi
else
 if [ $EOS_TOP_LEVEL_ZRAM -eq 1 ];then #20230429
  mkdir /easy_rw/tempwork
  #not using $sessionSFS anymore. lowerdir=dir1:dir2:dri3 dir3 is lowest.
  mount -t overlay -o lowerdir=${SESSIONHOME}:${EXTRASFS}/easy_ro/easy_sfs,upperdir=/easy_rw/mainrw,workdir=/easy_rw/tempwork overlay /easy_new
 else
  mount -t overlay -o lowerdir=${EXTRASFS}/easy_ro/easy_sfs,upperdir=${SESSIONHOME},workdir=/mnt/${WKG_DEV}/${WKG_DIR}.tempwork overlay /easy_new
 fi
fi
[ $? -ne 0 ] && err_exit "${S221:-Failed to create layered filesystem}"

###setup PUPSTATE###
#/etc/rc.d/rc.sysinit will append to PUPSTATE, get the ball rolling here...
#PUPMODE, bit-1 (partition has session), bit-2 (bottom layer is sfs) --rough equiv to puppy
#200823 also want WKG_UUID...
echo -e "PUPMODE=6\nWKG_UUID='${WKG_UUID}'\nWKG_DEV='${WKG_DEV}'\nWKG_FS='${WKG_FS}'\nWKG_DIR='${WKG_DIR}'\nQSFS_PATH='${QSFS_PATH}'" > /easy_new/etc/rc.d/PUPSTATE
if [ "$origWKG_DEV" != "$WKG_DEV" ];then #200808 200822
 echo -e "origWKG_DEV='${origWKG_DEV}'\norigWKG_FS='${origWKG_FS}'\norigWKG_UUID='${origWKG_UUID}'\norigWKG_DIR='${origWKG_DIR}'" >> /easy_new/etc/rc.d/PUPSTATE
fi
echo "WKGDRV_SPEED=${TIME10k}" >> /easy_new/etc/rc.d/PUPSTATE #20220611
echo "EXTRASFSLIST='${NEWEXTRASFSLIST}'" >> /easy_new/etc/rc.d/PUPSTATE
echo "EOS_TOP_LEVEL_ZRAM='${EOS_TOP_LEVEL_ZRAM}'" >> /easy_new/etc/rc.d/PUPSTATE #20220521
echo "EOS_SUPPORT_CONTAINERS='${EOS_SUPPORT_CONTAINERS}'" >> /easy_new/etc/rc.d/PUPSTATE #20220525
#echo "EOS_LOGIN_ZEUS='${EOS_LOGIN_ZEUS}'" >> /easy_new/etc/rc.d/PUPSTATE #20221030 20221102 remove
#echo "BOOT_PW_FLG='${PW//[a-zA-Z0-9]/X}'" >> /easy_new/etc/rc.d/PUPSTATE #180811 a flag so main f.s. will know if a pw was entered.
echo "BOOT_PW_FLG='${PW/*[a-zA-Z0-9]*/X}'" >> /easy_new/etc/rc.d/PUPSTATE #180811 set to "X" if $PW has something in it. note, used in /usr/local/EasyShare
echo "BOOT_CAPS_DROPPED='${CAPS_DROP}'" >> /easy_new/etc/rc.d/PUPSTATE #190812 comma-delimited
#200820 also want BOOT_UUID. 200823 want BOOT_LOCK ...
[ "$LOCKDOWN" ] && echo "BOOT_LOCK='${LOCKDOWN}:${LOCKkeep}'" >> /easy_new/etc/rc.d/PUPSTATE

if [ "$WKG_LOOP" ];then #20210524
 echo "WKG_LOOP='${WKG_LOOP}'" >> /easy_new/etc/rc.d/PUPSTATE
fi

#20230112
if [ "$QLANG" ];then
 grep -q "^LANG=${QLANG}_" /easy_new/etc/profile
 if [ $? -ne 0 ];then
  if [ "$BASELANG" ];then #20230123 from ask-country-x
   sed -i -e "s%^LANG=.*%LANG=${BASELANG}.UTF-8%" /easy_new/etc/profile
  else
   #20230221 oh, busybox ash does not support ${QLANG^^} capitalization
   QLcaps="$(echo -n "$QLANG" | tr '[a-z]' '[A-Z]')"
   case "$QLANG" in #20240909 ref /sbin/ask-language line 36
    cs) QLcaps='CZ' ;;
    el) QLcaps='GR' ;;
    en) QLcaps='US' ;;
    et) QLcaps='EE' ;;
    sl) QLcaps='SK' ;;
    sq) QLcaps='AL' ;;
    sr) QLcaps='RS' ;;
    sv) QLcaps='SE' ;;
    uk) QLcaps='UA' ;;
    zh) QLcaps='CN' ;;
   esac
   sed -i -e "s%^LANG=.*%LANG=${QLANG}_${QLcaps}.UTF-8%" /easy_new/etc/profile
  fi
 fi
fi

#200623 log stuff for debugging...
mkdir -p /easy_new/root/.initrd-debug
echo "$BLKIDS" > /easy_new/root/.initrd-debug/BLKIDS
ls -l /dev > /easy_new/root/.initrd-debug/ls-dev
cat /proc/fb > /easy_new/root/.initrd-debug/proc-fb #20211023

[ "$DROPOUT" == "5" ] && exit_to_initrd " ${S222:-Exited from init script, before moving mount points to wkg f.s.}"

###relocate mount-points prior to switch_root###
echo -e "\\033[1;35m${S230:-Performing a switch_root onto the layered filesystem}\\033[0;39m" #purple
#move the mount points...
[ ! -d /easy_new/mnt/.easy_ro ] && mkdir /easy_new/mnt/.easy_ro #20220524
[ ! -d /easy_new/mnt/.easy_rw ] && mkdir /easy_new/mnt/.easy_rw #20220521
[ ! -d /easy_new/mnt/${WKG_DEV} ] && mkdir /easy_new/mnt/${WKG_DEV}
mount -o move /easy_ro /easy_new/mnt/.easy_ro #20220524
if [ "$LOCKDOWN" == "" ];then #20220601 not used in lockdown-in-ram...
 if [ $EOS_TOP_LEVEL_ZRAM -eq 1 ];then #20220624
  mount -o move /easy_rw /easy_new/mnt/.easy_rw #20220521 20220524
 fi
fi

#20201211 MochiMoppel has suggested use hdparm to power-down the internal drives...
if [ "$xWKG_DEV" ];then #note, in future could test for $LOCKDOWN instead of $xWKG_DEV
 if [ "$CAPS_DROP" ];then
  # ref: https://forum.puppylinux.com/viewtopic.php?f=54&t=1583
  echo -n '' > /easy_new/root/.initrd-debug/hdparm-power-down
  #REMDRVS="$(echo "$BLKIDS" | grep -o -E '^/dev/sd[a-z]|^/dev/nvme[0-9]n[0-9]|^/dev/mmcblk[0-9]' | sort -u | grep -v "${WKG_DRV}" | tr '\n' ' ')"
  REMDRVS="$(echo "$BLKIDS" | grep -o '^/dev/sd[a-z]' | sort -u | grep -v "${WKG_DRV}" | tr '\n' ' ')"
  for aREMDRV in $REMDRVS
  do
   #20220526 restrict power-down to internal sata platter drives...
   readlink /sys/block/${aREMDRV##*/} | grep -q '/ata[0-9]'
   if [ $? -eq 0 ];then
    HDDflg="$(cat /sys/block/${aREMDRV##*/}/queue/rotational)" #1 if magnetic platter drv, 0 if ssd.
    #if [ "$HDDflg" != "0" ];then #0 it is an SSD
    # #20220526 hdparm only works for sata drives...
    # #20220522 bugger, the kernel gets it right for internal nvme ssd, wrong for usb flash...
    # hdparm -I /dev/${aREMDRV##*/} 2>/dev/null | grep -q 'Media Rotation Rate: [0-9]'
    # [ $? -ne 0 ] && HDDflg="0"
    #fi
    if [ "$HDDflg" == "1" ];then
     echo "${S231:-Powering-down drive:} ${aREMDRV}"
     echo "Powering-down drive: ${aREMDRV}" >> /easy_new/root/.initrd-debug/hdparm-power-down
     #ref: https://www.linux-magazine.com/Online/Features/Tune-Your-Hard-Disk-with-hdparm
     cttyhack /bin/hdparm -Y ${aREMDRV} >> /easy_new/root/.initrd-debug/hdparm-power-down 2>&1
     sleep 0.1
    fi
   fi
  done
 fi
fi

#20220125
if [ -f /resize2fs.log ];then
 cp -f /resize2fs.log /easy_new/root/.initrd-debug/
fi
if [ -f /tune2fs.log ];then #20220517
 cp -f /tune2fs.log /easy_new/root/.initrd-debug/
fi

#200623 previously had static /dev, then here mounted devtmpfs at /easy_new/dev
# but now have mounted devtmpfs at start of init script. so just move..
mount -o move /dev /easy_new/dev

#200830 however, in lockdown #2 cannot create device nodes, so make them here...
[ ! -e /easy_new/dev/ppp ] && mknod /easy_new/dev/ppp c 108 0 #jafadmin: gpptp needs /dev/ppp (moved from rc.sysinit 200522)
#[ ! -e /easy_new/dev/rfcomm0 ] && mknod /easy_new/dev/rfcomm0 c 216 0 #ref: /usr/sbin/get_bluetooth_connection

if [ "$xWKG_DEV" ];then #190817 200809 note, in future could test for $LOCKDOWN instead of $xWKG_DEV
 mount -o move /xram /easy_new/mnt/${WKG_DEV} #WKG_DEV has been changed to zram0 earlier.
 ln -snf ${WKG_DEV} /easy_new/mnt/wkg
 #200809 new "save" icon on desktop, replace "update" icon... 200820 do not hard-code coords...
 #PTN1='s%.*easy\-update.*%  <icon x="544" y="32" label="save">/usr/sbin/lockdown-save</icon>%'
 #20201211 /usr/share/sss/initrd_strings/initd_strings* has translation for "save", but don't assume anything for "update"...
 #PTN1='s%label="update">/usr/sbin/easy-update%label="save">/usr/sbin/lockdown-save%'
 PTN1='s%label="[^"]*">/usr/bin/easy-update%label="save">/usr/bin/lockdown-save%' #20250203
 sed -i -e "$PTN1" /easy_new/root/Choices/ROX-Filer/PuppyPin
 sed -i -e '/ask\-save\-zram1/d' /easy_new/root/Choices/ROX-Filer/PuppyPin #20220601 remove zram1 "save" icon.
 if [ "$EOS_SUPPORT_CONTAINERS" != "0" ];then
  #200823 do these for both lockdown modes...
  #take out the pre-created "www", "console", "desk" container desktop icons...
  sed -i '/ec\-chroot\-/d' /easy_new/root/Choices/ROX-Filer/PuppyPin
  #sed -i '/sfsget/d' /easy_new/root/Choices/ROX-Filer/PuppyPin #"sfsget" 200824 keep
  if [ -f /easy_new/root/Choices/ROX-Filer/PuppyPinBACKUP ];then
   sed -i '/ec\-chroot\-/d' /easy_new/root/Choices/ROX-Filer/PuppyPinBACKUP
   #sed -i '/sfsget/d' /easy_new/root/Choices/ROX-Filer/PuppyPinBACKUP #"sfsget" 200824 keep
  fi
 fi
 
 #20220211 if icon-free desktop, icons are in jwm tray... 20220212 fix...
 sed -i -e 's%"update%"save%g' /easy_new/root/.jwmrc-tray
 sed -i -e 's%exec:easy-update%exec:lockdown-save%' /easy_new/root/.jwmrc-tray
 
 for aAPP in easy-update easy-bootmanager easy-containers easy-version-control #190914 200805
 do
  [ ! -f /easy_new/usr/share/applications/${aAPP}.desktop ] && continue
  aLABEL="$(grep '^Name=' /easy_new/usr/share/applications/${aAPP}.desktop | cut -f 2 -d '=')"
  rm -f /easy_new/usr/share/applications/${aAPP}.desktop
  sed -i "/${aLABEL}/d" /easy_new/root/.jwmrc #200827 however, .jwmrc gets reconstructed by rc.sysinit
  [ -f /easy_new/root/.jwmrc3 ] && sed -i "/${aLABEL}/d" /easy_new/root/.jwmrc3
 done
 rm -f /easy_new/usr/share/applications/ec-*.desktop 2>/dev/null
 rm -f /easy_new/usr/sbin/ec-chroot-* 2>/dev/null
 sed -i '/ec\-chroot\-/d' /easy_new/root/.jwmrc #200827 ditto, don't need to do this. etc...
 [ -f /easy_new/root/.jwmrc3 ] && sed -i '/ec\-chroot\-/d' /easy_new/root/.jwmrc3 #190914
 #200806 200826 these not appropriate for booting to zram...
 sed -i '/wmreboot rollback/d' /easy_new/root/.jwmrc
 sed -i '/lockdown-ram/d' /easy_new/root/.jwmrc
 sed -i '/wmreboot fscheck/d' /easy_new/root/.jwmrc
 sed -i '/debug-initrd/d' /easy_new/root/.jwmrc
 #20026 ditto...
 sed -i '/wmreboot rollback/d' /easy_new/etc/xdg/templates/_root_.jwmrc
 sed -i '/lockdown-ram/d' /easy_new/etc/xdg/templates/_root_.jwmrc
 sed -i '/wmreboot fscheck/d' /easy_new/etc/xdg/templates/_root_.jwmrc
 sed -i '/debug-initrd/d' /easy_new/etc/xdg/templates/_root_.jwmrc
 #rm -f /easy_new/usr/local/easy_containers/ec-fix-desktop
 #200823 so less to do here...
 if [ "$CAPS_DROP" ];then #190818
  #190914 also remove "petget" and "sfsget" desktop icons, and from menu...
  #200805 have to handle translated PuppyPin... 200824 keep...
  #sed -i '/dotpup/d' /easy_new/root/Choices/ROX-Filer/PuppyPin #"petget"
  #sed -i '/wizardwizard/d' /easy_new/root/Choices/ROX-Filer/PuppyPin #"setup"
  #sed -i '/easy\-update/d' /easy_new/root/Choices/ROX-Filer/PuppyPin #200805 "update"
  ##move "edit" and "console" left to fill gap...
  #sed -i 's%x="416" y="32"%x="224" y="32"%' /easy_new/root/Choices/ROX-Filer/PuppyPin
  #sed -i 's%x="480" y="32"%x="288" y="32"%' /easy_new/root/Choices/ROX-Filer/PuppyPin
  #if [ -f /easy_new/root/Choices/ROX-Filer/PuppyPinBACKUP ];then
  # sed -i '/dotpup/d' /easy_new/root/Choices/ROX-Filer/PuppyPinBACKUP #"petget"
  # sed -i '/wizardwizard/d' /easy_new/root/Choices/ROX-Filer/PuppyPinBACKUP #"setup"
  # sed -i '/easy\-update/d' /easy_new/root/Choices/ROX-Filer/PuppyPinBACKUP #200805 "update"
   #sed -i 's%x="416" y="32"%x="224" y="32"%' /easy_new/root/Choices/ROX-Filer/PuppyPinBACKUP
   #sed -i 's%x="480" y="32"%x="288" y="32"%' /easy_new/root/Choices/ROX-Filer/PuppyPinBACKUP
  #fi
  for aAPP in PETget-package-manager PupControl #190914 200805
  do
   [ ! -f /easy_new/usr/share/applications/${aAPP}.desktop ] && continue
   aLABEL="$(grep '^Name=' /easy_new/usr/share/applications/${aAPP}.desktop | cut -f 2 -d '=')"
   rm -f /easy_new/usr/share/applications/${aAPP}.desktop
   sed -i "/${aLABEL}/d" /easy_new/root/.jwmrc
   [ -f /easy_new/root/.jwmrc3 ] && sed -i "/${aLABEL}/d" /easy_new/root/.jwmrc3
  done
  rm -rf /easy_new/root/.pup_event/* 2>/dev/null #190818
  #190818 requires that cap_mknod be dropped...
  rm -f /easy_new/dev/mm* 2>/dev/null
  rm -f /easy_new/dev/nv* 2>/dev/null
  rm -f /easy_new/dev/sd* 2>/dev/null
 fi
else
 mount -o move /mnt/${WKG_DEV} /easy_new/mnt/${WKG_DEV}
 #if [ "$WKG_LOOP" ];then #20210524 move mounted save-file...  20210525 seems not needed.
 # mount -o move /mnt/${WKG_DEV}/${WKG_DIR%/} /easy_new/mnt/${WKG_DEV}/${WKG_DIR%/}
 #fi
fi

#200301 ***CURRENTLY NOT USING***
CHROOT='' #'1'
[ "$WKG_DEV" == "zram0" ] && CHROOT=''

#20240428 copy this hwclock
if [ -e /bin/hwclock ];then
 #--remove-destination in case target is a busybox symlink...
 cp -a -f --remove-destination /bin/hwclock /easy_new/usr/bin/
fi
#20240413 problems with button labels different versions, copy this for consistency...
if [ -e /bin/dialog ];then
 cp -a -f --remove-destination /bin/dialog /easy_new/usr/bin/
fi


#190811 redesign so can drop linux-capabilities (also changed /etc/rc.d/rc.sysinit)...
#sync
#umount /sys
#umount /proc
cp -a -f /bin/capsh /easy_new/sbin/ #200828 -a
if [ "$CHROOT" ];then
 mount -o move /sys /easy_new/sys
 mount -o hidepid=1 -t proc none /easy_new/proc #20210407
 #keep /proc mounted in initrd.
else
 mount -o move /sys /easy_new/sys
 mount -o move /proc /easy_new/proc
fi
SECFSflg=0
if [ -e /easy_new/sys/kernel/security ];then #20201206 have compiled 4.19.161 without CONFIG_SECURITYFS
 mount -t securityfs securityfs /easy_new/sys/kernel/security #200820
 [ $? -eq 0 ] && SECFSflg=1
fi
mkdir -p /easy_new/dev/pts
mount -t devpts devpts /easy_new/dev/pts
HALFK=$(($FREEK/2))
QTRK=$(($FREEK/4))
mkdir -p /easy_new/dev/shm
mount -t tmpfs -o size=${QTRK}k shmfs /easy_new/dev/shm
if [ "$WKG_DEV" != "zram0" -a "$EOS_TOP_LEVEL_ZRAM" != "1" ];then #don't bother if will be running in zram. 20220523
 mount -t tmpfs -o size=${HALFK}k tmpfs /easy_new/tmp
fi

[ "$DROPOUT" == "6" ] && exit_to_initrd " ${S232:-Exited from init script, just before switch_root.}"

sync
[ -f /easy_new/.shutdown-req ] && rm -f /easy_new/.shutdown-req #200301
if [ "$CAPS_DROP" == "" ];then #190812
 if [ "$CHROOT" ];then #200301
#  mkdir -p /easy_new/mnt/initrd
#  cd /easy_new
#  pivot_root . mnt/initrd
#  exec chroot . /sbin/init <dev/console >dev/console 2>&1
  #when /easy_new/.shutdown-req modified, /initrd-shutdown is called...
  touch /easy_new/.shutdown-req
  inotifyd /initrd-shutdown /easy_new/.shutdown-req:c &
  exec chroot /easy_new /sbin/init
 else
  exec switch_root /easy_new /sbin/init
 fi
else
 if [ $SECFSflg -eq 1 ];then #20201206 note, lockdown only works 5.4+ kernels.
  echo confidentiality > /easy_new/sys/kernel/security/lockdown #200820 instead of "lockdown=confidentiality" boot param.
 fi
 #190811 drop capbilities when switch_root...
 #capsh --drop=cap_sys_mount -- -c "exec switch_root /easy_new /sbin/init"
 #this is another way of doing it...
 exec switch_root /easy_new /sbin/capsh --drop=${CAPS_DROP} -- -c "exec /sbin/init"
fi

###END###

#!/bin/bash
#20210906 based on support/setup-spot
#20230409 also called from /usr/local/appi/appi, /usr/local/flapi/flapi
#20230805 also called from /usr/local/clients/choose-clients
#called from dir2sfs, 3buildeasydistro
# intention is the following:
# call from 3builddistro, current dir is inside 'sandbox3'.
# also want to call from LoginManager (/usr/sbin/loginmanager) from running puppy.
# pass in space-delimited name of app to run as a client, with false or true.
# ex: 'seamonkey=true'
# ...=true means turn on running in client, =false turn off. no parameter then do nothing.
#20210913 need to allow write inside encrypted fs. see also rc.sysinit, run-as-spot, setup-spot
#20210914 ${APPpath} fix for appended ${PREFIXDIR1}
#20210915 rename ${PREFIXDIR1}/clients/${APPname} to .${APPname}, if change back to run as root.
#20210915 add $ROOTARG for any commandline arg that requires app to run as root.
#20210915 optional $2=$PREFIXDIR2, when call from dir2sfs.
#20210915 when an sfs created by dir2sfs, some operations need to be delayed.
#20210915 add app to fscryptgrp.
#20210916 do not preset $DISPLAY. not using .Xauthority. modify chown.
#20210916 detect if running in container.
#20210916 "#CLIENTMARKER ${APPname}" read by /usr/local/easy_containers/ec-chroot
#20210916 crippled-root in container, some operations have to be done in ec-chroot.
#20210917 do not create client folders when called from dir2sfs. it will be done at runtime.
#20210918 revert 20210917. another delay.
#20210919 /clients now /home
#20210927 gtk3 scrollbar fixes.
#20211003 removed chromium "--test-type"
#20211004 kill old processes. sometimes happens with seamonkey and chromium.
#20211005 improve the generated app script.
#20211007 commandline fix for chromium no audio at youtube.
#20211007 also odd, have to add the extra option for audio crippled-root in container.
#20211022 chromium_true|false now handles chrome.
#20211022 chrome|chromium: fix if path has "/root/"
#20211103 support pulseaudio. ref: comments in /root/Startup/pulseaudio
#  see also /usr/local/clients/create-client-environment
#20211104 firefox playing videos, need belong 'video' group.
#20211107 add installer function for firefox. modify prefs.js in sandbox.
#20211108 permissions so that ff can auto-update.
#20211110 revert 20211108, as have disabled updating. now update when build in woofq.
#20211110 alternative way to disable sandbox in container. 20211111 fix.
#20211201 change msg 1st time run firefox.
#20211205 /home/*/Downloads is now symlink to /files/downloads. 20211206 no.
#20211206 new group 'filesgrp'. copy /root/.config/user-dirs.dirs
#20211213 my latest chromium pet already has a properly setup Preferences file.
#20220107 set MOZILLA_FIVE_HOME for firefox and seamonkey.
#20220914 bring back "--test-type" for chrome. new $ALWAYSOPTS
#20220916 /usr/local/easy_containers/templates/$APPname/specs may have TEMPLATE_ACCESS_MOZBARE='yes' (ex: blender)
#20220916 blender.
#20220923 setup for spot in container.
#20230302 support vivaldi --no-sandbox for crippled-root in container.
#20230330 prevent other apps from seeing in home folder.
#20230409 /usr/local/flapi/flapi has already created /home/${APPname}, so test for .config
#20230409 a bit tricky coz /home/<app> is symlink for flatpaks.
#20230412 .DirIcon symlink and target of commandline-symlink must have same owner:group as parent folder.
#20230502 support fscrypt v2
#20230511 run dbus-launch in <app>.bin  20230512 fix.
#20230528 setgid bit. ref: https://bkhome.org/news/202305/setting-up-permissions-under-files-take-2.html
#20230617 create /files/apps/$APPname (but not when called from 3buildeasydistro or dir2sfs)
#20230708 scribus.
#20230904 set xARCHDIR
#20231105 remove old fscrypt v1 code. firefox: test policies.json exist. run firefox-pre-start
#20231105 new $ALWAYSCODE -- always run this.
#20231115 client scripts must all run as root.
#20231126 chromium: avoid "CBCM is not enabled" msg in terminal.
#20231126 chromium: disable hw accel.
#20231213 firefox: fix start 2nd instance. ref: https://discourse.mozilla.org/t/how-does-firefox-discover-a-running-instance-to-connect-to/109957
#20231215 chrome fix.
#20231217 ff: remove hardware accel has been disabled popup msg.
#20240118 now have global /etc/gtk-3.0/settings.ini
#20240224 woofv compat.
#20240308 icon naming may be different, ex: org.gnome.GHex.svg
#20240311 changes testing exist .bin, .bin0
#20240503 remove woofV.
#20240511 fix for official chromium d/l.
#20240511 the official chromium pkg puts up msg that google api keys missing. disable. 20240513 revert.
#20240515 handle ungoogled chromium.
#20240703 predetermined gid and uid. 20240704 precaution.
#20240705 adduser/addgroup problem pre-existing entries in host /etc/passwd,group
#20240705 fix create /files/apps/<name> when called in woofq.
#20240912 fix if param passed to .bin has a space char.
#20241108 commented-out a killall. ref: https://forum.puppylinux.com/viewtopic.php?p=135190#p135190
#20241212 allow apps to run non-root in containers.
#20241223 opera params.
#20250209 chromium limit cache ref: https://forum.puppylinux.com/viewtopic.php?t=13807  20250210

APPname="${1/=*/}"  #ex: seamonkey
APPflag="${1/*=/}" #ex: true
[ ! "$APPname" ] && exit 1
[ "$APPflag" != "true" -a "$APPflag" != "false" ] && exit 2

#20210915
PREFIXDIR1=''     #note: loginmanager will not pass a $2
PREFIXDIR2="${2}" #dir2sfs will pass this, when creating an sfs.
if [ -d ./rootfs-complete ];then
 PREFIXDIR1='rootfs-complete' #running in woofQ.
fi
if [ "$PREFIXDIR2" ];then
 PREFIXDIR1="${PREFIXDIR2}"
fi

if [ ! "$PREFIXDIR2" ];then #do not do this if building an sfs in dir2sfs...
 touch ${PREFIXDIR1}/root/.clients-status
fi

if [ "$APPflag" == "true" ];then #20210915
 #bring back previously hidden folder...
 if [ ! -d ${PREFIXDIR1}/home/${APPname} ];then
  if [ -d ${PREFIXDIR1}/home/.${APPname} ];then
   mv -f ${PREFIXDIR1}/home/.${APPname} ${PREFIXDIR1}/home/${APPname}
  fi
 fi
 
 #20240311 if this already exist, get out...
 if [ -e ${PREFIXDIR1}/usr/bin/${APPname}.bin ];then
  exit 1
 fi
fi

#20230511 20230512 20240311
#create .bin and .bin0 ...
gen_bin_func() {
 local APPin
 APPin="${PREFIXDIR1}${APPpath}/${APPname}"
 #20230512 only want .bin0 if not appimage or flatpak...
 grep -q DBUS_SESSION_BUS_PID ${APPin}
 if [ $? -eq 0 ];then
  mv -f ${APPin} ${APPin}.bin
  return
 fi
 #if [ ! -e ${APPin}.bin0 ];then
  mv -f ${APPin} ${APPin}.bin0
 #fi
 #hmmm, 3buildeasydistro creates chromium.bin with APPin=rootfs-complete/usr/bin/chromium
 #20231213 prevent 2nd instance dbus-daemon...
 echo -n '' > ${APPin}.bin
 cat <<'EOF1' >> ${APPin}.bin
#!/bin/sh
#20240912 instead of passing $@ to *.bin0, put quotes if space...
ARGS=""
if [ -n "$1" ];then
 while [ -n "$1" ]
 do
  #do not put quotes around if a single word. example is "-edit" for seamonkey, the quotes stuff it up entirely...
  if [ "${1/ /}" == "${1}" ];then
   ARGS="${ARGS} ${1}"
  else
   ARGS="${ARGS} \"${1}\""
  fi
  shift
 done
fi
EOF1

echo "busybox ps | grep -q '${APPname:0:8}.*dbus\-daemon'
DBUSflg=\$?
if [ \$DBUSflg -ne 0 ];then
 export \$(dbus-launch) #if app needs to access dbus.
 echo \"DBUS_SESSION_BUS_ADDRESS='\${DBUS_SESSION_BUS_ADDRESS}'
DBUS_SESSION_BUS_PID='\${DBUS_SESSION_BUS_PID}'\" > \${HOME}/.DBUS-DAEMON-VARS
else 
 if [ -s \${HOME}/.DBUS-DAEMON-VARS ];then
  eval \$(cat \${HOME}/.DBUS-DAEMON-VARS)
  export DBUS_SESSION_BUS_ADDRESS DBUS_SESSION_BUS_PID
 fi
fi
${APPpath}/${APPname}.bin0 \$ARGS
if [ \$DBUSflg -ne 0 ];then
 kill \$DBUS_SESSION_BUS_PID
 rm -f \${HOME}/.DBUS-DAEMON-VARS 2>/dev/null
fi" >> ${APPin}.bin
 
 chmod 755 ${APPin}.bin
}

#note, same code is in /usr/local/clients/create-client-environment
#create folders in /clients...
CHGflg=0 #20210916  20210918 revert 20210917...
#if [ ! "$PREFIXDIR2" ];then #20210917 dir2sfs is creating an sfs, this code has to be delayed, see create-client-environment below.
 if [ "$APPflag" == "true" ];then #20210915
  #20230409 /usr/local/flapi/flapi has already created /home/${APPname}, so test for .config ...
  if [ ! -d ${PREFIXDIR1}/home/${APPname}/.config ];then
   CHGflg=1 #20210916
   mkdir -p ${PREFIXDIR1}/home/${APPname}
   for aSUB in .cache .config .history .local/share ${APPname}
   do
    mkdir -p ${PREFIXDIR1}/home/${APPname}/${aSUB}
   done
   #ln -s /files/downloads ${PREFIXDIR1}/home/${APPname}/Downloads #20211205 20211206
   #icon for rox-filer...
   IMG="${PREFIXDIR1}/usr/share/pixmaps/${APPname}.png"
   if [ ! -e ${IMG} ];then
    IMG="$(find ${PREFIXDIR1}/usr/share/icons/hicolor/48x48/apps -maxdepth 1 -iname "${APPname}.*" 2>/dev/null | head -n 1)"
    #20240308 icon naming may be different, ex: org.gnome.GHex.svg
    if [ -z "$IMG" ];then
     IMG="$(find ${PREFIXDIR1}/usr/share/icons/hicolor/48x48/apps -maxdepth 1 -iname "*.${APPname}.*" 2>/dev/null | head -n 1)"
    fi
    if [ -z "$IMG" ];then
     IMG="$(find ${PREFIXDIR1}/usr/share/icons/hicolor/scalable/apps -maxdepth 1 -iname "${APPname}.*" 2>/dev/null | head -n 1)"
    fi
    if [ -z "$IMG" ];then
     IMG="$(find ${PREFIXDIR1}/usr/share/icons/hicolor/scalable/apps -maxdepth 1 -iname "*.${APPname}.*" 2>/dev/null | head -n 1)"
    fi
    if [ ! "$IMG" ];then
     if [ -f ${PREFIXDIR1}/usr/share/applications/${APPname}.desktop ];then
      xIMG="$(grep '^Icon=' ${PREFIXDIR1}/usr/share/applications/${APPname}.desktop | cut -f 2 -d '=' | cut -f 1 -d ' ')"
      IMG="$(find  ${PREFIXDIR1}/usr/share/icons/hicolor/48x48 ${PREFIXDIR1}/usr/share/pixmaps ${PREFIXDIR1}/usr/local/lib/X11/mini-icons -name ${xIMG} -o -name ${xIMG}.png -o -name ${xIMG}.svg -o ${xIMG}.xpm 2>/dev/null | head -n 1)"
     fi
    fi
    if [ ! "$IMG" ];then
     IMG="${PREFIXDIR1}/usr/share/pixmaps/puppy/execute.svg"
    fi
   fi
   if [ ! -f ${PREFIXDIR1}/usr/share/pixmaps/${IMG##*/} ];then #20240503
    cp -a ${IMG} ${PREFIXDIR1}/usr/share/pixmaps/
   fi
   ln -s -r ${IMG} ${PREFIXDIR1}/home/${APPname}/.DirIcon
   ln -s -r ${IMG} ${PREFIXDIR1}/home/${APPname}/${APPname}/.DirIcon
   #click on this folder will run the app...
   echo -e "#!/bin/sh\nexec ${APPname}" > ${PREFIXDIR1}/home/${APPname}/${APPname}/AppRun
   chmod 755 ${PREFIXDIR1}/home/${APPname}/${APPname}/AppRun
   #20230330 prevent other apps from seeing in here...
   #20230528 if admin creates files/folders, setgid so they will be group $APPname...
   chmod 2700 ${PREFIXDIR1}/home/${APPname}
  fi

  #20240503 changed from chromium builtin to download, this missing...
  if [ ! -e ${PREFIXDIR1}/home/${APPname}/${APPname}/AppRun ];then
   CHGflg=1
   for aSUB in .cache .config .history .local/share ${APPname}
   do
    mkdir -p ${PREFIXDIR1}/home/${APPname}/${aSUB}
   done
   IMG="${PREFIXDIR1}/usr/share/pixmaps/${APPname}.png"
   ln -s -r ${IMG} ${PREFIXDIR1}/home/${APPname}/.DirIcon 2>/dev/null
   ln -s -r ${IMG} ${PREFIXDIR1}/home/${APPname}/${APPname}/.DirIcon 2>/dev/null
   #click on this folder will run the app...
   echo -e "#!/bin/sh\nexec ${APPname}" > ${PREFIXDIR1}/home/${APPname}/${APPname}/AppRun
   chmod 755 ${PREFIXDIR1}/home/${APPname}/${APPname}/AppRun
  fi
  
  #20240118 no longer need this, as have global /etc/gtk-3.0/settings.ini ...
  #if [ ! -d ${PREFIXDIR1}/home/${APPname}/.config/gtk-3.0 ];then #20210927
  # CHGflg=1 #20211103
  # mkdir -p ${PREFIXDIR1}/home/${APPname}/.config/gtk-3.0
  # cp -f /root/.config/gtk-3.0/settings.ini ${PREFIXDIR1}/home/${APPname}/.config/gtk-3.0/
  # cp -f /root/.config/gtk-3.0/gtk.css ${PREFIXDIR1}/home/${APPname}/.config/gtk-3.0/
  #fi
  
  if [ ! -e ${PREFIXDIR1}/home/${APPname}/.config/pulse/client.conf ];then #20211103
   #20211103 pulseaudio work in client... ref: http://billauer.co.il/blog/2014/01/pa-multiple-users/
   # no, why should i do this? not needed...
   #if [ -f /etc/pulse/default.pa ];then
   # mkdir -p ${PREFIXDIR1}/.config/pulse
   # echo '.include /etc/pulse/default.pa' > ${PREFIXDIR1}/.config/pulse/default.pa
   #fi
   #this is how it has to be done...
   CHGflg=1
   mkdir -p ${PREFIXDIR1}/home/${APPname}/.config/pulse
   echo 'default-server = unix:/tmp/pulse-socket' > ${PREFIXDIR1}/home/${APPname}/.config/pulse/client.conf
   #$PULSE_RUNTIME_PATH=/run/pulse and this is where apps expect the socket, and named "native"
   # .../etc/pulse/default.pa creates two sockets.
  fi
  
  if [ ! -e ${PREFIXDIR1}/home/${APPname}/.config/user-dirs.dirs ];then #20211206
   cp -f /root/.config/user-dirs.dirs ${PREFIXDIR1}/home/${APPname}/.config/
   CHGflg=1
  fi
  
  #20220916 may have TEMPLATE_ACCESS_MOZBARE. ref: /usr/bin/xdg-open
  if [ -f ${PREFIXDIR1}/usr/local/easy_containers/templates/${APPname}/specs ];then
   . ${PREFIXDIR1}/usr/local/easy_containers/templates/${APPname}/specs
   if [ "$TEMPLATE_ACCESS_MOZBARE" == "yes" ];then
    cp -a ${PREFIXDIR1}/root/.mozbare ${PREFIXDIR1}/home/${APPname}/
    CHGflg=1 #20230511
   fi
  fi
  
 fi
#fi

UGID='' #20240706
if [ ! "$PREFIXDIR2" ];then #20210915 dir2sfs is creating an sfs, this code has to be delayed, see create-client-environment below.
 #create user, no login...
 #when running from woofQ, host needs to be easyos, so that /etc/passwd and /etc/group are compatible...
 #20240703 predetermined uid and gid (ex: 28546)...
 #20240705 APPname=streamtuner2, $((64#$APPname)) generates -2968389580449061182, need sed...
 UGID="$(echo -n 2$((64#${APPname})) | sed -e 's%[^0-9]%%g' | head -c 5 | xargs -I XXX printf %-5s XXX | tr ' ' 0)"
 grep -q -F ":${UGID}:" ${PREFIXDIR1}/etc/group ${PREFIXDIR1}/etc/passwd #20240704 precaution
 if [ $? -eq 0 ];then
  #very unlikely to come here, but just in case...
  UGID="${UGID/2/3}" #ex: 28526 becomes 38526
 fi
 grep -q "^${APPname}:" ${PREFIXDIR1}/etc/group
 if [ $? -ne 0 ];then
  #20240705 woofq: host /etc/group may already have entry...
  if [ "$PREFIXDIR1" ];then
   cp -a -f /etc/group /etc/groupTMP
   cp -a -f /etc/gshadow /etc/gshadowTMP
   sed -i "/^${APPname}:/d" /etc/group
   sed -i "/^${APPname}:/d" /etc/gshadow
   sed -i "/^${APPname}:/d" ${PREFIXDIR1}/etc/group
   sed -i "/^${APPname}:/d" ${PREFIXDIR1}/etc/gshadow
   busybox addgroup -g ${UGID} ${APPname} 2>/dev/null
   grep "^${APPname}:" /etc/group >> ${PREFIXDIR1}/etc/group
   grep "^${APPname}:" /etc/gshadow >> ${PREFIXDIR1}/etc/gshadow
  else
   busybox addgroup -g ${UGID} ${APPname} 2>/dev/null
  fi
 fi
 grep -q "^${APPname}:" ${PREFIXDIR1}/etc/passwd
 if [ $? -ne 0 ];then
  #20240705 woofq: host /etc/passwd may already have entry...
  # -S create a system user.  -D don't assign a password.  -H don't create a home directory.
  if [ "$PREFIXDIR1" ];then
   cp -a -f /etc/passwd /etc/passwdTMP
   cp -a -f /etc/shadow /etc/shadowTMP
   sed -i "/^${APPname}:/d" /etc/passwd
   sed -i "/^${APPname}:/d" /etc/shadow
   sed -i "/^${APPname}:/d" ${PREFIXDIR1}/etc/passwd
   sed -i "/^${APPname}:/d" ${PREFIXDIR1}/etc/shadow
   busybox adduser -u ${UGID} -h /home/${APPname} -G ${APPname} -D -H ${APPname} 2>/dev/null #20240703
   grep "^${APPname}:" /etc/passwd >> ${PREFIXDIR1}/etc/passwd
   grep "^${APPname}:" /etc/shadow >> ${PREFIXDIR1}/etc/shadow
  else
   busybox adduser -u ${UGID} -h /home/${APPname} -G ${APPname} -D -H ${APPname} 2>/dev/null #20240703
  fi
  #20211206 note, initrd expects these gids fscryptgrp=118, filesgrp=122...
  busybox addgroup ${APPname} fscryptgrp 2>/dev/null #20210915
  busybox addgroup ${APPname} filesgrp 2>/dev/null #20211206
  busybox addgroup ${APPname} disk 2>/dev/null
  busybox addgroup ${APPname} audio 2>/dev/null
  busybox addgroup ${APPname} lp 2>/dev/null
  busybox addgroup ${APPname} bluetooth 2>/dev/null
  busybox addgroup ${APPname} scanner 2>/dev/null
  busybox addgroup ${APPname} cdrom 2>/dev/null
  busybox addgroup ${APPname} pulse 2>/dev/null #20211103 support pulseaudio.
  busybox addgroup ${APPname} video 2>/dev/null #20211104 think need this.
  # ...user added to 'pulse' group now not required, see /etc/pulse/default.pa
  #    users must belong to group 'audio' for pulseaudio to work.
  if [ "$PREFIXDIR1" ];then
   for aENTRY in disk audio lp bluetooth scanner cdrom fscryptgrp pulse video filesgrp #20210915 20211103 20211104 20211206
   do
    sed -i "/^${aENTRY}:/d" ${PREFIXDIR1}/etc/group
    grep "^${aENTRY}:" /etc/group >> ${PREFIXDIR1}/etc/group
    sed -i "/^${aENTRY}:/d" ${PREFIXDIR1}/etc/gshadow
    grep "^${aENTRY}:" /etc/gshadow >> ${PREFIXDIR1}/etc/gshadow
   done
  fi
 fi

 #if [ ! -d ${PREFIXDIR1}/files/downloads/${APPname} ];then #20211206
 # mkdir -p ${PREFIXDIR1}/files/downloads/${APPname}
 # chown ${APPname}:${APPname} ${PREFIXDIR1}/files/downloads/${APPname}
 #fi
 
 if [ $CHGflg -eq 1 ];then #20210916 20211103
  #20230409 handle /home/<app> a symlink...
  #chown -h -R ${APPname}:${APPname} ${PREFIXDIR1}/home/${APPname} #20211205 added -h
  #20230412 .DirIcon symlink and target of commandline-symlink must have same owner:group as parent folder, hence need -R ...
  if [ -h ${PREFIXDIR1}/home/${APPname} ];then
   chown ${APPname}:${APPname} $(readlink ${PREFIXDIR1}/home/${APPname})
   chown -h ${APPname}:${APPname} ${PREFIXDIR1}/home/${APPname} #-h Affect symlinks instead of symlink targets
  fi
  chown -h -H -R ${APPname}:${APPname} ${PREFIXDIR1}/home/${APPname} #-H Traverse symlinks on command line only
 fi
 
fi

#161231
if [ -f ../DISTRO_SPECS ];then
. ../DISTRO_SPECS #running in woofQ
else
. /etc/DISTRO_SPECS
fi
xARCHDIR="$DISTRO_xARCHDIR" #20230904

#bulk of runtime script, usually at /usr/bin/$APPname...
RUNASCLIENT="#CLIENTMARKER ${APPname}"'
#script to run $APPbin as a client...
#required varables:
# APPname: name of this script. ex: "seamonkey"
#   note: set without path, so expected to be in $PATH. i think some code expects it to be at /usr/bin
# APPbin: original executable renamed, with ".bin" appended. ex: "seamonkey.bin", at /usr/bin
#   note: this variable may optionally have been set with full path, ex: APPbin="/usr/bin/seamonkey.bin"
#optional variables:
# ROOTFORCE: if set, then run app as root.
# ROOTARG: existence of this in the commandline, then force app to run as root.
#   ex: " -edit " seamonkey runs Composer, that I want to be able to edit files anywhere.
# ALWAYSOPTS: options to always apply.
# ROOTOPTS: if an app is run as root, then it must have these args.
#   ex: "--test-type --no-sandbox" chromium must disable sandbox if run as root.
# CONTAINEROPTS: extra args if running app in container.
#   ex: "--test-type --no-sandbox" for chromium & chrome
#       the sandbox does not work inside a container, conflict as the container is already a sandbox.
# CONTAINERCODE: extra code to run if app running in container.
#   firefox, have to set sandbox to level 1, in file prefs.js
# DESKTOPCODE: extra code to run if not in container (and running as a client).
# ALWAYSCODE: extra code to always run, regardless user/root main-fs/container.

#20210917 normally these are prepended to this script, but just in case...
if [ ! "$APPname" ];then
 APPname="${0##*/}"
fi
if [ ! "$APPbin" ];then
 APPbin="${0##*/}.bin"
fi

ARGS=""
#[ $1 ] && while [ "$1" ]; do ARGS="$ARGS \"$1\""; shift; done
if [ -n "$1" ];then #20240912
 while [ -n "$1" ]
 do
  #do not put quotes around if a single word. example is "-edit" for seamonkey, the quotes stuff it up entirely...
  if [ "${1/ /}" == "${1}" ];then
   ARGS="${ARGS} ${1}"
  else
   ARGS="${ARGS} \"${1}\""
  fi
  shift
 done
fi

#20211005 everything below rewritten...

#expect will run $APPname non-root on main desktop, crippled-root in container,
#but this script should also handle run $APPname root on main desktop and non-root
#in container ...which complicates things. this script will always run as root on
#main desktop, but could be, one day, running as non-root in a container.
#$Iflg is the intention, =1 to run $APPname as non-root.
Cflg=0; Iflg=1
ls -1 /INSIDE_* >/dev/null 2>&1 #file(s) exists if in container.
if [ $? -eq 0 ];then Cflg=1; fi
Rflg="$(id -u)" #0 for this script running as root.
touch /root/.clients-status
#hmmm, if the file got erased somehow, assume default to run app non-root...
grep -q "^${APPname}=" /root/.clients-status
if [ $? -ne 0  ];then
 echo "${APPname}=true" >> /root/.clients-status
fi
grep -q "^${APPname}=true" /root/.clients-status #has flag if intention to run app non-root.
if [ $? -ne 0  ];then Iflg=0; fi
#some possible overrides to the intention:
#an arg that must run as root...
if [ "$ROOTARG" ];then
 grep -q "${ROOTARG}" <<<${ARGS} >/dev/null #needs bash
 if [ $? -eq 0 ];then Iflg=0; fi #=0 intention run as root.
fi
if [ "$ROOTFORCE" ];then Iflg=0; fi #app must run as root.

#20241212 allow run app non-root in container...
if [ $Cflg -eq 1 ];then #=1 running in container.
 if [ $Iflg -eq 1 ];then #=1 want to run app non-root
  #find out if container has permission to run chown and chmod...
  CONT="$(find /.control -name "*.run-once-top-flag" | head -n 1 | cut -f 3 -d "/" | cut -f 1 -d ".")"
  if [ -n "${CONT}" ];then #ex: daedalus
  
   #20241223 host os running in container...
   #ex: host scarthgap, in scarthgap container have easy.run-once-top-flag and scarthgap.configuration
   if [ "$CONT" == "easy" ];then
    if [ ! -f /.control/easy.configuration ];then
     . /etc/DISTRO_SPECS
     if [ -f /.control/${DISTRO_COMPAT_VERSION}.configuration ];then
      CONT="${DISTRO_COMPAT_VERSION}"
     fi
    fi
   fi

   if [ -f /.control/${CONT}.configuration ];then
    . /.control/${CONT}.configuration
    if [ "${EC_CAP_file}" == "false" ];then
     #pretend not running in a container...
     Cflg=0
     #however, in a container and cannot setup a sandbox...
     NONROOTMAINOPTS="${NONROOTMAINOPTS} ${ROOTOPTS}"
    fi
   fi
  fi
 fi
fi

if [ $Cflg -eq 0 ];then #running on main desktop.
 #whoami will always be root. if Rflg<>0 that is an error...
 if [ $Rflg -ne 0 ];then exit; fi
 
 ##20211103 hack for pulseaudio...
 #if [ -e /tmp/pulse-socket ];then
 # if [ ! -e /run/pulse/native ];then
 #  ln -s /tmp/pulse-socket /run/pulse/native
 # fi
 #fi
 
 if [ $Iflg -eq 1 ];then
  #intention is to run app non-root.
  #20241108 no... ref: https://forum.puppylinux.com/viewtopic.php?p=135190#p135190
  ##kill any left-over processes from previous run of app...
  #killall --user ${APPname} ${APPname} > /dev/null 2>&1 #requires full killall from psmisc pkg.
  #when dir2sfs has created an sfs, have to run this here, to setup /etc/passwd and /etc/group...
  /usr/local/clients/create-client-environment ${APPname}
  #this is a method to authorize x server to run by user... 
  #works when server running. note: this setting does not seem to be stored in a
  #file. it affects the currently running x server and will be lost when x quits.
  ALLOWflg="$(xhost | grep -o ":${APPname}$")"
  if [ ! "$ALLOWflg" ];then
   xhost +SI:localuser:${APPname}
  fi
  #following line is mostly there to catch any root:root files that may have got
  #copied in... restrict to just the Downloads folder...
  #chown -R ${APPname}:${APPname} /home/${APPname}/Downloads #&
  #20211205 Downloads is now a symlink to /files/downloads... 20211206 no
  #chown -R -L root:122 /home/${APPname}/Downloads #122 is filesgrp
  #set some variables...
  export XDG_CONFIG_HOME=/home/${APPname}/.config
  export XDG_CACHE_HOME=/home/${APPname}/.cache
  export XDG_DATA_HOME=/home/${APPname}/.local/share
  
  #20211108 
  if [ "${DESKTOPCODE}" ];then
   eval "${DESKTOPCODE}"
  fi
  if [ "${ALWAYSCODE}" ];then #20231105
   eval "${ALWAYSCODE}"
  fi
  
  #go for it... 20231105 removed old fscrypt v1 code
  exec su -l ${APPname} -s /bin/sh -c "DISPLAY=${DISPLAY} \"$APPbin\" ${ALWAYSOPTS} ${NONROOTMAINOPTS} ${ARGS}"
  
 else
  #intention is to run app as root.
  #kill any left-over processes from previous run of app...
  #warning, if app is running in a container, that will also be killed.
  echo -n "new${APPname}" > /proc/${$}/comm #change name of current process.
  killall ${APPname}
  if [ "${ALWAYSCODE}" ];then #20231105
   eval "${ALWAYSCODE}"
  fi
  #run it...
  exec "${APPbin}" ${ALWAYSOPTS} ${ROOTOPTS} ${ARGS}
 fi
else #running in container
 #maybe one day support running a container non-root, but for now only have 
 #crippled-root. only run apps as crippled-root, which is already a sandbox.
 #20220923 now support running as spot.
 #kill any left-over processes from previous run of app...
 #warning, if app is running in a container, that will also be killed.
 echo -n "new${APPname}" > /proc/${$}/comm #change name of current process.
 killall ${APPname}
 if [ "${CONTAINERCODE}" ];then #20211107
  eval "${CONTAINERCODE}"
 fi
 if [ "${ALWAYSCODE}" ];then #20231105
  eval "${ALWAYSCODE}"
 fi
 WHOIAM="$(whoami)"
 if [ "$WHOIAM" == "spot" ];then #20220923
  export XAUTHORITY=/home/spot/.Xauthority  
  export XDG_CONFIG_HOME=/home/spot/.config
  export XDG_CACHE_HOME=/home/spot/.cache
  export XDG_DATA_HOME=/home/spot/.local/share
  #20231105 removed old fscrypt v1 code.
  #run it...
  exec ${CONTAINERVARS} "${APPbin}" ${ALWAYSOPTS} ${ARGS}
 else
  #run it...
  exec ${CONTAINERVARS} "${APPbin}" ${ALWAYSOPTS} ${ROOTOPTS} ${ARGS}
 fi 
fi
'

seamonkey_true() {
 #function to run seamonkey as a client.
 gen_bin_func
 echo '#!/bin/bash
if [ "$(whoami)" != "root" ];then exec sudo-sh ${PPID} ${0} ${@}; fi' > ${PREFIXDIR1}${APPpath}/${APPname}
 echo "APPbin='${APPpath}/${APPname}.bin'
APPname='${APPname}'
ROOTARG=' \-edit '" >> ${PREFIXDIR1}${APPpath}/${APPname} #20210915 note, the leading "-" has to be escaped.
 
 #150108 script launched by /usr/bin/seamonkey.bin cannot relink /usr/bin/seamonkey.bin, do it here:
 # refer: woof rootfs-complete/usr/bin/seamonkeyQNEW
 #170921 fix path... 20220107
 if [ -f ${PREFIXDIR1}/usr/lib${xARCHDIR}/seamonkey/seamonkey ];then
  echo "[ -f /home/${APPname}/.mozilla/seamonkey/a2bvafqx.default/places.sqlite ] && ln -snf /usr/lib${xARCHDIR}/seamonkey/seamonkey /usr/bin/seamonkey.bin" >> ${PREFIXDIR1}${APPpath}/${APPname}
  echo "export MOZILLA_FIVE_HOME=/usr/lib${xARCHDIR}/seamonkey" >> ${PREFIXDIR1}${APPpath}/${APPname} #20220107
 else
  echo "[ -f /home/${APPname}/.mozilla/seamonkey/a2bvafqx.default/places.sqlite ] && ln -snf /usr/lib/seamonkey/seamonkey /usr/bin/seamonkey.bin" >> ${PREFIXDIR1}${APPpath}/${APPname}
  echo "export MOZILLA_FIVE_HOME=/usr/lib/seamonkey" >> ${PREFIXDIR1}${APPpath}/${APPname} #20220107
 fi
 
 echo "$RUNASCLIENT" >> ${PREFIXDIR1}${APPpath}/${APPname}
 chmod 755 ${PREFIXDIR1}${APPpath}/${APPname}

 if [ -e ${PREFIXDIR1}/root/.mozilla/seamonkey ];then #20211107
  if [ ! -e ${PREFIXDIR1}/home/${APPname}/.mozilla/seamonkey/a2bvafqx.default ];then #check not already setup.
   if [ "$PREFIXDIR1" ];then #woof. my SM PETs have skeleton .mozilla.
    mkdir -p ${PREFIXDIR1}/home/${APPname}/.mozilla #20210007
    cp -a ${PREFIXDIR1}/root/.mozilla/seamonkey ${PREFIXDIR1}/home/${APPname}/.mozilla/ #20211107
    DEFAULTDIR="$(find ${PREFIXDIR1}/home/${APPname}/.mozilla/seamonkey -mindepth 1 -maxdepth 1 -name '*.default')"
    # ...ex: rootfs-complete/home/chromium/.mozilla/seamonkey/2p53p9.default
   else #running puppy...
    zDEFAULTDIR="$(grep '^Path=.*default' /root/.mozilla/seamonkey/profiles.ini | head -n 1 | cut -f 2- -d '=' | cut -f 1 -d '.')"
    # ...ex: 2p53p9
    if [ "$zDEFAULTDIR" ];then
     BASENAME="${zDEFAULTDIR}.default" #ex: 2p53p9.default
     mkdir -p /home/${APPname}/.mozilla/seamonkey/${BASENAME}
     rm -rf /home/${APPname}/.mozilla/seamonkey/${BASENAME}/* 2>/dev/null #precaution.
     echo "[General]
StartWithLastProfile=1

[Profile0]
Name=default
IsRelative=1
Path=${BASENAME}" > /home/${APPname}/.mozilla/seamonkey/profiles.ini
     cp -a -f /root/.mozilla/seamonkey/${BASENAME}/chrome /home/${APPname}/.mozilla/seamonkey/${BASENAME}/
     cp -a -f /root/.mozilla/seamonkey/${BASENAME}/localstore.rdf /home/${APPname}/.mozilla/seamonkey/${BASENAME}/
     cp -a -f /root/.mozilla/seamonkey/${BASENAME}/mimeTypes.rdf /home/${APPname}/.mozilla/seamonkey/${BASENAME}/
     cp -a -f /root/.mozilla/seamonkey/${BASENAME}/prefs.js /home/${APPname}/.mozilla/seamonkey/${BASENAME}/
     DEFAULTDIR="/home/${APPname}/.mozilla/seamonkey/${BASENAME}"
    fi
   fi
   if [ "$DEFAULTDIR" ];then #precaution.
    DIRNAME="`dirname $DEFAULTDIR`"
    #needs to have a different name for .default dir from main one...
    mv -f $DEFAULTDIR $DIRNAME/a2bvafqx.default
    sed -i -e 's%^Path=.*defaul.*%Path=a2bvafqx.default%' $DIRNAME/profiles.ini
    #20211206 no...
    #mkdir -p ${PREFIXDIR1}/home/${APPname}/Downloads
    #sed -i -e "s%/mnt/wkg/files/Downloads%/home/${APPname}/Downloads%" $DIRNAME/a2bvafqx.default/prefs.js
    #sed -i -e "s%/mnt/wkg/files/downloads%/home/${APPname}/Downloads%" $DIRNAME/a2bvafqx.default/prefs.js
    #sed -i -e "s%/root/my-documents%/home/${APPname}/Downloads%" $DIRNAME/a2bvafqx.default/prefs.js
    #sed -i -e "s%\"/usr/share/doc\"%\"/home/${APPname}/Downloads\"%" $DIRNAME/a2bvafqx.default/prefs.js
    #sed -i -e "s%\"/files/Downloads\"%\"/home/${APPname}/Downloads\"%" $DIRNAME/a2bvafqx.default/prefs.js
    #sed -i -e "s%\"/files/downloads\"%\"/home/${APPname}/Downloads\"%" $DIRNAME/a2bvafqx.default/prefs.js
   fi
  fi
 fi
 return 0
}

seamonkey_false() {
 #function to run seamonkey as root.
 #20230511 20230512 fix...
 if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 -o -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
  if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ];then
   cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
   rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin0
   rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
  elif [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
   cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
   rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
  fi
 else #precaution. error.
  ln -snf /usr/lib${xARCHDIR}/seamonkey/seamonkey ${PREFIXDIR1}/usr/bin/seamonkey
 fi
 #20210915 hide, so can bring back in future...
 if [ -d ${PREFIXDIR1}/home/.${APPname} ];then #precaution.
  rm -rf ${PREFIXDIR1}/home/.${APPname}
 fi
 mv -f ${PREFIXDIR1}/home/${APPname} ${PREFIXDIR1}/home/.${APPname} 2>/dev/null
 return 0
}

generic_func() {
 #setup the app to run as spot or root...
 case $APPflag in
  true)
   gen_bin_func
   echo '#!/bin/bash
if [ "$(whoami)" != "root" ];then exec sudo-sh ${PPID} ${0} ${@}; fi' > ${PREFIXDIR1}${APPpath}/${APPname}
   echo "APPbin='${APPpath}/${APPname}.bin'
APPname='${APPname}'" >> ${PREFIXDIR1}${APPpath}/${APPname}
   echo "$RUNASCLIENT" >> ${PREFIXDIR1}${APPpath}/${APPname}
   chmod 755 ${PREFIXDIR1}${APPpath}/${APPname}
  ;;
  false)
   #20230511 20230512 fix...
   if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 -o -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
    if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ];then
     cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
     rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin0
     rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
    elif [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
     cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
     rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
    fi
   fi
   #20210915 hide, so can bring back in future...
   if [ -d ${PREFIXDIR1}/home/.${APPname} ];then #precaution.
    rm -rf ${PREFIXDIR1}/home/.${APPname}
   fi
   mv -f ${PREFIXDIR1}/home/${APPname} ${PREFIXDIR1}/home/.${APPname} 2>/dev/null
  ;;
 esac
 return 0
}

vivaldi_func() { #20230302
 #setup the app to run as spot or root...
 case $APPflag in
  true)
   gen_bin_func
 echo '#!/bin/bash
if [ "$(whoami)" != "root" ];then exec sudo-sh ${PPID} ${0} ${@}; fi' > ${PREFIXDIR1}${APPpath}/${APPname}
   echo "APPbin='${APPpath}/${APPname}.bin'
APPname='${APPname}'
ROOTOPTS='--no-sandbox'
" >> ${PREFIXDIR1}${APPpath}/${APPname}
   echo "$RUNASCLIENT" >> ${PREFIXDIR1}${APPpath}/${APPname}
   chmod 755 ${PREFIXDIR1}${APPpath}/${APPname}
  ;;
  false)
   #20230511 20230512 fix...
   if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 -o -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
    if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ];then
     cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
     rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin0
     rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
    elif [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
     cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
     rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
    fi
   fi
   #20210915 hide, so can bring back in future...
   if [ -d ${PREFIXDIR1}/home/.${APPname} ];then #precaution.
    rm -rf ${PREFIXDIR1}/home/.${APPname}
   fi
   mv -f ${PREFIXDIR1}/home/${APPname} ${PREFIXDIR1}/home/.${APPname} 2>/dev/null
  ;;
 esac
 return 0
}

#20230708 scribus, ref: /usr/bin/scribus.install
scribus_func() {
 #setup the app to run as spot or root...
 case $APPflag in
  true)
   gen_bin_func
 echo '#!/bin/bash
if [ "$(whoami)" != "root" ];then exec sudo-sh ${PPID} ${0} ${@}; fi' > ${PREFIXDIR1}${APPpath}/${APPname}
   echo "APPbin='${APPpath}/${APPname}.bin'
APPname='${APPname}'
DESKTOPCODE='if [ ! -e /home/scribus/.config/scribus/scribus150.rc ];then
 mkdir -p /home/scribus/.config/scribus
 cp -f /root/.config/scribus/scribus150.rc /home/scribus/.config/scribus/
 sed -i -e s%/files/%/files/apps/scribus/% /home/scribus/.config/scribus/
 chown -R scribus:scribus /home/scribus/.config
fi
'" >> ${PREFIXDIR1}${APPpath}/${APPname}
   echo "$RUNASCLIENT" >> ${PREFIXDIR1}${APPpath}/${APPname}
   chmod 755 ${PREFIXDIR1}${APPpath}/${APPname}
  ;;
  false)
   if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 -o -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
    if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ];then
     cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
     rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin0
     rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
    elif [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
     cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
     rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
    fi
   fi
   #20210915 hide, so can bring back in future...
   if [ -d ${PREFIXDIR1}/home/.${APPname} ];then #precaution.
    rm -rf ${PREFIXDIR1}/home/.${APPname}
   fi
   mv -f ${PREFIXDIR1}/home/${APPname} ${PREFIXDIR1}/home/.${APPname} 2>/dev/null
  ;;
 esac
 return 0
}


#20220916 set default open/save path to /files/Blender
blender_func() {
 #setup the app to run as spot or root...
 case $APPflag in
  true)
   gen_bin_func
 echo '#!/bin/bash
if [ "$(whoami)" != "root" ];then exec sudo-sh ${PPID} ${0} ${@}; fi' > ${PREFIXDIR1}${APPpath}/${APPname}
   echo "APPbin='${APPpath}/${APPname}.bin'
APPname='${APPname}'
DESKTOPCODE='
if [ ! -e /home/blender/.config/blender/3.3/config/recent-files.txt ];then
 mkdir -p /home/blender/.config/blender/3.3/config
 echo /files/apps/blender/new1.blend > /home/blender/.config/blender/3.3/config/recent-files.txt
 chown -R blender:blender /home/blender/.config
fi
'" >> ${PREFIXDIR1}${APPpath}/${APPname}
   echo "$RUNASCLIENT" >> ${PREFIXDIR1}${APPpath}/${APPname}
   chmod 755 ${PREFIXDIR1}${APPpath}/${APPname}
  ;;
  false)
   #20230511 20230512 fix...
   if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 -o -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
    if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ];then
     cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
     rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin0
     rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
    elif [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
     cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
     rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
    fi
   fi
   #20210915 hide, so can bring back in future...
   if [ -d ${PREFIXDIR1}/home/.${APPname} ];then #precaution.
    rm -rf ${PREFIXDIR1}/home/.${APPname}
   fi
   mv -f ${PREFIXDIR1}/home/${APPname} ${PREFIXDIR1}/home/.${APPname} 2>/dev/null
  ;;
 esac
 return 0
}


#20211107
firefox_true() {
 gen_bin_func
 echo '#!/bin/bash
if [ "$(whoami)" != "root" ];then exec sudo-sh ${PPID} ${0} ${@}; fi' > ${PREFIXDIR1}${APPpath}/${APPname}
 echo "APPbin='${APPpath}/${APPname}.bin'
APPname='${APPname}'" >> ${PREFIXDIR1}${APPpath}/${APPname}
 
# #20211107 set sandbox to lowest level...
# cat <<'EOF' >> ${PREFIXDIR1}${APPpath}/${APPname}
# CONTAINERCODE='PREFSJS="$(find /root/.mozilla/firefox -type f -name #prefs.js | tr "\n" " ")"
# for aPREF in $PREFSJS
# do
#  sed -i "/security\.sandbox\.content\.level/d" ${aPREF}
#  echo "user_pref(\"security.sandbox.content.level\", 1);" >> ${aPREF}
# done'
#EOF

 #20211110 instead of 20211107, try this to disable sandbox... 20211111 needs "env"
 echo 'CONTAINERVARS="env MOZ_DISABLE_CONTENT_SANDBOX=1 env MOZ_DISABLE_GMP_SANDBOX=1"' >> ${PREFIXDIR1}${APPpath}/${APPname}
 
 #20211110 have disabled updating, so don't need to do this...
# #20211108
# cat <<'EOF' >> ${PREFIXDIR1}${APPpath}/${APPname}
# DESKTOPCODE='FFUSER="$(stat -c %U /usr/lib/firefox)"
# if [ "$FFUSER" != "firefox" ];then
#  chown -R firefox:firefox /usr/lib/firefox
# fi'
#EOF

 #20211110 put up a msg...  20211201  20231217 remove msg.
 cat <<'EOF' >> ${PREFIXDIR1}${APPpath}/${APPname}
 DESKTOPCODE='FFUSER="$(stat -c %U /usr/lib/firefox)"
 if [ "$FFUSER" != "firefox" ];then
  chown firefox:firefox /usr/lib/firefox #without recursion.
  CR="
"
 fi'
 ALWAYSCODE='/usr/bin/firefox-pre-start #20231105'
EOF
 
 if [ -f ${PREFIXDIR1}/usr/lib${xARCHDIR}/firefox/firefox ];then #20220107
  echo "export MOZILLA_FIVE_HOME=/usr/lib${xARCHDIR}/firefox" >> ${PREFIXDIR1}${APPpath}/${APPname}
 else
  echo "export MOZILLA_FIVE_HOME=/usr/lib/firefox" >> ${PREFIXDIR1}${APPpath}/${APPname}
 fi

 echo "$RUNASCLIENT" >> ${PREFIXDIR1}${APPpath}/${APPname}
 chmod 755 ${PREFIXDIR1}${APPpath}/${APPname}

 if [ -e ${PREFIXDIR1}/root/.mozilla/firefox ];then
  if [ ! -e ${PREFIXDIR1}/home/${APPname}/.mozilla/firefox/profiles.ini ];then #check not already setup.
   if [ "$PREFIXDIR1" ];then #woof. my SM PETs have skeleton .mozilla.
    mkdir -p ${PREFIXDIR1}/home/${APPname}/.mozilla
    cp -a ${PREFIXDIR1}/root/.mozilla/firefox ${PREFIXDIR1}/home/${APPname}/.mozilla/
   fi
  fi
 fi
 
 #20211108 no, must do in running easyos, see above.
 ##20211108 permissions so that ff can auto-update...
 #if [ -d ${PREFIXDIR1}/usr/lib/firefox ];then #precaution.
 # grep -q '^firefox:' /etc/passwd #precaution.
 # if [ $? -eq 0 ];then
 #  chown -R firefox:firefox ${PREFIXDIR1}/usr/lib/firefox
 #  sync
 # fi
 #fi
}

firefox_false() {
 #20230511 20230512 fix...
 if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 -o -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
  if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ];then
   cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
   rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin0
   rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
  elif [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
   cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
   rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
  fi
 fi
 #hide, so can bring back in future...
 if [ -d ${PREFIXDIR1}/home/.${APPname} ];then #precaution.
  rm -rf ${PREFIXDIR1}/home/.${APPname}
 fi
 mv -f ${PREFIXDIR1}/home/${APPname} ${PREFIXDIR1}/home/.${APPname} 2>/dev/null
}

#130723 opera...
opera_true() {
 #function to run Opera as non-root.
 gen_bin_func
 echo '#!/bin/bash
if [ "$(whoami)" != "root" ];then exec sudo-sh ${PPID} ${0} ${@}; fi' > ${PREFIXDIR1}${APPpath}/${APPname}
 echo "APPbin='${APPpath}/${APPname}.bin'
APPname='${APPname}'
ROOTOPTS='--no-sandbox --test-type --enable-unsafe-swiftshader' #20241223
NONROOTMAINOPTS='--disable-features=AudioServiceSandbox' #20241223
" >> ${PREFIXDIR1}${APPpath}/${APPname}
 echo "$RUNASCLIENT" >> ${PREFIXDIR1}${APPpath}/${APPname}
 chmod 755 ${PREFIXDIR1}${APPpath}/${APPname}
 
  if [ ! -d ${PREFIXDIR1}/home/${APPname}/.opera ];then
   if [ -d ${PREFIXDIR1}/root/.opera ];then #this is in the PET or created when run Opera as root.
    cp -a -f ${PREFIXDIR1}/root/.opera ${PREFIXDIR1}/home/${APPname}/
   else
    mkdir -p ${PREFIXDIR1}/home/${APPname}/.opera
    echo '
[State]
Accept License=0

[User Prefs]
Home URL=file://localhost/usr/share/doc/home.htm
Startup Type=2
Download Directory={Home}Downloads

[Fonts]
Normal=14,4,0,0,0,0,DejaVu Sans
PRE=14,4,0,0,0,0,Nimbus Mono L

' > ${PREFIXDIR1}/home/${APPname}/.opera/operaprefs.ini
  fi
 fi
 chown -R ${APPname}:${APPname} ${PREFIXDIR1}/home/${APPname}/.opera
 chmod 2775 ${PREFIXDIR1}/home/${APPname}/Downloads #should already be. 20230528
 return 0
}
opera_false() {
 #20230511 20230512 fix...
 if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 -o -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
  if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ];then
   cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
   rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin0
   rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
  elif [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
   cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
   rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
  fi
 fi
 #20210915 hide, so can bring back in future...
 if [ -d ${PREFIXDIR1}/home/.${APPname} ];then #precaution.
  rm -rf ${PREFIXDIR1}/home/.${APPname}
 fi
 mv -f ${PREFIXDIR1}/home/${APPname} ${PREFIXDIR1}/home/.${APPname} 2>/dev/null
 return 0
}

#140215
chromium_true() {
 
 #20211022 fix if path has "/root/" and remove quotes around $@...
  gen_bin_func
  if [ ! -h ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ];then #20230511
   sed -i -e 's%/root/%/$(whoami)/%' ${PREFIXDIR1}${APPpath}/${APPname}.bin0
   sed -i -e 's%"$@"%$@%' ${PREFIXDIR1}${APPpath}/${APPname}.bin0
  fi
  if [ -e ${PREFIXDIR1}${APPpath}/google-${APPname} ];then
   if [ ! -h ${PREFIXDIR1}${APPpath}/google-${APPname} ];then
    sed -i -e 's%/root/%/$(whoami)/%' ${PREFIXDIR1}${APPpath}/google-${APPname}
    sed -i -e 's%"$@"%$@%' ${PREFIXDIR1}${APPpath}/google-${APPname}
    #and get rid of the symlink...
    cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/google-${APPname} ${PREFIXDIR1}${APPpath}/${APPname}.bin
   fi
  fi
 
 #20230411 ALWAYSOPTS removed "--use-gl=desktop" doesn't work.
 #20231126 avoid "CBCM is not enabled" msg: --enable-chrome-browser-cloud-management=no
 #20241127 running in container, want this: --enable-unsafe-swiftshader
 #20250209 --disk-cache-size= --disable-file-system ref: https://forum.puppylinux.com/viewtopic.php?t=13807  20250210
 rm -f ${PREFIXDIR1}${APPpath}/${APPname} #in case it is a symlink.
 echo '#!/bin/bash
if [ "$(whoami)" != "root" ];then exec sudo-sh ${PPID} ${0} ${@}; fi' > ${PREFIXDIR1}${APPpath}/${APPname}
 echo "APPbin='${APPpath}/${APPname}.bin'
APPname='${APPname}'
ALWAYSOPTS='--no-default-browser-check --no-first-run --enable-chrome-browser-cloud-management=no --disk-cache-size=20000000 --disable-file-system --enable-unsafe-swiftshader'
ROOTOPTS='--no-sandbox --test-type'
#note, currently not using these two...
CONTAINEROPTS='--no-sandbox --disable-features=AudioServiceSandbox' #20211007
NONROOTMAINOPTS='--disable-features=AudioServiceSandbox' #20211007
" >> ${PREFIXDIR1}${APPpath}/${APPname}
 
 echo 'export CHROME_WRAPPER=$(readlink -f "$0")' >> ${PREFIXDIR1}${APPpath}/${APPname}
 echo "export CHROME_DESKTOP=${APPname}.desktop" >> ${PREFIXDIR1}${APPpath}/${APPname} #20211022
 
 #20240511 the official pkg puts up msg that google api keys missing. disable... 20240513 done in chromium.bin0
 #echo "export GOOGLE_API_KEY=no" >> ${PREFIXDIR1}${APPpath}/${APPname}
 #echo "export GOOGLE_DEFAULT_CLIENT_ID=no" >> ${PREFIXDIR1}${APPpath}/${APPname}
 #echo "export GOOGLE_DEFAULT_CLIENT_SECRET=no" >> ${PREFIXDIR1}${APPpath}/${APPname}
 
 echo "$RUNASCLIENT" >> ${PREFIXDIR1}${APPpath}/${APPname}
 chmod 755 ${PREFIXDIR1}${APPpath}/${APPname}
   
 #setup default file open & download paths... 20211022... 20211213
 if [ "$APPname" == "chrome" -a -e ${PREFIXDIR1}/root/.config/google-chrome ];then #20231215
  APPname1='google-chrome'
 else
  APPname1='chrome'
 fi
 #20240511...
 if [ "$APPname" == "chromium" -a -e ${PREFIXDIR1}/root/.config/chromium ];then
  APPname1='chromium'
 fi
 #20240515...
 if [ "$APPname" == "ungoogled" -a -e ${PREFIXDIR1}/root/.config/ungoogled ];then
  APPname1='ungoogled'
 fi
 mkdir -p ${PREFIXDIR1}/root/.config/${APPname1}/Default
 mkdir -p ${PREFIXDIR1}/home/${APPname}/.config/${APPname1}/Default
 if [ -f ${PREFIXDIR1}/root/.config/${APPname1}/Default/Preferences ];then
  cp -f ${PREFIXDIR1}/root/.config/${APPname1}/Default/Preferences ${PREFIXDIR1}/home/${APPname}/.config/${APPname1}/Default/
 fi
 if [ ! -f ${PREFIXDIR1}/home/${APPname}/.config/${APPname1}/Default/Preferences ];then
  echo "{\"download\":{\"default_directory\":\"/files\",\"directory_upgrade\":true,\"prompt_for_download\":true},\"savefile\":{\"default_directory\":\"/files\"}}" > ${PREFIXDIR1}/home/${APPname}/.config/${APPname1}/Default/Preferences
 fi
 if [ -f "${PREFIXDIR1}/root/.config/${APPname1}/Local State" ];then #20231126
  cp -f "${PREFIXDIR1}/root/.config/${APPname1}/Local State" ${PREFIXDIR1}/home/${APPname}/.config/${APPname1}/
 fi
 #in case want to go back to root...
 if [ ! -f ${PREFIXDIR1}/root/.config/${APPname1}/Default/Preferences ];then
  cp -f ${PREFIXDIR1}/home/${APPname}/.config/${APPname1}/Default/Preferences ${PREFIXDIR1}/root/.config/${APPname1}/Default/
 fi
 
 return 0
}
chromium_false() {
 #20230511 20230512 fix...
 if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 -o -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
  if [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ];then
   cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin0 ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
   rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin0
   rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
  elif [ -e ${PREFIXDIR1}${APPpath}/${APPname}.bin ];then
   cp -a -f --remove-destination ${PREFIXDIR1}${APPpath}/${APPname}.bin ${PREFIXDIR1}${APPpath}/${APPname} #restore original.
   rm -f ${PREFIXDIR1}${APPpath}/${APPname}.bin
  fi
 fi
 #change path to profile...
 ctPTN='s%/home/${APPname}/chromium/profile%/file/portable/chromium/profile%'
 sed -i -e "$ctPTN" ${PREFIXDIR1}${APPpath}/${APPname} #huh?
 #20210915 hide, so can bring back in future...
 if [ -d ${PREFIXDIR1}/home/.${APPname} ];then #precaution.
  rm -rf ${PREFIXDIR1}/home/.${APPname}
 fi
 mv -f ${PREFIXDIR1}/home/${APPname} ${PREFIXDIR1}/home/.${APPname} 2>/dev/null
 return 0
}

###
#APPspec="$(find ${PREFIXDIR1}/bin ${PREFIXDIR1}/sbin ${PREFIXDIR1}/usr/bin ${PREFIXDIR1}/usr/sbin ${PREFIXDIR1}/usr/local/bin -mindepth 1 -maxdepth 1 -name ${APPname} 2>/dev/null | head -n 1)"
#20240311 drop support for other paths...
APPspec="$(find ${PREFIXDIR1}/usr/bin -mindepth 1 -maxdepth 1 -name ${APPname} 2>/dev/null | head -n 1)" #20240310 usrmerge
if [ -z "$APPspec" ];then
 if [ -z "$PREFIXDIR2" ];then #20210915
  #executable does not exist, so remove from list, if there...
  sed -i -e "/^${APPname}=/d" ${PREFIXDIR1}/root/.clients-status
  #20240311 precaution...
  rm -f ${PREFIXDIR1}/usr/bin/${APPname}.bin 2>/dev/null
  rm -f ${PREFIXDIR1}/usr/bin/${APPname}.bin0 2>/dev/null
 fi
 #20240706 restore host...
 if [ -f /etc/groupTMP ];then
  mv -f /etc/groupTMP /etc/group
  mv -f /etc/gshadowTMP /etc/gshadow
 fi
 if [ -f /etc/passwdTMP ];then
  mv -f /etc/passwdTMP /etc/passwd
  mv -f /etc/shadowTMP /etc/shadow
 fi
 exit 1
fi
APPpath="$(dirname "$APPspec" | sed -e "s%^${PREFIXDIR1}/%/%")"
 
case $APPname in
 seamonkey) ${APPname}_${APPflag} ;;
 opera)     ${APPname}_${APPflag} ;; #130723
 chromium)  ${APPname}_${APPflag} ;; #140215
 chrome)    chromium_${APPflag}   ;; #20211022
 ungoogled) chromium_${APPflag}   ;; #20240515
 firefox)   firefox_${APPflag}    ;; #20211107
 blender)   blender_func  ;; #20220916
 vivaldi)   vivaldi_func ;; #20230302
 scribus)   scribus_func ;; #20230708
 *)         generic_func  ;;
esac
if [ $? -ne 0 ];then
 if [ ! "$PREFIXDIR2" ];then #20210915
  sed -i -e "/^${APPname}=/d" ${PREFIXDIR1}/root/.clients-status #remove.
 fi
 #20240706 restore host...
 if [ -f /etc/groupTMP ];then
  mv -f /etc/groupTMP /etc/group
  mv -f /etc/gshadowTMP /etc/gshadow
 fi
 if [ -f /etc/passwdTMP ];then
  mv -f /etc/passwdTMP /etc/passwd
  mv -f /etc/shadowTMP /etc/shadow
 fi
 exit 1
fi

#record choice, for future runs of Login&Security Manager...
if [ ! "$PREFIXDIR2" ];then #20210915 if an sfs, need to delay this...
 if [ "$(grep "^${APPname}=" ${PREFIXDIR1}/root/.clients-status)" != "" ];then
  rsPTN="s%^${APPname}=.*%${APPname}=${APPflag}%"
  sed -i -e "$rsPTN" ${PREFIXDIR1}/root/.clients-status
 else
  echo "${APPname}=${APPflag}" >> ${PREFIXDIR1}/root/.clients-status
 fi
fi
 
if [ ! "$PREFIXDIR2" ];then #20210918 if an sfs, need to delay this...
 if [ "$APPflag" == "true" ];then
  if [ -d ${PREFIXDIR1}/home/${APPname} ];then #20210918 precaution
   #20230409 handle /home/<app> a symlink...
   #chown -h -R ${APPname}:${APPname} ${PREFIXDIR1}/home/${APPname} #20211205 added -h
   #20230412 .DirIcon symlink and target of commandline-symlink must have same owner:group as parent folder, hence need -R ...
   if [ -h ${PREFIXDIR1}/home/${APPname} ];then
    chown ${APPname}:${APPname} $(readlink ${PREFIXDIR1}/home/${APPname})
    chown -h ${APPname}:${APPname} ${PREFIXDIR1}/home/${APPname} #-h Affect symlinks instead of symlink targets
   fi
   chown -h -H -R ${APPname}:${APPname} ${PREFIXDIR1}/home/${APPname} #-H Traverse symlinks on command line only
  fi
 
  #20230617 previously did this in 'appi' and 'flapi' scripts, but want 
  # for all apps that run non-root...
  #20240705 can now do from woofq...
  #20240706 note: created in woofq, then fixlayers in intrd will have to copy to /files symlink.
  if [ "${PREFIXDIR1}" == "" -o -n "${UGID}" ];then
   if [ ! -d ${PREFIXDIR1}/files/apps/${APPname} ];then #precaution.
    #create a path for optional open/save files for this app
    mkdir -p ${PREFIXDIR1}/files/apps/${APPname}
    #20240705 note: don't need this test now, as restoring below...
    #if [ -n "${UGID}" ];then
    # chown ${UGID}:${UGID} ${PREFIXDIR1}/files/apps/${APPname}
    #else
     chown ${APPname}:${APPname} ${PREFIXDIR1}/files/apps/${APPname}
    #fi
    #for extra security, and setgid
    chmod 2700 ${PREFIXDIR1}/files/apps/${APPname}
   fi
  fi
  
 fi
fi

#20240706 restore host...
if [ -f /etc/groupTMP ];then
 mv -f /etc/groupTMP /etc/group
 mv -f /etc/gshadowTMP /etc/gshadow
fi
if [ -f /etc/passwdTMP ];then
 mv -f /etc/passwdTMP /etc/passwd
 mv -f /etc/shadowTMP /etc/shadow
fi
###end###

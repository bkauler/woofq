#!/bin/bash
# WOOFQONLYMARKER
#update to the latest release.
#suggest to run this: sakura -h -c 80 -r 30 -t "EasyUpdate" -e /usr/local/easy_version/easy-update
#called from /usr/sbin/easy-update, no parameters.
#note: need bash, as script uses inbuilt COLUMNS variable.
#200729 first release.
#200730 only have de, fr builds online. some fixes.
#200826 file copy checks. 200828 boot-partition mounting fix.
#20201109 "buster" path should have been "${DISTRO_COMPAT_VERSION}"
#20201117 new loop device for ext4 partition.
#20201226 dunfell update fail: fix weird file-size-test error.
#20201227 note: bash bug, ref: https://bkhome.org/news/202012/easyos-dunfell-update-weird-error.html
#20210125 update boot-partition latest device-tree files from new easy.sfs
#20210425 little fixes. 20210502 tweaks.
#20210604 fix if no mbr.bin
#20210610 replace "amd64" with $DISTRO_TARGETARCH
#20210701 rpi4 files on ibiblio in a subdirectory. check kernel name.
#20211221 blue background for light-green text. ref: https://opensource.com/article/19/9/linux-terminal-colors
#20220124 img partitions were 639 & 640MB, but may be different.
#20220404 if currently rolled-back, check if latestVER already installed.
#20220512 path in url will now have year, and img not compressed. ex: amd64/releases/bookworm/2022/3.5/easy-3.5-amd64.img
#20220519 fix url path.
#20220613 easy.sfs now in ${WKG_DEV}/${WKG_DIR}, not in boot-partition. 20220615
#20220614 no longer using rsync.
#20220621 no longer have BOOT_* variables. hack for BOOT_DEV, BOOT_FS and BOOT_DIR for rpi4
#20220623 3buildeasydistro generates .delta files. see if available online.
#20220624 online deltas have 'md5sums.txt'. need workaround for checksum of .img changing.
#20220625 mount-img no longer changes the checksum.
#20220628 check md5sum of local image file. 20220629
#20220728 remove .delta after update.
#20230221 no longer have language-specific .img files.
#20230305 easy-*.img may have a different name. note: "easy.sfs" changed in 3buildeasydistro
#20230328 ask if current .img is elsewhere.
#20230503 cannot update fscrypt v1 to v2.  20230504
#20231108 offer to update nvidia sfs. (see also initrd init). 20231109 check nv major version.
#20240302 support easyvoid. 20240304  20240403 remove.

export TEXTDOMAIN=easy-update
export OUTPUT_CHARSET=UTF-8

if [ -t 0 ];then
 true #we are running this from a terminal, good.
else
 exit 13
fi
PARENT="${$}"

KERNVER="$(uname -r)" #20231108
. /etc/rc.d/PUPSTATE #has PUP_HOME
. /etc/DISTRO_SPECS #has DISTRO_BINARY_COMPAT, DISTRO_COMPAT_VERSION DISTRO_TARGETARCH
. /root/.packages/DISTRO_PET_REPOS #has PET_REPOS, PACKAGELISTS_PET_ORDER, SFS_REPOS, EASYOS_RELEASES_URL

if [ ! "$DISTRO_NAME_SHORT" ];then #20230305 test if not defined in DISTRO_SPECS
 DISTRO_NAME_SHORT='Easy'
fi

#20240302
case "$DISTRO_TARGETARCH" in
 amd64) xARCH='x86_64' ;;
 *)     xARCH="$DISTRO_TARGETARCH" ;;
esac

if [ -d /boot/device-tree ];then #20220621 rpi
 #this is a hack...
 BOOT_DEV="${WKG_DEV%%[1-9]}1"
 BOOT_FS='vfat'
 BOOT_DIR=''
fi

YEAR="$(date +%Y)" #20220512

mkdir -p /tmp/easy_version
MSGexit="$(gettext 'Script terminated, close the window')"

echo -e '\033[1;35m' #1;35 foreground bright magenta
#echo "EasyUpdate"
echo "$(gettext 'Welcome. this script will download the latest release of EasyOS and automatically update the current installation.')" | fold -s -w ${COLUMNS}
if [ -d /boot/device-tree ];then #20210125 rpi  20210701
 echo "$(gettext 'The script will place the new kernel8.img, initrd and device-tree files into the boot-partition, and easy.sfs into the working-partition, then all you will need to do is reboot and you have updated.')" | fold -s -w ${COLUMNS}
 KERNAME='kernel8.img'
else
 echo "$(gettext 'The script will place the new vmlinuz, initrd and easy.sfs into the working-partition, then all you will need to do is reboot and you have updated.')" | fold -s -w ${COLUMNS}
 KERNAME='vmlinuz'
fi
echo "$(gettext 'If you have an Internet connection and want to test if there is a new release and download it, continue with the script...')" | fold -s -w ${COLUMNS}
echo -e '\033[1;34m' #1;34 foreground bright blue
echo -n "$(gettext 'Press ENTER to continue (any other character then ENTER to quit):') "
read goforit
echo -e '\033[0;39m' #reset foreground to default
[ "$goforit" != "" ] && echo -e "\033[1;31m${MSGexit}\033[0;39m" && exit 0


#find out if a later release online, only at ibiblio.org...
echo -en '\033[1;35m' #magenta
echo -n "$(gettext 'Probing ibiblio.org to see if there is a later release...')"
echo -e '\033[0;39m' #reset.
[ -f /tmp/easy_version/${DISTRO_COMPAT_VERSION} ] && rm -f /tmp/easy_version/${DISTRO_COMPAT_VERSION} #20201109

if [ ! -z "$SFS_REPOS" ];then #20240302
 SFS_REPO_URL="$(cut -f 2 -d '|' <<<${SFS_REPOS})"
else
 SFS_REPO_URL="https://distro.ibiblio.org/easyos/${DISTRO_TARGETARCH}/packages/sfs"
fi

origEASYOS_RELEASES_URL=''
if [ ! -z "$EASYOS_RELEASES_URL" ];then #20240302
  origEASYOS_RELEASES_URL="$EASYOS_RELEASES_URL"
  DEEPER=''
  wget -4 -t 2 -T 20 --waitretry=20 --directory-prefix=/tmp/easy_version --level=1 ${EASYOS_RELEASES_URL} #20220512
  #...this creates a html file /tmp/easy_version/${EASYOS_RELEASES_URL##*/}, ex: 'void'
  mv -f /tmp/easy_version/${EASYOS_RELEASES_URL##*/} /tmp/easy_version/${DISTRO_COMPAT_VERSION} #20220519 fix filename.
  fsync /tmp/easy_version/${DISTRO_COMPAT_VERSION} #20201226 try fix weird error below if test fails.
else
 #20210701 hmmm, pi4 files are one-deeper...
 if [ "$DISTRO_TARGETARCH" == "aarch64" ];then
  DEEPER='/rpi4'
  EASYOS_RELEASES_URL="https://distro.ibiblio.org/easyos/${DISTRO_TARGETARCH}/releases/${DISTRO_COMPAT_VERSION}${DEEPER}/${YEAR}"
  wget -4 -t 2 -T 20 --waitretry=20 --directory-prefix=/tmp/easy_version --level=1 ${EASYOS_RELEASES_URL} #20220512
  #...this creates a html file /tmp/easy_version/rpi4
  mv -f /tmp/easy_version/${EASYOS_RELEASES_URL##*/} /tmp/easy_version/rpi4 #20220519 fix filename.
  fsync /tmp/easy_version/rpi4
  mv -f /tmp/easy_version/rpi4 /tmp/easy_version/${DISTRO_COMPAT_VERSION}
 else
  DEEPER=''
  EASYOS_RELEASES_URL="http://distro.ibiblio.org/easyos/${DISTRO_TARGETARCH}/releases/${DISTRO_COMPAT_VERSION}/${YEAR}"
  wget -4 -t 2 -T 20 --waitretry=20 --directory-prefix=/tmp/easy_version --level=1 ${EASYOS_RELEASES_URL} #20220512
  #...this creates a html file /tmp/easy_version/${EASYOS_RELEASES_URL##*/}, ex: 'buster'
  mv -f /tmp/easy_version/${EASYOS_RELEASES_URL##*/} /tmp/easy_version/${DISTRO_COMPAT_VERSION} #20220519 fix filename.
  fsync /tmp/easy_version/${DISTRO_COMPAT_VERSION} #20201226 try fix weird error below if test fails.
 fi
fi
if [ ! -s /tmp/easy_version/${DISTRO_COMPAT_VERSION} ];then #20201109
 echo -en '\033[1;31m' #bright red.
 echo "$(gettext 'Sorry, there was an error probing the online repository, aborting script.')"
 echo -e '\033[0;39m' #reset.
 echo -e "\033[1;31m${MSGexit}\033[0;39m"
 exit 1
fi
#LATESTVER="$(grep -o 'href="[^"]*' /tmp/easy_version/${DISTRO_COMPAT_VERSION} | tail -n 1 | cut -f 2 -d '"' | cut -f 1 -d '/')"
#2020126 the list includes "..", remove it...
VERS="$(grep -o 'href="[^"]*' /tmp/easy_version/${DISTRO_COMPAT_VERSION} | cut -f 2 -d '"' | cut -f 1 -d '/' | grep -v '^\.\.')"
sortedVERS="$(echo "$VERS" | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n)" #lowest to highest. or, could use full sort "-V" option.
latestVER="$(echo "$sortedVERS" | tail -n 1)"
if [ "$latestVER" == "" ];then
 echo -en '\033[1;31m' #bright red.
 echo "$(gettext 'Sorry, there was an error probing the online repository, aborting script.')"
 echo -e '\033[0;39m' #reset.
 echo -e "\033[1;31m${MSGexit}\033[0;39m"
 exit 2
fi

vercmp ${DISTRO_VERSION} lt ${latestVER}
VERcmp=$?

#20220404 if currently rolled-back, check if latestVER already installed...
if [ $VERcmp -eq 0 ];then #=0 if true.
 if [ -d /mnt/wkg/releases/easy-${latestVER} ];then
  echo -en '\033[1;31m' #bright red.
  echo "$(gettext 'The latest online version is:') ${latestVER}"
  echo "$(gettext 'The current running version is:') ${DISTRO_VERSION}"
  echo "$(gettext 'HOWEVER, the latest version is already installed,')"
  echo "$(gettext ' that you have rolled back from.')"
  echo "$(gettext 'WILL NOT UPDATE, exiting script.')"
  echo -e '\033[0;39m' #reset.
  echo -e "\033[1;31m${MSGexit}\033[0;39m"
  exit 3
 fi
fi

if [ $VERcmp -ne 0 ];then #=0 if true.
 echo -en '\033[1;31m' #bright red.
 echo "$(gettext 'The latest online version is:') ${latestVER}"
 echo "$(gettext 'The current installed version is:') ${DISTRO_VERSION}"
 echo "$(gettext 'No later version online, so exiting script.')"
 echo -e '\033[0;39m' #reset.
 echo -e "\033[1;31m${MSGexit}\033[0;39m"
 exit 3
else
 echo -en '\033[1;34m' #bright blue
 echo "$(gettext 'The latest online version is:') ${latestVER}"
 echo "$(gettext 'The current installed version is:') ${DISTRO_VERSION}"
 echo "$(gettext 'Newer online version, so can update...')"
 echo -e '\033[0;39m' #reset.
fi

#20230503 cannot update fscrypt v1 to v2...
. /mnt/wkg/sfs/settings/initrd/CONFIG
if [ "$ALLOW_ASK_PW" == "yes" ];then
 vercmp ${latestVER} gt 5.2.4
 if [ $? -eq 0 ];then
  vercmp ${DISTRO_VERSION} le 5.2.4
  if [ $? -eq 0 ];then
   S1=$(du -m -s /mnt/wkg/containers | tr '\t' ' ' | cut -f 1 -d ' ')
   S2=$(du -m -s /mnt/wkg/files | tr '\t' ' ' | cut -f 1 -d ' ')
   S3=$(du -m -s /mnt/wkg/.session | tr '\t' ' ' | cut -f 1 -d ' ')
   St=$(($S1+$S2+$S3))
   St=$(($St+3300)) #plus extra 3.3GB coz of later d/l
   Sf=$(df -m /dev/${WKG_DEV} | grep '^/dev' | tr -s ' ' | cut -f 4 -d ' ')
   
   echo -en '\033[1;31m' #bright red.
   echo "$(gettext 'WARNING! WARNING! WARNING!')"
   echo "$(gettext 'Beyond version 5.2.4 the method used to encrypt the folders has changed. This means you cannot update in the normal way.')"
   echo "$(gettext "Instead, the 'containers', 'files' and '.session' encrypted folders will be copied into /mnt/wkg/v1tov2.")"
   echo "$(gettext "The update may then continue. At next bootup, the four encrypted folders 'containers', 'files', '.sesssion' and 'releases' will be deleted and recreated with the new v2 encryption technique, and the contents of folder 'v1tov2' copied into them.")"
   echo "$(gettext 'The most important consequence is that the history is wiped, no rollback to 5.2.4 and before.')"
   echo -e '\033[0;39m' #reset.
   echo "$(gettext 'There is one potential complication: there must be sufficient free space in the working-partition.')"
   echo -n "$(gettext 'Required space for v1tov2 folder and download:') "
   echo "${St}M"
   echo -n "$(gettext 'Free space available in working-partition:') "
   echo "${Sf}M"
   vercmp ${St} gt ${Sf}
   if [ $? -eq 0 ];then
    echo -en '\033[1;31m' #bright red.
    echo "$(gettext 'NOT ENOUGH FREE SPACE! Aborting update')"
    echo -e '\033[0;39m' #reset.
    askabort='y'
   else
    echo "$(gettext 'Press the ENTER key to continue with update,')"
    echo -n "$(gettext 'or any other key to abort:') "
    read askabort
   fi
   if [ "$askabort" != "" ];then
    echo ''
    echo "$(gettext 'Update aborted')"
    echo -e "\033[1;31m${MSGexit}\033[0;39m"
    exit 9
   fi
   echo ''
   echo "$(gettext 'Copying contents of encrypted folders to /mnt/wkg/v1tov2...')"
   if [ -d /mnt/wkg/v1tov2 ];then
    rm -rf /mnt/wkg/v1tov2
   fi
   mkdir /mnt/wkg/v1tov2
   mkdir /mnt/wkg/v1tov2/containers
   cp -a /mnt/wkg/containers/* /mnt/wkg/v1tov2/containers/
   mkdir /mnt/wkg/v1tov2/files
   cp -a /mnt/wkg/files/* /mnt/wkg/v1tov2/files/
   mkdir /mnt/wkg/v1tov2/session
   cp -a /mnt/wkg/.session/* /mnt/wkg/v1tov2/session/
   sync
   if [ -d /mnt/wkg/data/flatpak ];then #20230504
    cp -a /mnt/wkg/data/flatpak /mnt/wkg/v1tov2/
    sync
   fi
   #20230504 maybe symlink to flatpak home folders...
   for aL in $(find /mnt/wkg/v1tov2/session/home -mindepth 1 -maxdepth 1 -type l | tr '\n' ' ')
   do
    rm -f /mnt/wkg/v1tov2/session/home/${aL##*/}
   done
   sync
  fi
 fi
fi

#ask for a download location, must have 3GB free space... 20220629 bump from 2GB
BLOCKbytes="$(stat -f -c %S /mnt/${WKG_DEV})" #block size, usually 4096
FREEblocks="$(stat -f -c %f /mnt/${WKG_DEV})"
FREEk=$(expr ${FREEblocks} \/ 1024 \* ${BLOCKbytes})
FREEm=$(expr ${FREEk} \/ 1024)
if [ $FREEm -lt 3000 ];then
 echo -en '\033[1;31m' #bright red.
 echo "$(gettext 'Sorry, /mnt/wkg must have at least 3GB free space. Aborting')"
 echo -e '\033[0;39m' #reset.
 echo -e "\033[1;31m${MSGexit}\033[0;39m"
 exit 7
else
 echo -en '\033[1;32m\033[44m' #bright green. 20211221 blue background
 echo -n "$(gettext 'Good. Required free space in /mnt/wkg is 3GB, you have:') ${FREEm}MB"
 echo -e '\033[0;39m\033[49m' #reset. 20211221
fi
DL_PATH="/mnt/${WKG_DEV}/${WKG_DIR}" #same as /mnt/wkg
cd $DL_PATH

#ask if have a .img of current version...
echo

#get rid of any old compressed...
rm -f easy-*.img.gz 2>/dev/null

#see if already downloaded new version... 20230305
askdl='download'
HAVEDELTA='no'
if [ -f ${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img ];then
 sync
 mv -f ${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img XXX${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img
 rm -f ${DISTRO_NAME_SHORT,,}-*.img 2>/dev/null #get rid of any others.
 sync
 mv -f XXX${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img ${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img

 echo
 echo -en '\033[1;35m' #bright magenta
 echo "$(gettext 'The latest image file has already been downloaded:')"
 echo " ${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img"
 echo "$(gettext 'Do you want to install it, or re-download it?')"
 echo -n "$(gettext 'Press ENTER only to install, any other char to re-download:')"
 echo -en '\033[0;39m' #reset.
 read askdl
 if [ "$askdl" == "" ];then
  echo " $(gettext '...have chosen to install existing image file')"
 else
  echo " $(gettext '...have chosen to erase the image file and re-download it')"
  rm -f ${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img
 fi
else #20220623
 #rm -f easy-*.img 2>/dev/null #get rid of any others.
 #20220623 no, keep latest version, maybe there is a .delta online
 #sortedVERS="$(echo "$VERS" | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n)" #lowest to highest. or, could use full sort "-V" option.
 #latestVER="$(echo "$sortedVERS" | tail -n 1)"
 # ...nah, using sort -V
 LASTIMG="$(ls -1 easy-*.img ${DISTRO_NAME_SHORT,,}-*.img 2>/dev/null | sort -V -t "-" -k 2,2 | tail -n 1)"
 if [ "$LASTIMG" == "" ];then #20230328
  echo -en '\033[1;31m' #bright red
  echo "$(gettext 'There is no easy-*.img file at location /mnt/wkg') "
  echo "$(gettext 'If you have the easy-*.img file, for the current version of EasyOS or recent, somewhere else, copy it right now to /mnt/wkg.')" | fold -s -w ${COLUMNS}
  echo "$(gettext 'This will enable download of a small difference-file. Otherwise, the full latest .img file will have to be downloaded, which is about 800MB.')" | fold -s -w ${COLUMNS}
  echo "$(gettext 'Move or copy the .img file right now, if you have it, then press the ENTER key.')" | fold -s -w ${COLUMNS}
  echo -n "$(gettext 'Press ENTER to continue:') "
  echo -en '\033[0;39m' #reset.
  read awaitimg
  sync
  echo ''
  LASTIMG="$(ls -1 easy-*.img ${DISTRO_NAME_SHORT,,}-*.img 2>/dev/null | sort -V -t "-" -k 2,2 | tail -n 1)"
 fi
 if [ "$LASTIMG" ];then
  mv -f ${LASTIMG} XXX${LASTIMG}
  rm -f easy-*.img 2>/dev/null #get rid of any others.
  rm -f ${DISTRO_NAME_SHORT,,}-*.img 2>/dev/null #20230305
  sync
  mv -f XXX${LASTIMG} ${LASTIMG}
  echo "$(gettext 'You have this local file:') ${LASTIMG}"
  echo "$(gettext 'Looking online to see if a delta file exists...')"
  wget -4 -S --spider ${EASYOS_RELEASES_URL}/${latestVER}/deltas/${LASTIMG}___${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img.delta > /tmp/easy-update-delta-probe 2>&1 
  grep -q 'HTTP/1\.1 200 OK' /tmp/easy-update-delta-probe
  if [ $? -ne 0 ];then
   echo " $(gettext '...no it does not. will have to download full-size latest version.')"
  else
   echo " $(gettext '...Yes it does! This is a smaller size than the entire latest image file.')"
   echo " $(gettext '   This will be downloaded and full-size latest file generated.')"
   askdl=''
   HAVEDELTA='yes'
   
   #20220628 check md5sum of local file...
   if [ ! -f md5sum.txt ];then
    download_file ${EASYOS_RELEASES_URL}/${DISTRO_VERSION}/md5sum.txt >/dev/null 2>&1
    RETVAL=$?
    if [ $RETVAL -ne 0 ];then
     if [ -z "$origEASYOS_RELEASES_URL" ];then #20240302
      YEAR0=$(($YEAR-1))
      rm -f md5sum.txt 2>/dev/null
      download_file https://distro.ibiblio.org/easyos/${DISTRO_TARGETARCH}/releases/${DISTRO_COMPAT_VERSION}${DEEPER}/${YEAR0}/${DISTRO_VERSION}/md5sum.txt >/dev/null 2>&1
      RETVAL=$?
     fi
    fi
   else
    RETVAL=0
   fi
   if [ $RETVAL -eq 0 ];then #only test if have an md5sum.txt file.
    echo
    echo "$(gettext 'However, first performing a checksum test on the local file...')"
    md5sum ${LASTIMG} > md5sumtest.txt
    cmp -s md5sum.txt md5sumtest.txt
    if [ $? -ne 0 ];then
     echo -n -e "\033[1;31m" #red, bright
     echo "  $(gettext 'Oh dear, the checksum in md5sum.txt does not match the file.')"
     echo "  $(gettext 'Will have to download the full-size latest image file.')"
     echo -e "\033[0;39m"
     askdl='download'
     HAVEDELTA='no'
    else #20220629
     echo "  $(gettext '...OK')"
     echo
    fi
    rm -f md5sumtest.txt
   fi
   
  fi
 fi
fi

echo -n "$(gettext 'When ready, press ENTER key:') "
read keepgoing

if [ "$HAVEDELTA" == "yes" ];then
 
 #20220624 get md5sum...
 rm -f md5sums.txt 2>/dev/null
 download_file ${EASYOS_RELEASES_URL}/${latestVER}/deltas/md5sums.txt
 if [ $? -ne 0 ];then
  echo -en '\033[1;31m' #bright red.
  echo "$(gettext 'Something went wrong with the download. Aborting')"
  echo -en '\033[0;39m' #reset.
  rm -f md5sums.txt 2>/dev/null
  rm -rf ./.cache 2>/dev/null
  echo -e "\033[1;31m${MSGexit}\033[0;39m"
  exit 9
 fi
 
 rm -f ${LASTIMG}___${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img.delta 2>/dev/null
 download_file ${EASYOS_RELEASES_URL}/${latestVER}/deltas/${LASTIMG}___${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img.delta
 RET=$?
 if [ $RET -eq 0 ];then
  MD5SUM="$(md5sum ${LASTIMG}___${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img.delta | cut -f 1 -d ' ')"
  grep -q "$MD5SUM" md5sums.txt
  if [ $? -ne 0 ];then
   rm -f md5sums.txt 2>/dev/null
   RET=1
  fi
 fi 
 if [ $RET -ne 0 ];then
  echo -en '\033[1;31m' #bright red.
  echo "$(gettext 'Something went wrong with the download. Aborting')"
  echo -en '\033[0;39m' #reset.
  rm -f md5sums.txt 2>/dev/null
  rm -f ${LASTIMG}___${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img.delta 2>/dev/null
  rm -rf ./.cache 2>/dev/null
  echo -e "\033[1;31m${MSGexit}\033[0;39m"
  exit 9
 fi
 sync
 chown root:root ${LASTIMG}___${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img.delta
 echo "$(gettext 'Download successful, generating the latest image file...')"
 xdelta3 -d -s ${LASTIMG} ${LASTIMG}___${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img.delta ${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img
 if [ $? -ne 0 ];then
  echo -en '\033[1;31m' #bright red.
  echo "$(gettext 'Something went wrong. Maybe the .delta file is corrupted. Aborting.')"
  echo -en '\033[0;39m' #reset.
  rm -f md5sums.txt 2>/dev/null
  rm -f ${LASTIMG}___${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img.delta 2>/dev/null
  rm -f ${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img 2>/dev/null
  rm -rf ./.cache 2>/dev/null
  echo -e "\033[1;31m${MSGexit}\033[0;39m"
  exit 9
 else
  echo "$(gettext 'The new image file has been generated!')"
  echo
  rm -f md5sums.txt 2>/dev/null
  md5sum ${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img > md5sum.txt
 fi
fi

if [ "$askdl" != "" ];then
 #download latest, full-size image file...
 echo
 echo -en '\033[1;35m' #bright magenta
 echo "$(gettext 'Downloading') ${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img ..."
 echo -en '\033[0;39m' #reset.
  
 #20220625 get md5sum... 20230221
 rm -f md5sum.txt 2>/dev/null
 download_file ${EASYOS_RELEASES_URL}/${latestVER}/md5sum.txt
 if [ $? -ne 0 ];then
  echo -en '\033[1;31m' #bright red.
  echo "$(gettext 'Something went wrong with the download. Aborting')"
  echo -en '\033[0;39m' #reset.
  rm -f md5sum.txt 2>/dev/null
  rm -rf ./.cache 2>/dev/null
  echo -e "\033[1;31m${MSGexit}\033[0;39m"
  exit 9
 fi
 download_file ${EASYOS_RELEASES_URL}/${latestVER}/${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img
 RETVAL=$?
 
 if [ $RETVAL -eq 0 ];then #20220625
  MD5SUM="$(md5sum ${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img | cut -f 1 -d ' ')"
  grep -q "$MD5SUM" md5sum.txt
  if [ $? -ne 0 ];then
   rm -f md5sum.txt 2>/dev/null
   RETVAL=1
  fi
 fi
 
 if [ $RETVAL -ne 0 ];then
  echo -en '\033[1;31m' #bright red.
  echo "$(gettext 'Something went wrong with the download. Aborting')"
  echo -en '\033[0;39m' #reset.
  rm -f ${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img 2>/dev/null #20220512 only remove aborted update .img
  rm -rf ./.cache 2>/dev/null
  rm -f md5sum.txt 2>/dev/null
  echo -e "\033[1;31m${MSGexit}\033[0;39m"
  exit 9
 fi
fi

#20210425 fedora: has strange group:owner
chown root:root /mnt/${WKG_DEV}/${WKG_DIR}${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img

#offer to install...
echo -en '\033[1;35m' #bright magenta
echo "$(gettext 'This file has been downloaded:')"
echo "/mnt/${WKG_DEV}/${WKG_DIR}${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img"

if [ "$KERNAME" == "kernel8.img" ];then #20210125 rpi  20210701
 echo "$(gettext 'You may do a manual update, by clicking on the image file to open it up, drag kernel8.img, initrd and the device-tree files to the boot-partition, and easy.sfs to the working-partition, then click on initrd to fix the BOOT_SPECS file. These steps are documented online.')" | fold -s -w ${COLUMNS}
else
 echo "$(gettext 'You may do a manual update, by clicking on the image file to open it up, drag vmlinuz, initrd and easy.sfs to the working-partition, then click on the file again to unmount, then reboot. Easy-peasy.')" | fold -s -w ${COLUMNS}
fi
echo "$(gettext 'However, this script can do it automatically. Make your choice...')"
echo -en '\033[0;39m' #reset.
echo -e '\033[1;34m' #bright blue
echo -n "$(gettext 'Press ENTER for automatic update (any other key to quit):') "
echo -en '\033[0;39m' #reset.
read autoupdate
[ "$autoupdate" != "" ] && echo -e "\033[1;31m${MSGexit}\033[0;39m" && exit 10

echo
echo -en '\033[1;35m' #bright magenta
if [ "$KERNAME" == "kernel8.img" ];then #20210701
 echo "$(gettext 'Extracting files kernel8.img, initrd and easy.sfs...')"
else
 echo "$(gettext 'Extracting files vmlinuz, initrd and easy.sfs...')"
fi
echo -en '\033[0;39m' #reset.
sync

rm -rf /tmp/mount-img-* 2>/dev/null
mount-img ${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img quiet
CNT=$? #number of partitions mounted.
#...should have folders /tmp/mount-img-${CNT}-${aFS}-${LOOPn##*/}
#   /tmp/mount-img-1-vfat-loop<n> and /tmp/mount-img-2-ext4-loop<m>

if [ $CNT -ne 2 ];then
 echo -en '\033[1;31m' #bright red.
 echo "$(gettext 'Something is wrong with the downloaded file. Deleting it and aborting.')"
 echo -en '\033[0;39m' #reset.
 
 #20220625 use code out of mount-img...
 #mount-img quiet
 CNT=0
 for aMNT in `ls -d /tmp/mount-img-[1-9]-* 2>/dev/null`
 do
  [ "$aMNT" == "" ] && continue
  [ ! -d "$aMNT" ] && continue
  aDIR="${aMNT##*/}"
  sync
  busybox umount "$aMNT"
  rm -rf /tmp/$aDIR
  losetup -d /dev/${aDIR/*-/}
  CNT=$(($CNT+1))
 done
 
 rm -f ${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img
 echo -e "\033[1;31m${MSGexit}\033[0;39m"
 exit 11
fi

MNTPT1="$(ls -1 -d /tmp/mount-img-1-vfat-*)"
MNTPT2="$(ls -1 -d /tmp/mount-img-2-ext4-*)"

BOOTflg=0
if [ "$BOOT_DEV" ];then #this is for the rpi4
 grep -q "^/dev/${BOOT_DEV} " /proc/mounts 
 if [ $? -ne 0 ];then
  mkdir -p /mnt/${BOOT_DEV}
  mount -t ${BOOT_FS} /dev/${BOOT_DEV} /mnt/${BOOT_DEV}
  BOOTflg=1
 fi
fi

###offer to update nvidia sfs###
#20231108 20231109
#note, init in initrd will carry-over sfs files.
if [ -e /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${DISTRO_VERSION}/nvidia.sfs ];then
 #check that it is mounted...
 grep -q 'easy_ro/nvidia' /proc/mounts
 if [ $? -eq 0 ];then
  realNVSFS="$(realpath /mnt/${WKG_DEV}/${WKG_DIR}releases/easy-${DISTRO_VERSION}/nvidia.sfs)" #symlink
  #...ex: /mnt/sdb3/easyos-kirkstone/sfs/easyos/oe/kirkstone/nvidia_5.15.137-525.106.06_amd64.sfs
  #we need to know the kernel version of the new easyos version...
  newKERNVER="$(LANG=C file ${MNTPT2}/easyos/${KERNAME} | grep -o 'version [^ ]*' | cut -f 2 -d ' ')"
  if [ "$newKERNVER" != "$KERNVER" ];then
   download_file ${SFS_REPO_URL}/sfs-repo-file-list
   if [ $? -eq 0 ];then
    NVmajorver="$(echo -n "$realNVSFS" | rev | cut -f 1 -d '-' | rev | cut -f 1 -d '.')" #ex: 525
    newNVSFSurl="$(grep -F "easyos/${DISTRO_BINARY_COMPAT}/${DISTRO_COMPAT_VERSION}/nvidia_${newKERNVER}-${NVmajorver}." sfs-repo-file-list | grep 'sfs$' | sed -e 's%\.sfs$%%')"
    if [ "$newNVSFSurl" ];then #ex: easyos/oe/kirkstone/nvidia_5.15.137-525.106.06_amd64
     echo
     echo "$(gettext 'The kernel version in the next release of EasyOS is different, which will require a new NVIDIA SFS.')"
     echo "$(gettext 'Current kernel version:') ${KERNVER}"
     echo "$(gettext 'Next kernel version:') ${newKERNVER}"
     echo "$(gettext 'If you download the latest NVIDIA SFS, it will be automatically applied at the EasyOS version update.')"
     echo -n "$(gettext 'Press ENTER key to update NVIDIA SFS, any other key to decline:') "
     read dlnvidia
     if [ "$dlnvidia" == "" ];then
      download_file ${SFS_REPO_URL}/${newNVSFSurl}.sfs
      if [ $? -eq 0 ];then
       mv ${newNVSFSurl##*/}.sfs /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${DISTRO_BINARY_COMPAT}/${DISTRO_COMPAT_VERSION}/
       sync
       download_file ${SFS_REPO_URL}/${newNVSFSurl}.specs
       if [ $? -eq 0 ];then
        mv ${newNVSFSurl##*/}.specs /mnt/${WKG_DEV}/${WKG_DIR}sfs/easyos/${DISTRO_BINARY_COMPAT}/${DISTRO_COMPAT_VERSION}/
        sync
       fi
      else
       echo "$(gettext '...error, download failed.')"
      fi
      rm -f ${newNVSFSurl##*/}.sfs 2>/dev/null
      rm -f ${newNVSFSurl##*/}.specs 2>/dev/null
     else
      echo "$(gettext '...declined')"
     fi
    fi
   fi
   rm -f sfs-repo-file-list 2>/dev/null
  fi
 fi
fi

while [ 1 ];do #200826 sanity checks...
 echo -en '\033[1;35m' #bright magenta
 if [ "$KERNAME" == "kernel8.img" ];then #20210701
  echo "$(gettext 'Copying new kernel8.img and initrd to boot-partition, and easy.sfs to working-partition...')" | fold -s -w ${COLUMNS} #20220615
 else
  echo "$(gettext 'Copying new vmlinuz, initrd and easy.sfs to working-partition...')" | fold -s -w ${COLUMNS} #20220615
 fi
 echo -en '\033[0;39m' #reset.
 FAILED=''
 echo -n " ${KERNAME}" #20210701...
 cp -a -f ${MNTPT2}/easyos/${KERNAME} /mnt/${WKG_DEV}/${WKG_DIR}
 sync
 busybox cmp -s ${MNTPT2}/easyos/${KERNAME} /mnt/${WKG_DEV}/${WKG_DIR}${KERNAME}
 if [ $? -eq 0 ];then
  echo -n ' initrd'
  cp -a -f ${MNTPT2}/easyos/initrd /mnt/${WKG_DEV}/${WKG_DIR}
  sync
  busybox cmp -s ${MNTPT2}/easyos/initrd /mnt/${WKG_DEV}/${WKG_DIR}initrd
  if [ $? -eq 0 ];then
   echo -n ' easy.sfs PLEASE WAIT...' #note 3buidleasydistro substitutes easy.sfs
   cp -a -f ${MNTPT2}/easyos/${DISTRO_NAME_SHORT,,}.sfs /mnt/${WKG_DEV}/${WKG_DIR}
   sync
   busybox cmp -s ${MNTPT2}/easyos/${DISTRO_NAME_SHORT,,}.sfs /mnt/${WKG_DEV}/${WKG_DIR}${DISTRO_NAME_SHORT,,}.sfs
   [ $? -ne 0 ] && FAILED="easy.sfs"
  else
   FAILED='initrd'
  fi
 else
  FAILED="${KERNAME}"
 fi
 echo
 [ "$FAILED" == "" ] && break
 echo -en '\033[1;31m' #bright red.
 echo "$(gettext 'This file did not copy correctly:') ${FAILED}"
 echo -n "$(gettext 'Press the ENTER key to try again, or any other key then ENTER to give up:')"
 echo -en '\033[0;39m' #reset.
 read giveupflg
 [ "$giveupflg" != "" ] && break
done
if [ "$FAILED" ];then
 sync
 mount-img quiet #unmount .img partitions.
 echo -e '\033[1;31m' #bright red.
 echo "$(gettext 'Copy failed. Aborting.')"
 echo "$(gettext 'This is bad, you may not be able to reboot. Recommend try immediate manual update.')" | fold -s -w ${COLUMNS}
 echo "$(gettext 'Downloaded file still there, you can try manual update.')" | fold -s -w ${COLUMNS}
 if [ "$KERNAME" == "kernel8.img" ];then #20210701
  echo "$(gettext 'Or, you can abort the update by copying kernel8.img, initrd and easy.sfs of the current version, from /mnt/wkg/releases, and /boot/device-tree contents')" | fold -s -w ${COLUMNS}
 else
  echo "$(gettext 'Or, you can abort the update by copying the files of the current version, vmlinuz, initrd from /mnt/wkg/releases, and easy.sfs from /mnt/wkg/sfs (the file will need to be renamed to easy.sfs)')" | fold -s -w ${COLUMNS}
 fi
 echo -e '\033[0;39m' #reset.
 echo -e "\033[1;31m${MSGexit}\033[0;39m"
 exit 12
fi
sync
if [ -d "$MNTPT1" ];then #precaution.
 mount-img quiet #unmount .img partitions.
fi

if [ -d /boot/device-tree ];then #20210125 rpi
 echo -en '\033[1;35m' #bright magenta
 echo "$(gettext 'The new easy.sfs has the latest device-tree files in it, extracting and copying them to the boot partition...')" | fold -s -w ${COLUMNS}
 echo -en '\033[0;39m' #reset.
 mkdir mntpt2
 busybox mount -t squashfs -o loop,ro /mnt/${WKG_DEV}/${WKG_DIR}${DISTRO_NAME_SHORT,,}.sfs mntpt2
 if [ -d mntpt2/boot/device-tree ];then
  cp -a -f mntpt2/boot/device-tree/* /mnt/${BOOT_DEV}/${BOOT_DIR}
 fi
 sync
 umount mntpt2
 rmdir mntpt2
fi

#if current version exists, delete it...
if [ -f easy-${DISTRO_VERSION}-${DISTRO_TARGETARCH}.img ];then
 rm -f easy-${DISTRO_VERSION}-${DISTRO_TARGETARCH}.img
 sync
fi

#20220728 remove .delta file...
rm -f easy*.delta 2>/dev/null
rm -f ${DISTRO_NAME_SHORT,,}*.delta 2>/dev/null

#maybe unmount boot-partition... for rpi4
[ $BOOTflg -eq 1 ] && umount /mnt/${BOOT_DEV}

echo
echo -en '\033[1;32m\033[44m' #bright green. 20211221 blue background for legibility.
echo "$(gettext 'Finished!')"
echo "$(gettext 'This is the working-partition:') ${WKG_DEV}"
if [ "$WKG_DIR" ];then
 echo "$(gettext 'Which has this folder:') /${WKG_DIR}"
fi
if [ "$KERNAME" == "kernel8.img" ];then
 echo "$(gettext 'Which has the new files kernel8.img and initrd')"
else
 echo "$(gettext 'Which has the new files vmlinuz and initrd')"
fi
echo "$(gettext ' and has the new file easy.sfs')"
echo "$(gettext 'The new version will be:') ${latestVER}"
echo -n "$(gettext 'All that you have to do is reboot!')"
echo -e '\033[0;39m\033[49m' #reset. 20211221

echo
echo -en '\033[1;34m' #blue
echo "$(gettext 'This is the downloaded file:')"
echo "/mnt/${WKG_DEV}/${WKG_DIR}${DISTRO_NAME_SHORT,,}-${latestVER}-${DISTRO_TARGETARCH}.img"
echo "$(gettext 'It is not needed anymore. You can delete it or archive it somewhere.')"
echo "$(gettext 'However, at the next update, this file can be used for a smaller difference-file download, so recommend leave it where it is.')" | fold -s -w ${COLUMNS}
echo
#echo -n "Script finished, press ENTER to exit: "
echo -en '\033[0;39m' #reset.
echo -e "\033[1;31m${MSGexit}\033[0;39m"
#read wearedone

###end###

#!/bin/bash
#20240903
#have /usr/bin/*.install scripts. this is a generic script to replace them.
#called from /usr/bin/<pkg-name>.install scripts.
#pass in pkg-name PN=$1.
#restriction: executable-name and icon-name to be the same.
#  also expect exist /usr/share/pixmaps/icon-name.png
#20240906 if uninstall, need to remove .bin, .bin0
#20241016 PNalt alternative package name (devuan).
#20241212 pkg may be a pet.
#20250102 bug fix line 167

export TEXTDOMAIN=orange
export OUTPUT_CHARSET=UTF-8

PN="${1}"
#note: this is actually a shell script, so that momanager will find it and create translations...
if [ -e /usr/local/orange/config/${PN} ];then
. /usr/local/orange/config/${PN}
fi
[ "$RN" == "" ] && exit 1
#PN=pkg-name EN=executable-name RN=real-name AN=alt-exe-names SD=short-descr HP=homepage MI=mini-icon UN=user PF=post-install-frame
#ex: gimagereader gimagereader gImageReader "gimagereader-gtk gimagereader-qt5" "Optical character recognition" "https://github.com/manisandro/gImageReader" mini-Graphic-scanner gimagereader "<frame>...</frame>"

#note: UN currently only recognized if =root

#precaution...
Iflg=0
grep -q -F "|${PN}|" /root/.packages/user-installed-packages 2>/dev/null
if [ $? -eq 0 ];then Iflg=1; fi
if [ -n "$PNalt" ];then
 grep -q -F "|${PNalt}|" /root/.packages/user-installed-packages 2>/dev/null
 if [ $? -eq 0 ];then Iflg=1; fi
fi
if [ $Iflg -eq 1 ];then exit; fi

which ${EN} >/dev/null
RV=$?
if [ $RV -ne 0 ];then
 for aEXE in ${AN}
 do
  which $aEXE >/dev/null
  RV=$?
  [ $RV -eq 0 ] && break
 done
fi
if [ $RV -eq 0 ];then
 E1="$(gettext 'ERROR already installed:') ${RN}"
 popup "level=top background=#ffa0a0 terminate=ok|<big>${E1}</big>"
 exit
fi

. /etc/DISTRO_SPECS 
#DISTRO_COMPAT_VERSION=kirkstone DISTRO_BINARY_COMPAT=oe
mkdir -p /tmp/petget
mkdir -p /tmp/orange

. /etc/uimanager
#UI_DESK_MANAGER=jwm or rox

#precaution
if [ ! -e /usr/share/pixmaps/${EN}.png ];then
 ln -s executable.png /usr/share/pixmaps/${EN}.png
fi

export gIR_INSTALL_DLG="
<window title=\"${RN}\" image-name=\"/usr/local/lib/X11/mini-icons/ballorange22.png\">
<vbox>
 <hbox>
  <pixmap><input file>/usr/share/pixmaps/${EN}.png</input></pixmap>
  <text use-markup=\"true\"><label>\"<b>${RN} ${SD,}</b>\"</label></text>
  <text><label>\"                      \"</label></text>
 </hbox>
 <text>
  <label>\"$(gettext 'This app is not installed. It is a native application, available in the package repository via PKGget and you can install it by clicking on the INSTALL button.')
$(gettext 'You may click the Online Information button to view the app homepage in the web browser.')
\"</label>
 </text>
 <hbox>
  <button><label>$(gettext 'Online Information')</label><action>mozbare ${HP} & </action></button>
  <button><label>$(gettext 'INSTALL')</label><action>EXIT:install</action></button>
  <button cancel></button>
 </hbox>
</vbox>
</window>
"
RETVARS="$(gtkdialog --program=gIR_INSTALL_DLG --center)" 
xRETVARS="$(echo "$RETVARS" | grep '^EXIT=')"
eval "$xRETVARS"
if [ "$EXIT" != "install" ];then
 exit
fi

kill `pgrep -f mozbare` 2>/dev/null

#oe will be -official but for debian may be -main, so have "-*" here...
DBfnd="$(grep -H -F "|${PN}|" /root/.packages/Packages-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}-* | head -n 1)"
if [ -z "$DBfnd" ];then
 if [ -n "$PNalt" ];then
  DBfnd="$(grep -H -F "|${PNalt}|" /root/.packages/Packages-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}-* | head -n 1)"
  if [ -n "$DBfnd" ];then PN="${PNalt}"; fi
 fi
fi
if [ -z "$DBfnd" ];then #20241212
 DBfnd="$(grep -H -F "|${PN}|" /root/.packages/Packages-pet-${DISTRO_COMPAT_VERSION}-official | head -n 1)"
fi
if [ -z "$DBfnd" ];then #precaution
 ##debian...
 #DBfnd="$(grep -H '|obs-studio|' /root/.packages/Packages-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}-* | head -n 1)"
 exit
fi
DBrepospec="${DBfnd/:*/}"
#ex: /root/.packages/Packages-oe-kirkstone-official
DBentry="${DBfnd/*:/}"
#ex: scribus-1.5.8-r3|scribus|1.5.8-r3||Document;layout|144116K|kirkstone|scribus-1.5.8-r3-nocona-64.tar.xz|+boost,+cairo,+cups,+cups-filters,+expat,+fontconfig,+freetype,+ghostscript,+glib-2.0,+gmp,+gnutls,+graphite2,+harfbuzz,+hunspell,+icu,+lcms,+libcdr,+libdrm,+libfreehand,+libgcrypt,+libidn,+libjpeg-turbo,+libmspub,+libpagemaker,+libpng,+librevenge,+librsvg,+libunistring,+libvisio,+libwpd,+libx11,+libxau,+libxcb,+libxdamage,+libxdmcp,+libxext,+libxfixes,+libxml2,+libxrender,+libxshmfence,+libxxf86vm,+mesa,+nettle,+openssl,+pixman,+poppler,+python3,+qtbase,+qttools,+sqlite3,+tiff,+util-linux,+xz,+zlib|Scribus Open source desktop publishing|oe|kirkstone||

TREE1="${DBentry%%|*}" #ex: scribus-1.5.8-r3
export TREE1

DBreponame="${DBrepospec##*/}"
DBrepotriad="${DBreponame#*-}" #ex: oe-kirkstone-official

echo "${DBrepotriad}" > /tmp/petget/current-repo-triad
echo "${TREE1}|${MI}|${RN} ${SD,}|${DBrepotriad}|" > /tmp/petget/filterpkgs.results.post

#generates some needed files in /tmp then exit...
/usr/local/petget/pkg_chooser.sh "gen-tmp-files-only"

#save .desktop file, restore later...
cp -a -f /usr/share/applications/${EN}.desktop /tmp/orange/${EN}.desktop

#offer to install, with deps...
/usr/local/petget/installpreview.sh

#exit if not installed...
grep -q -F "|${PN}|" /root/.packages/user-installed-packages 2>/dev/null
if [ $? -ne 0 ];then
 exit
fi

if [ "${UN}" != "root" ];then
 #run as user, ex: 'gimagereader'...
 setup-client "${EN}=true"
fi

#remove all installed .desktop files...
for aDT in $(grep '/usr/share/applications/.*desktop' /root/.packages/${TREE1}.files | tr '\n' ' ')
do
 rm -f /usr/share/applications/${aDT##*/}
done
sed -i '\%/usr/share/applications%d' /root/.packages/${TREE1}.files
echo "/usr/share/applications/${EN}.desktop" >> /root/.packages/${TREE1}.files

#20240906 if uninstall, need to remove these...
if [ "${UN}" != "root" ];then
 echo "/usr/bin/${EN}.bin" >> /root/.packages/${TREE1}.files
 echo "/usr/bin/${EN}.bin0" >> /root/.packages/${TREE1}.files
fi

#fix .desktop, find menu category...
cp -a -f /tmp/orange/${EN}.desktop /usr/share/applications/${EN}.desktop
DT=/usr/share/applications/${EN}.desktop
DC="$(grep '^Categories=' ${DT} | cut -f 2 -d '=' | cut -f 1 -d ';')"
MC="$(grep "[ ,]${DC}[ ,]" /etc/xdg/menus/hierarchy | cut -f 1 -d ' ' | head -n 1)"
#...top menu category
#fix .desktop file...
sed -i -e "s%^Icon=.*%Icon=${EN}.png%" ${DT}
sed -i -e "s%^Exec=.*%Exec=${EN}%"  ${DT}

case "${MC}" in
 Desktop)    MENUtop="$(gettext 'Desktop')" ;;
 System)     MENUtop="$(gettext 'System')" ;;
 Setup)      MENUtop="$(gettext 'Setup')" ;;
 Filesystem) MENUtop="$(gettext 'Filesystem')" ;;
 Graphic)    MENUtop="$(gettext 'Graphic')" ;;
 Document)   MENUtop="$(gettext 'Document')" ;;
 Business)   MENUtop="$(gettext 'Business')" ;;
 Personal)   MENUtop="$(gettext 'Personal')" ;;
 Network)    MENUtop="$(gettext 'Network')" ;;
 Internet)   MENUtop="$(gettext 'Internet')" ;;
 Multimedia) MENUtop="$(gettext 'Multimedia')" ;;
 Fun)        MENUtop="$(gettext 'Fun')" ;;
 *)          MENUtop="$(gettext 'Utility')" ;;
esac

#based on code from /usr/local/flapi/flapi...
M1=''
if [ "$UN" == "root" ];then
 M1="$(gettext 'The application will run as the root user.')"
else
 M1="$(gettext 'This script has been created to run it:')
  /usr/bin/${EN}
$(gettext 'And a menu entry has been created in this category:')
  ${MENUtop}
$(gettext 'The application will run as this user:')
  ${EN}
$(gettext 'With user home directory:')
  /home/${EN}

$(gettext 'This means that the app will only be able to save files in the home directory or anywhere in the /files folder.')
$(gettext 'For your convenience, this folder has been created:')
  /files/apps/${EN}
$(gettext 'You may, if you wish, configure the app to open/save in this folder.')" 
fi

export PKG_INSTALLED_DLG1="<window title=\"${RN}: $(gettext 'install success')\" image-name=\"/usr/share/pixmaps/${EN}.png\">
  <vbox>
    <text><label>\"$(gettext 'Success, this application has been installed:')
  ${RN}
${M1}

$(gettext 'Click the OK button for some final useful information...')\"</label></text>
    <hbox>
     <button ok></button>
    </hbox>
  </vbox>
</window>
"
gtkdialog --center --program=PKG_INSTALLED_DLG1

#create a desktop icon for rox-mode, tray-entry for jwm-mode...
#create desktop icon...

#create jwm tray entry...
if [ -f /root/.jwm/tray-icons ];then
 grep -q -F "exec:${EN}<" /root/.jwm/tray-icons
 if [ $? -ne 0 ];then
  echo "<TrayButton popup=\"${RN}\" icon=\"${EN}.png\">exec:${EN}</TrayButton>" >> /root/.jwm/tray-icons
  if [ "${UI_DESK_MANAGER}" == "jwm" ];then
   #insert file between two patterns in /root/.jwmrc-tray...
   sed -i -e '/STARTICONS/,/ENDICONS/{/STARTICONS/!{/ENDICONS/!d}}' -e '/STARTICONS/r /root/.jwm/tray-icons' /root/.jwmrc-tray
  fi
 fi
fi

#if rox-mode, load icon to desktop...
#if jwm-mode, restart jwm...
if [ "${UI_DESK_MANAGER}" == "jwm" ];then
 pidof jwm >/dev/null
 if [ $? -eq 0 ];then
  jwm -restart
 fi
 MF="<frame>
   <text use-markup=\"true\"><label>\"<b>$(gettext 'Tray icon')</b>\"</label></text>
   <text use-markup=\"true\"><label>\"$(gettext 'An entry has been created in the menu; however, for your convenience an icon has also been created in the tray.')\"</label></text>
 </frame>"
else #rox
 MF="    <frame>
      <text use-markup=\"true\"><label>\"<b>$(gettext 'Desktop icon')</b>\"</label></text>
      <text use-markup=\"true\"><label>\"$(gettext 'An entry has been created in the menu; however, you can also create a desktop icon.')
$(gettext 'All that you need to do is drag the icon from ROX-Filer, onto the desktop, that is it.')
$(gettext 'You can do it any time in the future, and also can delete the desktop icon by right-click and choose Remove.')\"</label></text>
      <hbox>
       <text><label>$(gettext 'Click for ROX-Filer window:')</label></text>
       <button>
        <label>ROX-Filer</label>
        <action>rox -d /home/${EN} & </action>
       </button>
      </hbox>
    </frame>
"
fi

if [ -n "$PF" ];then
 PF="
 ${PF}
 "
fi

if [ "$UN" == "root" ];then
 M3=''
else
 M3="    <frame>
      <text use-markup=\"true\"><label>\"<b>$(gettext 'Security notes')</b>\"</label></text>
      <text use-markup=\"true\"><label>\"$(gettext 'As has been stated in the previous window, the application has been installed to run as a non-root user. This provides isolation between apps, in other words, extra security.')
$(gettext 'However, you may prefer to run some apps as the root user, a file-manager for example, where you want unfettered access to the entire filesystem, able to open, edit and save anywhere.')
($(gettext 'Very simple, execute to run as root:')  /usr/bin/${EN}.bin)\"</label></text>
    </frame>"
fi

export PKG_INSTALLED_DLG2="<window title=\"${RN}: $(gettext 'install notes')\" image-name=\"/usr/share/pixmaps/${EN}.png\">
  <vbox>
    ${M3}
    ${PF}    
    ${MF}
    
    <hbox>
     <button ok></button>
    </hbox>
  </vbox>
</window>
"
gtkdialog --center --program=PKG_INSTALLED_DLG2

###end###
